/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/admin/performance-check/route";
exports.ids = ["app/api/admin/performance-check/route"];
exports.modules = {

/***/ "(rsc)/./app/api/admin/performance-check/route.ts":
/*!**************************************************!*\
  !*** ./app/api/admin/performance-check/route.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/supabase */ \"(rsc)/./lib/supabase.ts\");\n\n/**\r\n * üîç PERFORMANCE MONITORING: System Performance Check\r\n * \r\n * Endpoint dla sprawdzania metryk wydajno≈õci systemu\r\n * \r\n * Zgodnie z INSTRUKCJE_PERFORMANCE_OPTIMIZATIONS.md\r\n */ function generateRecommendations(tableStats) {\n    const recommendations = [];\n    if (!tableStats || !Array.isArray(tableStats)) {\n        recommendations.push('Nie mo≈ºna sprawdziƒá statystyk tabel');\n        return recommendations;\n    }\n    // Sprawd≈∫ czy sƒÖ tabele do archiwizacji\n    const activeLogsTable = tableStats.find((stat)=>stat.table_name === 'activity_logs');\n    if (activeLogsTable && activeLogsTable.record_count > 10000) {\n        recommendations.push(`Tabela activity_logs ma ${activeLogsTable.record_count} rekord√≥w - rozwa≈º archiwizacjƒô`);\n    }\n    // Sprawd≈∫ rozmiar g≈Ç√≥wnej tabeli\n    const clientsTable = tableStats.find((stat)=>stat.table_name === 'activity_logs_archive');\n    if (clientsTable && clientsTable.record_count > 50000) {\n        recommendations.push('Tabela archiwalna jest du≈ºa - rozwa≈º czyszczenie bardzo starych danych');\n    }\n    if (recommendations.length === 0) {\n        recommendations.push('System wydajno≈õciowy dzia≈Ça optymalnie');\n    }\n    return recommendations;\n}\nasync function GET() {\n    try {\n        console.log('üîç ADMIN: Sprawdzanie metryk wydajno≈õci systemu...');\n        let tableStats = [];\n        let viewFreshness = {\n            lastUpdate: null,\n            minutesSinceUpdate: 0,\n            isStale: false\n        };\n        const errors = [];\n        // Sprawd≈∫ rozmiary tabel i statystyki (z obs≈ÇugƒÖ b≈Çƒôd√≥w)\n        try {\n            tableStats = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.performanceApi.getSystemMetrics();\n            console.log('‚úÖ Statystyki tabel pobrane pomy≈õlnie');\n        } catch (error) {\n            console.error('‚ùå B≈ÇƒÖd pobierania statystyk tabel:', error);\n            errors.push('Nie uda≈Ço siƒô pobraƒá statystyk tabel');\n            // Fallback data\n            tableStats = [\n                {\n                    table_name: 'fallback',\n                    record_count: 0,\n                    table_size: 'Brak danych',\n                    last_updated: new Date().toISOString()\n                }\n            ];\n        }\n        // Sprawd≈∫ ostatnie od≈õwie≈ºenie materializowanych widok√≥w (z obs≈ÇugƒÖ b≈Çƒôd√≥w)\n        try {\n            viewFreshness = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.dashboardApi.checkViewFreshness();\n            console.log('‚úÖ ≈öwie≈ºo≈õƒá widok√≥w sprawdzona pomy≈õlnie');\n        } catch (error) {\n            console.error('‚ùå B≈ÇƒÖd sprawdzania ≈õwie≈ºo≈õci widok√≥w:', error);\n            errors.push('Nie uda≈Ço siƒô sprawdziƒá ≈õwie≈ºo≈õci widok√≥w');\n            // Fallback data\n            viewFreshness = {\n                lastUpdate: new Date().toISOString(),\n                minutesSinceUpdate: 0,\n                isStale: false\n            };\n        }\n        // Generuj rekomendacje (zawsze dzia≈ÇajƒÖce)\n        const recommendations = generateRecommendations(tableStats);\n        // Dodaj informacje o b≈Çƒôdach do rekomendacji\n        if (errors.length > 0) {\n            recommendations.unshift(...errors.map((error)=>`‚ö†Ô∏è ${error}`));\n        }\n        console.log('‚úÖ ADMIN: Metryki wydajno≈õci pobrane (z eventualnymi ostrze≈ºeniami)');\n        const overallStatus = errors.length > 0 ? 'warning' : viewFreshness.isStale ? 'warning' : 'healthy';\n        return Response.json({\n            success: true,\n            timestamp: new Date().toISOString(),\n            tableStats,\n            viewFreshness,\n            recommendations,\n            systemHealth: {\n                viewsStale: viewFreshness.isStale,\n                tablesHealthy: tableStats && tableStats.length > 0,\n                overallStatus,\n                hasErrors: errors.length > 0,\n                errorCount: errors.length\n            }\n        });\n    } catch (error) {\n        console.error('‚ùå ADMIN: Krytyczny b≈ÇƒÖd sprawdzania wydajno≈õci:', error);\n        let errorMessage = 'Krytyczny b≈ÇƒÖd systemu monitorowania wydajno≈õci';\n        if (error instanceof Error) {\n            errorMessage = error.message;\n        } else if (typeof error === 'string') {\n            errorMessage = error;\n        }\n        return Response.json({\n            success: false,\n            error: errorMessage,\n            timestamp: new Date().toISOString(),\n            recommendations: [\n                'Sprawd≈∫ po≈ÇƒÖczenie z bazƒÖ danych',\n                'Sprawd≈∫ uprawnienia u≈ºytkownika',\n                'Skontaktuj siƒô z administratorem systemu'\n            ],\n            systemHealth: {\n                viewsStale: true,\n                tablesHealthy: false,\n                overallStatus: 'error',\n                hasErrors: true,\n                errorCount: 1\n            }\n        }, {\n            status: 200\n        }) // Zwr√≥cƒô 200 ale z success: false ≈ºeby frontend m√≥g≈Ç obs≈Çu≈ºyƒá\n        ;\n    }\n}\n/**\r\n * üöÄ POST endpoint dla manualnej optymalizacji systemu\r\n */ async function POST() {\n    try {\n        console.log('üöÄ ADMIN: Uruchamiam pe≈ÇnƒÖ optymalizacjƒô systemu...');\n        const startTime = Date.now();\n        // Uruchom pe≈ÇnƒÖ optymalizacjƒô bazy danych\n        const optimizationResult = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.performanceApi.optimizeDatabase();\n        const endTime = Date.now();\n        const duration = endTime - startTime;\n        console.log(`‚úÖ ADMIN: Optymalizacja zako≈Ñczona w ${duration}ms:`, optimizationResult);\n        return Response.json({\n            success: true,\n            message: optimizationResult,\n            duration: `${duration}ms`,\n            timestamp: new Date().toISOString(),\n            actions: [\n                'Zarchiwizowano stare logi',\n                'Od≈õwie≈ºono materializowane widoki',\n                'Zaktualizowano statystyki bazy danych'\n            ]\n        });\n    } catch (error) {\n        console.error('‚ùå ADMIN: B≈ÇƒÖd optymalizacji systemu:', error);\n        let errorMessage = 'Nie uda≈Ço siƒô zoptymalizowaƒá systemu';\n        if (error instanceof Error) {\n            errorMessage = error.message;\n        } else if (typeof error === 'string') {\n            errorMessage = error;\n        }\n        return Response.json({\n            success: false,\n            error: errorMessage,\n            timestamp: new Date().toISOString()\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/admin/performance-check/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/supabase.ts":
/*!*************************!*\
  !*** ./lib/supabase.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   activityLogsApi: () => (/* binding */ activityLogsApi),\n/* harmony export */   authApi: () => (/* binding */ authApi),\n/* harmony export */   callsApi: () => (/* binding */ callsApi),\n/* harmony export */   clientsApi: () => (/* binding */ clientsApi),\n/* harmony export */   csvImportApi: () => (/* binding */ csvImportApi),\n/* harmony export */   dashboardApi: () => (/* binding */ dashboardApi),\n/* harmony export */   getAvatarUrl: () => (/* binding */ getAvatarUrl),\n/* harmony export */   getCanvasClientsWithPriority: () => (/* binding */ getCanvasClientsWithPriority),\n/* harmony export */   getCanvasStatusColor: () => (/* binding */ getCanvasStatusColor),\n/* harmony export */   locationsApi: () => (/* binding */ locationsApi),\n/* harmony export */   performanceApi: () => (/* binding */ performanceApi),\n/* harmony export */   permissionsApi: () => (/* binding */ permissionsApi),\n/* harmony export */   reportsApi: () => (/* binding */ reportsApi),\n/* harmony export */   storageApi: () => (/* binding */ storageApi),\n/* harmony export */   supabase: () => (/* binding */ supabase),\n/* harmony export */   teamApi: () => (/* binding */ teamApi)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\nconst supabaseUrl = \"https://pkhuggdkcglicghgxiyp.supabase.co\" || 0;\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBraHVnZ2RrY2dsaWNnaGd4aXlwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDk5MTEwNzEsImV4cCI6MjA2NTQ4NzA3MX0.LbWtb-modRDlvnkGF5IswRHe1lJpd4zCMgkQ3_E0QQk\" || 0;\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey);\n// Funkcja pomocnicza do generowania poprawnych URL-i avatar√≥w z Supabase Storage\nconst getAvatarUrl = (avatarUrl)=>{\n    if (!avatarUrl) return null;\n    // Je≈õli to ju≈º pe≈Çny URL (zaczyna siƒô od http), zwr√≥ƒá bez zmian\n    if (avatarUrl.startsWith('http')) {\n        return avatarUrl;\n    }\n    // Je≈õli to ≈õcie≈ºka w bucket'u (zawiera folder), wygeneruj publiczny URL\n    if (avatarUrl.includes('/')) {\n        try {\n            const { data } = supabase.storage.from('avatars').getPublicUrl(avatarUrl);\n            return data.publicUrl;\n        } catch (error) {\n            console.error('B≈ÇƒÖd generowania URL avatara:', error);\n            return null;\n        }\n    }\n    // Fallback - prawdopodobnie niepoprawny format\n    console.warn('Nierozpoznany format avatar_url:', avatarUrl);\n    return null;\n};\n// Storage API dla plik√≥w CSV\nconst storageApi = {\n    // Upload pliku CSV do bucket\n    async uploadCSV (file, user) {\n        try {\n            // Oczyszczenie nazwy pliku z problematycznych znak√≥w\n            const cleanFileName = file.name.replace(/[^a-zA-Z0-9.-]/g, '_') // ZastƒÖp wszystkie znaki specjalne podkre≈õleniami\n            .replace(/_{2,}/g, '_') // Zamie≈Ñ wielokrotne podkre≈õlenia na pojedyncze\n            .replace(/^_+|_+$/g, '') // Usu≈Ñ podkre≈õlenia z poczƒÖtku i ko≈Ñca\n            .toLowerCase() // Ma≈Çe litery dla consistency\n            ;\n            const fileName = `${user.id}_${Date.now()}_${cleanFileName}`;\n            const filePath = `csv-imports/${fileName}`;\n            console.log(`üìÅ Uploading CSV: ${filePath}`);\n            console.log(`üìÅ Original filename: ${file.name}`);\n            console.log(`üìÅ Cleaned filename: ${cleanFileName}`);\n            const { data, error } = await supabase.storage.from('csv-files').upload(filePath, file, {\n                cacheControl: '3600',\n                upsert: false\n            });\n            if (error) {\n                console.error('‚ùå Storage upload error:', error);\n                throw new Error(`B≈ÇƒÖd uploadu: ${error.message}`);\n            }\n            console.log('‚úÖ File uploaded successfully:', data.path);\n            return data.path;\n        } catch (error) {\n            console.error('‚ùå Upload failed:', error);\n            throw error;\n        }\n    },\n    // Pobierz publiczny URL pliku\n    getPublicUrl (path) {\n        const { data } = supabase.storage.from('csv-files').getPublicUrl(path);\n        return data.publicUrl;\n    },\n    // Usu≈Ñ plik z bucket\n    async deleteFile (path) {\n        const { error } = await supabase.storage.from('csv-files').remove([\n            path\n        ]);\n        if (error) {\n            console.error('‚ùå File deletion error:', error);\n            throw new Error(`B≈ÇƒÖd usuwania pliku: ${error.message}`);\n        }\n    }\n};\n// CSV Import API\nconst csvImportApi = {\n    // Parsuj CSV i zwr√≥ƒá dane\n    parseCSV (csvText) {\n        const lines = csvText.split('\\n').filter((line)=>line.trim() !== '');\n        if (lines.length < 2) {\n            throw new Error('Plik CSV jest pusty lub zawiera tylko nag≈Ç√≥wki');\n        }\n        // Parsowanie z obs≈ÇugƒÖ cudzys≈Çow√≥w\n        const parseCSVLine = (line)=>{\n            const result = [];\n            let current = '';\n            let inQuotes = false;\n            for(let i = 0; i < line.length; i++){\n                const char = line[i];\n                if (char === '\"') {\n                    inQuotes = !inQuotes;\n                } else if (char === ',' && !inQuotes) {\n                    result.push(current.trim());\n                    current = '';\n                } else {\n                    current += char;\n                }\n            }\n            result.push(current.trim());\n            return result.map((cell)=>cell.replace(/^\"|\"$/g, '')) // Usu≈Ñ cudzys≈Çowy\n            ;\n        };\n        const headers = parseCSVLine(lines[0]);\n        const rows = lines.slice(1).map(parseCSVLine);\n        return {\n            headers,\n            rows\n        };\n    },\n    // Mapuj nag≈Ç√≥wki CSV na pola bazy danych\n    mapHeaders (headers) {\n        const mapping = {};\n        const fieldMappings = [\n            {\n                fields: [\n                    'first_name',\n                    'imiƒô',\n                    'name',\n                    'firstName'\n                ],\n                dbField: 'first_name'\n            },\n            {\n                fields: [\n                    'last_name',\n                    'nazwisko',\n                    'surname',\n                    'lastName'\n                ],\n                dbField: 'last_name'\n            },\n            {\n                fields: [\n                    'company_name',\n                    'firma',\n                    'company',\n                    'companyName',\n                    'nazwa'\n                ],\n                dbField: 'company_name'\n            },\n            {\n                fields: [\n                    'nip',\n                    'tax_id',\n                    'taxId'\n                ],\n                dbField: 'nip'\n            },\n            {\n                fields: [\n                    'phone',\n                    'telefon',\n                    'telephone'\n                ],\n                dbField: 'phone'\n            },\n            {\n                fields: [\n                    'email',\n                    'e-mail',\n                    'mail'\n                ],\n                dbField: 'email'\n            },\n            {\n                fields: [\n                    'website',\n                    'www',\n                    'strona',\n                    'url'\n                ],\n                dbField: 'website'\n            },\n            {\n                fields: [\n                    'notes',\n                    'notatka',\n                    'note',\n                    'comment'\n                ],\n                dbField: 'notes'\n            },\n            {\n                fields: [\n                    'status'\n                ],\n                dbField: 'status'\n            }\n        ];\n        for (const fieldMapping of fieldMappings){\n            for(let i = 0; i < headers.length; i++){\n                const header = headers[i].toLowerCase().trim();\n                if (fieldMapping.fields.some((field)=>header.includes(field))) {\n                    mapping[fieldMapping.dbField] = i;\n                    break;\n                }\n            }\n        }\n        return mapping;\n    },\n    // Waliduj wymagane pola\n    validateRequiredFields (mapping) {\n        const requiredFields = [\n            'company_name'\n        ];\n        const missingFields = requiredFields.filter((field)=>!(field in mapping));\n        if (missingFields.length > 0) {\n            throw new Error(`Brak wymaganych kolumn: ${missingFields.join(', ')}. Wymagane: Firma/Nazwa`);\n        }\n    },\n    // Sprawd≈∫ dostƒôpne kolumny i poka≈º informacje\n    analyzeColumns (mapping, headers) {\n        const allPossibleFields = [\n            {\n                field: 'first_name',\n                displayName: 'Imiƒô',\n                required: false\n            },\n            {\n                field: 'last_name',\n                displayName: 'Nazwisko',\n                required: false\n            },\n            {\n                field: 'company_name',\n                displayName: 'Firma/Nazwa',\n                required: true\n            },\n            {\n                field: 'phone',\n                displayName: 'Telefon',\n                required: false\n            },\n            {\n                field: 'email',\n                displayName: 'Email',\n                required: false\n            },\n            {\n                field: 'nip',\n                displayName: 'NIP',\n                required: false\n            },\n            {\n                field: 'website',\n                displayName: 'Strona WWW',\n                required: false\n            },\n            {\n                field: 'notes',\n                displayName: 'Notatki',\n                required: false\n            },\n            {\n                field: 'status',\n                displayName: 'Status',\n                required: false\n            }\n        ];\n        const found = [];\n        const missing = [];\n        const optional = [];\n        allPossibleFields.forEach(({ field, displayName, required })=>{\n            if (field in mapping) {\n                found.push(displayName);\n            } else if (required) {\n                missing.push(displayName);\n            } else {\n                optional.push(displayName);\n            }\n        });\n        return {\n            found,\n            missing,\n            optional\n        };\n    },\n    // Przekszta≈Çƒá wiersz CSV na obiekt klienta\n    rowToClient (row, mapping, user, locationId) {\n        const getField = (field, defaultValue = 'brak informacji')=>{\n            const index = mapping[field];\n            if (index === undefined) {\n                return defaultValue;\n            }\n            const value = (row[index] || '').trim();\n            return value === '' ? defaultValue : value;\n        };\n        // Walidacja statusu\n        const rawStatus = getField('status', 'canvas').toLowerCase();\n        const validStatuses = [\n            'canvas',\n            'brak_kontaktu',\n            'nie_zainteresowany',\n            'zdenerwowany',\n            'antysale',\n            'sale',\n            '$$'\n        ];\n        const status = validStatuses.includes(rawStatus) ? rawStatus : 'canvas';\n        return {\n            first_name: getField('first_name'),\n            last_name: getField('last_name'),\n            company_name: getField('company_name', ''),\n            nip: getField('nip'),\n            phone: getField('phone'),\n            email: getField('email'),\n            website: getField('website'),\n            notes: getField('notes'),\n            status,\n            edited_by: user.id,\n            edited_at: new Date().toISOString(),\n            owner_id: user.id,\n            location_id: locationId || user.location_id,\n            last_edited_by_name: user.full_name,\n            last_edited_by_avatar_url: user.avatar_url\n        };\n    },\n    // Import pe≈Çnego CSV do bazy danych\n    async importCSV (file, user, locationId, onProgress) {\n        try {\n            onProgress?.({\n                current: 0,\n                total: 100,\n                status: 'Uploading pliku...'\n            });\n            // 1. Upload pliku do Storage\n            const filePath = await storageApi.uploadCSV(file, user);\n            onProgress?.({\n                current: 20,\n                total: 100,\n                status: 'Parsowanie CSV...'\n            });\n            // 2. Czytanie i parsowanie CSV\n            const csvText = await file.text();\n            const { headers, rows } = csvImportApi.parseCSV(csvText);\n            onProgress?.({\n                current: 40,\n                total: 100,\n                status: 'Mapowanie kolumn...'\n            });\n            // 3. Mapowanie nag≈Ç√≥wk√≥w\n            const mapping = csvImportApi.mapHeaders(headers);\n            csvImportApi.validateRequiredFields(mapping);\n            // 4. Analiza dostƒôpnych kolumn\n            const columnAnalysis = csvImportApi.analyzeColumns(mapping, headers);\n            console.log('üìä CSV Headers:', headers);\n            console.log('üìä Field mapping:', mapping);\n            console.log('üìä Rows to import:', rows.length);\n            console.log('‚úÖ Znalezione kolumny:', columnAnalysis.found);\n            console.log('‚ùå BrakujƒÖce wymagane:', columnAnalysis.missing);\n            console.log('‚ö™ Opcjonalne (bƒôdƒÖ \"brak informacji\"):', columnAnalysis.optional);\n            onProgress?.({\n                current: 50,\n                total: 100,\n                status: `Importowanie ${rows.length} klient√≥w...`\n            });\n            // 4. Import wierszy do bazy\n            const results = {\n                success: 0,\n                errors: []\n            };\n            for(let i = 0; i < rows.length; i++){\n                try {\n                    const row = rows[i];\n                    // Sprawd≈∫ czy wiersz nie jest pusty\n                    if (row.every((cell)=>cell.trim() === '')) {\n                        continue;\n                    }\n                    const clientData = csvImportApi.rowToClient(row, mapping, user, locationId);\n                    // Walidacja podstawowych danych\n                    if (!clientData.company_name || clientData.company_name.trim() === '') {\n                        results.errors.push({\n                            row: i + 2,\n                            error: 'Brak wymaganych danych: firma/nazwa',\n                            data: row\n                        });\n                        continue;\n                    }\n                    // Dodaj klienta do bazy\n                    await clientsApi.createClient(clientData, user);\n                    results.success++;\n                    // Aktualizuj progress\n                    const progress = 50 + Math.floor(i / rows.length * 40);\n                    onProgress?.({\n                        current: progress,\n                        total: 100,\n                        status: `Zaimportowano ${results.success}/${rows.length} klient√≥w`\n                    });\n                } catch (error) {\n                    console.error(`‚ùå B≈ÇƒÖd importu wiersza ${i + 2}:`, error);\n                    results.errors.push({\n                        row: i + 2,\n                        error: error instanceof Error ? error.message : 'Nieznany b≈ÇƒÖd',\n                        data: rows[i]\n                    });\n                }\n            }\n            onProgress?.({\n                current: 95,\n                total: 100,\n                status: 'Finalizowanie...'\n            });\n            // 5. Opcjonalnie usu≈Ñ plik z Storage (lub zachowaj dla historii)\n            // await storageApi.deleteFile(filePath)\n            onProgress?.({\n                current: 100,\n                total: 100,\n                status: 'Zako≈Ñczono!'\n            });\n            console.log(`‚úÖ Import zako≈Ñczony: ${results.success} sukces, ${results.errors.length} b≈Çƒôd√≥w`);\n            return results;\n        } catch (error) {\n            console.error('‚ùå CSV Import failed:', error);\n            throw error;\n        }\n    }\n};\n// Funkcje sprawdzania uprawnie≈Ñ z hierarchiƒÖ i lokalizacjƒÖ\nconst permissionsApi = {\n    // Sprawd≈∫ czy u≈ºytkownik mo≈ºe widzieƒá klienta (zgodnie z RLS)\n    canView: (client, user)=>{\n        // Szef i admin widzƒÖ wszystko\n        if ([\n            'szef',\n            'admin'\n        ].includes(user.role)) {\n            return true;\n        }\n        // Sprawd≈∫ czy klient jest w tej samej lokalizacji co u≈ºytkownik\n        const sameLocation = client.location_id === user.location_id;\n        if (!sameLocation) {\n            return false;\n        }\n        switch(user.role){\n            case 'pracownik':\n                // Pracownik widzi tylko swoich klient√≥w w swojej lokalizacji\n                return client.owner_id === user.id || client.owner_id === null || client.edited_by === user.id;\n            case 'junior_manager':\n            case 'manager':\n            case 'project_manager':\n                // Mened≈ºerowie widzƒÖ wszystkich klient√≥w w swojej lokalizacji\n                return true;\n            default:\n                return false;\n        }\n    },\n    // Sprawd≈∫ czy u≈ºytkownik mo≈ºe edytowaƒá klienta\n    canEdit: (client, user)=>{\n        // Takie same regu≈Çy jak canView\n        return permissionsApi.canView(client, user);\n    },\n    // Sprawd≈∫ czy u≈ºytkownik mo≈ºe usunƒÖƒá klienta\n    canDelete: (client, user)=>{\n        // Szef i admin mogƒÖ usuwaƒá wszystko\n        if ([\n            'szef',\n            'admin'\n        ].includes(user.role)) {\n            return true;\n        }\n        // Mened≈ºerowie mogƒÖ usuwaƒá w swojej lokalizacji\n        if ([\n            'manager',\n            'project_manager',\n            'junior_manager'\n        ].includes(user.role)) {\n            return client.location_id === user.location_id;\n        }\n        // Pracownicy nie mogƒÖ usuwaƒá\n        return false;\n    },\n    // Sprawd≈∫ czy u≈ºytkownik mo≈ºe przypisywaƒá klient√≥w\n    canAssignClients: (user)=>{\n        return [\n            'manager',\n            'project_manager',\n            'junior_manager',\n            'szef',\n            'admin'\n        ].includes(user.role);\n    },\n    // Sprawd≈∫ czy u≈ºytkownik mo≈ºe zmieniaƒá role innych u≈ºytkownik√≥w\n    canChangeRoles: (user)=>{\n        return [\n            'szef',\n            'admin'\n        ].includes(user.role);\n    },\n    // Sprawd≈∫ czy u≈ºytkownik mo≈ºe dostƒôp do zaawansowanych raport√≥w\n    canAccessAdvancedReports: (user)=>{\n        return [\n            'manager',\n            'project_manager',\n            'junior_manager',\n            'szef',\n            'admin'\n        ].includes(user.role);\n    },\n    // Sprawd≈∫ czy u≈ºytkownik mo≈ºe widzieƒá wszystkie lokalizacje\n    canViewAllLocations: (user)=>{\n        return [\n            'szef',\n            'admin'\n        ].includes(user.role);\n    },\n    // Sprawd≈∫ czy u≈ºytkownik mo≈ºe filtrowaƒá po lokalizacjach\n    canFilterByLocation: (user)=>{\n        return [\n            'project_manager',\n            'junior_manager',\n            'szef',\n            'admin'\n        ].includes(user.role);\n    },\n    // Sprawd≈∫ poziom hierarchii - czy user1 mo≈ºe zarzƒÖdzaƒá user2\n    canManageUser: (user1, user2)=>{\n        // Admin mo≈ºe zarzƒÖdzaƒá wszystkimi\n        if (user1.role === 'admin') return true;\n        // Szef mo≈ºe zarzƒÖdzaƒá wszystkimi opr√≥cz admin√≥w\n        if (user1.role === 'szef' && user2.role !== 'admin') return true;\n        // Inni mogƒÖ zarzƒÖdzaƒá tylko podw≈Çadnymi w tej samej lokalizacji\n        const sameLocation = user1.location_id === user2.location_id;\n        const higherInHierarchy = (user1.role_hierarchy_level || 99) < (user2.role_hierarchy_level || 99);\n        return sameLocation && higherInHierarchy;\n    }\n};\n// Funkcje API dla klient√≥w z systemem uprawnie≈Ñ\nconst clientsApi = {\n    // Funkcja testowa - podstawowe zapytanie do klient√≥w\n    async testBasicQuery () {\n        try {\n            console.log('üîç Testowe zapytanie do tabeli clients...');\n            const { data, error } = await supabase.from('clients').select('*').limit(5);\n            console.log('Wynik testu - data:', data);\n            console.log('Wynik testu - error:', error);\n            return {\n                data,\n                error\n            };\n        } catch (error) {\n            console.error('B≈ÇƒÖd testowego zapytania:', error);\n            return {\n                data: null,\n                error\n            };\n        }\n    },\n    // Pobierz klient√≥w z filtrami uprawnie≈Ñ\n    // üöÄ NOWE: Funkcja z paginacjƒÖ zwracajƒÖca obiekt z metadanymi\n    async getClientsPaginated (user, filters) {\n        try {\n            console.log('üîÑ Rozpoczynam pobieranie klient√≥w dla u≈ºytkownika:', user.id, user.role);\n            // U≈ºyj JOIN aby pobraƒá klient√≥w z danymi w≈Ça≈õcicieli i lokalizacji w jednym zapytaniu\n            // üöÄ OPTYMALIZACJA: Wybierz tylko niezbƒôdne pola + lokalizacja\n            let query = supabase.from('clients').select(`\n          id,\n          first_name,\n          last_name,\n          company_name,\n          nip,\n          phone,\n          email,\n          website,\n          status,\n          notes,\n          owner_id,\n          location_id,\n          edited_by,\n          edited_at,\n          created_at,\n          updated_at,\n          status_changed_at,\n          last_phone_click,\n          last_edited_by_name,\n          last_edited_by_avatar_url,\n          owner:users!owner_id (\n            id,\n            full_name,\n            email,\n            avatar_url\n          ),\n          location:locations!location_id (\n            id,\n            name,\n            code,\n            currency,\n            timezone\n          )\n        `, {\n                count: 'exact'\n            }).order('updated_at', {\n                ascending: false\n            });\n            // Dodatkowe filtry\n            if (filters?.date) {\n                query = query.gte('updated_at', filters.date);\n            }\n            if (filters?.status) {\n                query = query.eq('status', filters.status);\n            }\n            if (filters?.employee) {\n                query = query.eq('edited_by', filters.employee);\n            }\n            // üöÄ NOWE: Filtr wyszukiwania\n            if (filters?.search) {\n                const searchTerm = filters.search.toLowerCase();\n                query = query.or(`first_name.ilike.%${searchTerm}%,last_name.ilike.%${searchTerm}%,company_name.ilike.%${searchTerm}%,phone.ilike.%${searchTerm}%,email.ilike.%${searchTerm}%`);\n            }\n            // üöÄ NOWE: Filtr lokalizacji\n            if (filters?.location) {\n                query = query.eq('location_id', filters.location);\n            }\n            // üöÄ NOWE: Paginacja\n            if (filters?.page && filters?.pageSize) {\n                const from = (filters.page - 1) * filters.pageSize;\n                const to = from + filters.pageSize - 1;\n                query = query.range(from, to);\n                console.log(`üìÑ Paginacja: strona ${filters.page}, rozmiar ${filters.pageSize}, zakres: ${from}-${to}`);\n            }\n            console.log('üîÑ Wykonujƒô zapytanie z JOIN i liczeniem...');\n            const { data: clients, error, count } = await query;\n            if (error) {\n                console.error('‚ùå B≈ÇƒÖd zapytania clients:', error);\n                throw error;\n            }\n            if (!clients || clients.length === 0) {\n                console.log('‚ÑπÔ∏è Brak klient√≥w w bazie danych');\n                return {\n                    clients: [],\n                    total: 0,\n                    page: filters?.page || 1,\n                    pageSize: filters?.pageSize || 0\n                };\n            }\n            // Przekszta≈Çƒá dane - Supabase JOIN zwraca owner i location jako tablice, ale potrzebujemy pojedynczych obiekt√≥w\n            const transformedClients = clients.map((client)=>({\n                    ...client,\n                    owner: client.owner && Array.isArray(client.owner) && client.owner.length > 0 ? client.owner[0] // We≈∫ pierwszy element z tablicy\n                     : client.owner && !Array.isArray(client.owner) ? client.owner // Ju≈º jest pojedynczym obiektem\n                     : null,\n                    location: client.location && Array.isArray(client.location) && client.location.length > 0 ? client.location[0] // We≈∫ pierwszy element z tablicy\n                     : client.location && !Array.isArray(client.location) ? client.location // Ju≈º jest pojedynczym obiektem\n                     : null // Brak lokalizacji\n                }));\n            // DEBUG: Sprawd≈∫ dane w≈Ça≈õcicieli\n            const clientsWithOwners = transformedClients.filter((client)=>client.owner);\n            const clientsWithoutOwners = transformedClients.filter((client)=>!client.owner);\n            console.log('‚úÖ Klienci z w≈Ça≈õcicielami:', clientsWithOwners.length);\n            console.log('‚ùå Klienci bez w≈Ça≈õcicieli:', clientsWithoutOwners.length);\n            if (clientsWithOwners.length > 0) {\n                console.log('üë§ Przyk≈Çad klienta z w≈Ça≈õcicielem:', {\n                    client: `${clientsWithOwners[0].first_name} ${clientsWithOwners[0].last_name}`,\n                    owner_id: clientsWithOwners[0].owner_id,\n                    owner_name: clientsWithOwners[0].owner?.full_name,\n                    owner_email: clientsWithOwners[0].owner?.email\n                });\n            }\n            // üöÄ NOWE: Zwr√≥ƒá dane z informacjƒÖ o paginacji\n            return {\n                clients: transformedClients,\n                total: count || transformedClients.length,\n                page: filters?.page || 1,\n                pageSize: filters?.pageSize || transformedClients.length\n            };\n        } catch (error) {\n            console.error('‚ùå B≈ÇƒÖd w getClientsPaginated:', error);\n            throw error;\n        }\n    },\n    // üîÑ KOMPATYBILNO≈öƒÜ: Stara funkcja zwracajƒÖca tylko tablicƒô klient√≥w\n    async getClients (user, filters) {\n        try {\n            const result = await this.getClientsPaginated(user, filters);\n            return result.clients;\n        } catch (error) {\n            console.error('‚ùå B≈ÇƒÖd w getClients:', error);\n            throw error;\n        }\n    },\n    // Dodaj nowego klienta z automatycznym przypisaniem w≈Ça≈õciciela\n    async createClient (client, user) {\n        // ZABEZPIECZENIE: Upewnij siƒô ≈ºe status nie jest pusty\n        const safeStatus = client.status || 'canvas';\n        const clientToCreate = {\n            ...client,\n            status: safeStatus,\n            owner_id: user.id,\n            location_id: client.location_id || user.location_id,\n            edited_by: user.id,\n            last_edited_by_name: user.full_name,\n            last_edited_by_avatar_url: user.avatar_url,\n            // Je≈õli status to \"canvas\", ustaw status_changed_at\n            ...safeStatus === 'canvas' && {\n                status_changed_at: new Date().toISOString()\n            },\n            // Konwertuj undefined reminder na null dla bazy danych\n            reminder: client.reminder || null\n        };\n        console.log('üìä Tworzenie klienta z danymi:', clientToCreate);\n        const { data, error } = await supabase.from('clients').insert([\n            clientToCreate\n        ]).select().single();\n        if (error) {\n            console.error('‚ùå B≈ÇƒÖd createClient:', error);\n            throw error;\n        }\n        return data;\n    },\n    // Zaktualizuj klienta z sprawdzeniem uprawnie≈Ñ\n    async updateClient (id, updates, user) {\n        try {\n            console.log('üîÑ updateClient START:', {\n                id,\n                updates,\n                user: user.email\n            });\n            // Pobierz aktualny stan klienta aby sprawdziƒá czy status siƒô zmienia\n            const { data: currentClient, error: fetchError } = await supabase.from('clients').select('status, owner_id').eq('id', id).single();\n            if (fetchError) {\n                console.error('‚ùå B≈ÇƒÖd pobierania aktualnego klienta:', fetchError);\n                throw new Error(`Nie mo≈ºna pobraƒá aktualnego stanu klienta: ${fetchError.message}`);\n            }\n            console.log('‚úÖ Aktualny stan klienta:', currentClient);\n            // NOWA LOGIKA: Ka≈ºda osoba kt√≥ra edytuje klienta zostaje jego w≈Ça≈õcicielem\n            let updatedData = {\n                ...updates\n            };\n            // ZABEZPIECZENIE: Je≈õli status jest w aktualizacji, upewnij siƒô ≈ºe nie jest pusty\n            if ('status' in updatedData && !updatedData.status) {\n                console.log('‚ö†Ô∏è UWAGA: Pusty status w aktualizacji - ustawiam domy≈õlny \"canvas\"');\n                updatedData.status = 'canvas';\n            }\n            // Sprawd≈∫ czy status siƒô zmienia\n            const statusChanged = updatedData.status && updatedData.status !== currentClient.status;\n            if (statusChanged) {\n                updatedData.status_changed_at = new Date().toISOString();\n                console.log(`üìä Status zmieniony z \"${currentClient.status}\" na \"${updates.status}\" - ustawiam status_changed_at`);\n                // Powiadomienie o zmianie na canvas\n                if (updates.status === 'canvas') {\n                    console.log('üîî POWIADOMIENIE: Klient przeszed≈Ç na status CANVAS - start trackingu czasu!');\n                }\n            }\n            // Zawsze przypisz edytujƒÖcego jako w≈Ça≈õciciela\n            updatedData.owner_id = user.id;\n            console.log(`üéØ Przypisujƒô klienta ${id} do u≈ºytkownika ${user.id} (${user.email}) jako w≈Ça≈õciciela`);\n            // Zapisz informacje o edytorze (szczeg√≥lnie wa≈ºne dla pracownik√≥w)\n            updatedData.last_edited_by_name = user.full_name;\n            updatedData.last_edited_by_avatar_url = user.avatar_url;\n            console.log(`üë§ Zapisujƒô dane edytora: ${user.full_name} (rola: ${user.role})`);\n            // Je≈õli to pracownik i zmienia status - dodatkowy log\n            if (user.role === 'pracownik' && statusChanged) {\n                console.log(`üë∑ Pracownik ${user.email} zmienia status z \"${currentClient.status}\" na \"${updates.status}\"`);\n            }\n            console.log('üîÑ Dane do aktualizacji:', updatedData);\n            // Przygotuj finalne dane do UPDATE\n            const finalData = {\n                ...updatedData,\n                edited_by: user.id,\n                updated_at: new Date().toISOString(),\n                // Konwertuj undefined reminder na null dla bazy danych\n                ...updatedData.reminder !== undefined && {\n                    reminder: updatedData.reminder || null\n                }\n            };\n            console.log('üîÑ Finalne dane do UPDATE:', finalData);\n            // Bezpo≈õrednia aktualizacja\n            const { data, error } = await supabase.from('clients').update(finalData).eq('id', id).select().single();\n            if (error) {\n                console.error('‚ùå B≈ÇƒÖd UPDATE clients:', error);\n                console.error('‚ùå Kod b≈Çƒôdu:', error.code);\n                console.error('‚ùå Szczeg√≥≈Çy:', error.details);\n                console.error('‚ùå Hint:', error.hint);\n                throw new Error(`B≈ÇƒÖd aktualizacji: ${error.message} (kod: ${error.code})`);\n            }\n            console.log('‚úÖ updateClient SUCCESS:', data);\n            return data;\n        } catch (error) {\n            console.error('‚ùå updateClient FAILED:', error);\n            throw error;\n        }\n    },\n    // Aktualizuj czas ostatniego klikniƒôcia telefonu\n    async updateLastPhoneClick (clientId, user) {\n        console.log('üìû Aktualizujƒô czas ostatniego klikniƒôcia telefonu:', clientId);\n        const { data, error } = await supabase.from('clients').update({\n            last_phone_click: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n        }).eq('id', clientId).select().single();\n        if (error) {\n            console.error('‚ùå B≈ÇƒÖd updateLastPhoneClick:', error);\n            throw error;\n        }\n        // Zaloguj w activity_logs\n        try {\n            await activityLogsApi.createLog({\n                client_id: clientId,\n                changed_by: user.id,\n                change_type: 'update',\n                field_changed: 'last_phone_click',\n                old_value: undefined,\n                new_value: data.last_phone_click\n            });\n        } catch (logError) {\n            console.error('‚ùå B≈ÇƒÖd logowania activity_logs (updateLastPhoneClick):', logError);\n        }\n        return data;\n    },\n    // Usu≈Ñ klienta z sprawdzeniem uprawnie≈Ñ\n    async deleteClient (id, user) {\n        // Bezpo≈õrednie usuniƒôcie bez sprawdzania uprawnie≈Ñ\n        const { error } = await supabase.from('clients').delete().eq('id', id);\n        if (error) throw error;\n    },\n    // Przypisz klienta do innego u≈ºytkownika (tylko manager+)\n    async assignClient (clientId, newOwnerId, user) {\n        if (!permissionsApi.canAssignClients(user)) {\n            throw new Error('Brak uprawnie≈Ñ do przypisywania klient√≥w');\n        }\n        const { data, error } = await supabase.from('clients').update({\n            owner_id: newOwnerId,\n            edited_by: user.id,\n            updated_at: new Date().toISOString()\n        }).eq('id', clientId).select().single();\n        if (error) throw error;\n        return data;\n    },\n    // Funkcja do czyszczenia nieistniejƒÖcych owner_id\n    async cleanupInvalidOwnerIds () {\n        try {\n            console.log('üßπ Rozpoczynam czyszczenie nieistniejƒÖcych owner_id...');\n            // Pobierz wszystkich klient√≥w z owner_id\n            const { data: allClients, error: clientsError } = await supabase.from('clients').select('id, owner_id, first_name, last_name').not('owner_id', 'is', null);\n            if (clientsError) throw clientsError;\n            console.log('üìä Znaleziono klient√≥w z owner_id:', allClients?.length || 0);\n            if (!allClients || allClients.length === 0) {\n                return {\n                    cleaned: 0,\n                    errors: []\n                };\n            }\n            // Pobierz wszystkie unikalne owner_id\n            const ownerIds = [\n                ...new Set(allClients.map((c)=>c.owner_id))\n            ];\n            console.log('üîç Sprawdzam owner_id:', ownerIds);\n            // Sprawd≈∫ kt√≥re u≈ºytkownicy istniejƒÖ\n            const { data: existingUsers, error: usersError } = await supabase.from('users').select('id').in('id', ownerIds);\n            if (usersError) throw usersError;\n            const existingUserIds = (existingUsers || []).map((u)=>u.id);\n            console.log('‚úÖ IstniejƒÖcy u≈ºytkownicy:', existingUserIds);\n            // Znajd≈∫ klient√≥w z nieistniejƒÖcymi owner_id\n            const clientsToClean = allClients.filter((client)=>client.owner_id && !existingUserIds.includes(client.owner_id));\n            console.log('üßπ Klienci do wyczyszczenia:', clientsToClean.length);\n            if (clientsToClean.length === 0) {\n                console.log('‚úÖ Brak klient√≥w do wyczyszczenia');\n                return {\n                    cleaned: 0,\n                    errors: []\n                };\n            }\n            // Wyczy≈õƒá owner_id dla problematycznych klient√≥w\n            const cleanupResults = [];\n            const errors = [];\n            for (const client of clientsToClean){\n                try {\n                    console.log(`üßπ Czyszczƒô owner_id dla ${client.first_name} ${client.last_name} (${client.owner_id})`);\n                    const { error } = await supabase.from('clients').update({\n                        owner_id: null\n                    }).eq('id', client.id);\n                    if (error) {\n                        console.error(`‚ùå B≈ÇƒÖd czyszczenia ${client.id}:`, error);\n                        errors.push({\n                            client: client.id,\n                            error: error.message\n                        });\n                    } else {\n                        cleanupResults.push(client.id);\n                    }\n                } catch (err) {\n                    console.error(`‚ùå WyjƒÖtek podczas czyszczenia ${client.id}:`, err);\n                    errors.push({\n                        client: client.id,\n                        error: String(err)\n                    });\n                }\n            }\n            console.log(`‚úÖ Wyczyszczono ${cleanupResults.length} klient√≥w`);\n            if (errors.length > 0) {\n                console.error(`‚ùå B≈Çƒôdy przy ${errors.length} klientach:`, errors);\n            }\n            return {\n                cleaned: cleanupResults.length,\n                errors,\n                cleanedClients: clientsToClean.filter((c)=>cleanupResults.includes(c.id))\n            };\n        } catch (error) {\n            console.error('‚ùå B≈ÇƒÖd w cleanupInvalidOwnerIds:', error);\n            throw error;\n        }\n    },\n    // Subskrypcja na zmiany w czasie rzeczywistym\n    subscribeToChanges (callback) {\n        return supabase.channel('clients_changes').on('postgres_changes', {\n            event: '*',\n            schema: 'public',\n            table: 'clients'\n        }, callback).subscribe();\n    },\n    // Subskrypcja na zmiany owner_id dla real-time aktualizacji\n    subscribeToOwnerChanges (callback) {\n        try {\n            // Sprawd≈∫ czy callback jest funkcjƒÖ\n            if (typeof callback !== 'function') {\n                console.error('‚ùå Callback nie jest funkcjƒÖ w subscribeToOwnerChanges');\n                throw new Error('Callback musi byƒá funkcjƒÖ');\n            }\n            console.log('üì° Tworzƒô kana≈Ç Supabase dla owner changes...');\n            // Najpierw sprawd≈∫ czy real-time jest w≈ÇƒÖczony i dostƒôpny\n            const channelName = `clients_owner_changes_${Date.now()}`;\n            console.log('üì° Nazwa kana≈Çu:', channelName);\n            const channel = supabase.channel(channelName).on('postgres_changes', {\n                event: 'UPDATE',\n                schema: 'public',\n                table: 'clients',\n                filter: 'owner_id=neq.null' // Tylko gdy owner_id siƒô zmienia\n            }, (payload)=>{\n                try {\n                    console.log('üì° Real-time payload otrzymany:', {\n                        eventType: payload.eventType,\n                        table: payload.table,\n                        changes: payload.new ? {\n                            id: payload.new.id,\n                            owner_id: payload.new.owner_id,\n                            first_name: payload.new.first_name,\n                            last_name: payload.new.last_name\n                        } : 'brak danych'\n                    });\n                    if (typeof callback === 'function') {\n                        callback(payload);\n                    } else {\n                        console.error('‚ùå Callback nie jest funkcjƒÖ podczas wywo≈Çania');\n                    }\n                } catch (callbackError) {\n                    console.error('‚ùå B≈ÇƒÖd w callback:', callbackError);\n                }\n            }).subscribe((status, err)=>{\n                console.log('üì° Subskrypcja owner_changes status:', status);\n                if (status === 'SUBSCRIBED') {\n                    console.log('‚úÖ Subskrypcja owner_changes aktywna');\n                } else if (status === 'CLOSED') {\n                    console.warn('‚ö†Ô∏è Subskrypcja owner_changes zamkniƒôta - prawdopodobnie problem z autoryzacjƒÖ real-time');\n                    console.warn('üí° Real-time mo≈ºe byƒá wy≈ÇƒÖczony w ustawieniach Supabase lub brakuje uprawnie≈Ñ');\n                } else if (status === 'CHANNEL_ERROR') {\n                    console.error('‚ùå B≈ÇƒÖd kana≈Çu real-time:', err);\n                    console.error('üí° Sprawd≈∫ ustawienia real-time w Supabase Dashboard');\n                } else if (status === 'TIMED_OUT') {\n                    console.warn('‚è∞ Timeout subskrypcji - problemy z po≈ÇƒÖczeniem WebSocket');\n                } else {\n                    console.log('üì° Status subskrypcji:', status);\n                }\n            });\n            // Sprawd≈∫ stan kana≈Çu po kr√≥tkim czasie\n            setTimeout(()=>{\n                if (channel.state === 'closed') {\n                    console.warn('‚ö†Ô∏è Kana≈Ç real-time zosta≈Ç zamkniƒôty - prawdopodobnie RLS blokuje real-time lub feature jest wy≈ÇƒÖczony');\n                }\n            }, 2000);\n            console.log('‚úÖ Kana≈Ç owner changes utworzony');\n            return channel;\n        } catch (error) {\n            console.error('‚ùå B≈ÇƒÖd w subscribeToOwnerChanges:', error);\n            console.warn('üí° Real-time nie bƒôdzie dzia≈Çaƒá - aplikacja bƒôdzie u≈ºywaƒá okresowego od≈õwie≈ºania');\n            // Zwr√≥ƒá mock object aby nie powodowaƒá b≈Çƒôd√≥w\n            return {\n                unsubscribe: ()=>{\n                    console.log('üßπ Mock unsubscribe dla b≈Çƒôdnego kana≈Çu');\n                }\n            };\n        }\n    },\n    // Pobierz klient√≥w z przypomnieniami na konkretny dzie≈Ñ\n    async getClientsWithReminders (user, targetDate) {\n        try {\n            const today = targetDate || new Date().toISOString().split('T')[0] // format YYYY-MM-DD\n            ;\n            console.log(`üìÖ Pobieranie klient√≥w z przypomnieniami na: ${today}`);\n            // Pobierz wszystkich klient√≥w u≈ºytkownika (bez paginacji)\n            const allClients = await this.getClients(user);\n            // Filtruj tylko tych z przypomnieniami na dzi≈õ\n            const clientsWithTodayReminders = allClients.filter((client)=>{\n                // Sprawd≈∫ czy klient ma aktywne przypomnienie\n                const reminder = client.reminder || {\n                    enabled: false,\n                    date: '',\n                    time: '',\n                    note: ''\n                };\n                return reminder.enabled && reminder.date === today;\n            });\n            // Sortuj wed≈Çug godziny przypomnienia\n            const sortedClients = clientsWithTodayReminders.sort((a, b)=>{\n                const timeA = a.reminder?.time || '00:00';\n                const timeB = b.reminder?.time || '00:00';\n                return timeA.localeCompare(timeB);\n            });\n            console.log(`‚úÖ Znaleziono ${sortedClients.length} klient√≥w z przypomnieniami na ${today}`);\n            return sortedClients;\n        } catch (error) {\n            console.error('‚ùå B≈ÇƒÖd pobierania klient√≥w z przypomnieniami:', error);\n            throw error;\n        }\n    },\n    // Pobierz przypomnienia pogrupowane wed≈Çug slot√≥w czasowych dla dashboardu\n    async getDailyScheduleWithClients (user, targetDate) {\n        try {\n            const clientsWithReminders = await this.getClientsWithReminders(user, targetDate);\n            // Definicja slot√≥w czasowych (zgodnie z obecnƒÖ strukturƒÖ dashboardu)\n            const timeSlots = [\n                {\n                    time: '8:00 - 10:00',\n                    type: 'canvas',\n                    color: '#06b6d4',\n                    startTime: '08:00',\n                    endTime: '10:00',\n                    statuses: [\n                        'canvas'\n                    ]\n                },\n                {\n                    time: '10:10 - 12:00',\n                    type: 'sales',\n                    color: '#10b981',\n                    startTime: '10:10',\n                    endTime: '12:00',\n                    statuses: [\n                        'sale'\n                    ]\n                },\n                {\n                    time: '12:30 - 15:00',\n                    type: 'antysales',\n                    color: '#f59e0b',\n                    startTime: '12:30',\n                    endTime: '15:00',\n                    statuses: [\n                        'antysale'\n                    ]\n                },\n                {\n                    time: '15:10 - 16:30',\n                    type: 'canvas + sales',\n                    color: '#8b5cf6',\n                    startTime: '15:10',\n                    endTime: '16:30',\n                    statuses: [\n                        'canvas',\n                        'sale'\n                    ]\n                }\n            ];\n            // Przypisz klient√≥w do odpowiednich slot√≥w\n            const slotsWithClients = timeSlots.map((slot)=>{\n                const slotClients = clientsWithReminders.filter((client)=>{\n                    const reminderTime = client.reminder?.time || '00:00';\n                    const [hours, minutes] = reminderTime.split(':').map(Number);\n                    const reminderMinutes = hours * 60 + minutes;\n                    const [startHours, startMins] = slot.startTime.split(':').map(Number);\n                    const [endHours, endMins] = slot.endTime.split(':').map(Number);\n                    const startMinutes = startHours * 60 + startMins;\n                    const endMinutes = endHours * 60 + endMins;\n                    // Sprawd≈∫ czy godzina przypomnienia mie≈õci siƒô w slocie\n                    const timeInSlot = reminderMinutes >= startMinutes && reminderMinutes <= endMinutes;\n                    // Sprawd≈∫ czy status klienta pasuje do typu slotu\n                    const statusMatches = slot.statuses.includes(client.status);\n                    return timeInSlot && statusMatches;\n                });\n                return {\n                    ...slot,\n                    clients: slotClients\n                };\n            });\n            console.log(`üìä Plan dnia z ${slotsWithClients.reduce((sum, slot)=>sum + slot.clients.length, 0)} klientami`);\n            return slotsWithClients;\n        } catch (error) {\n            console.error('‚ùå B≈ÇƒÖd tworzenia planu dnia:', error);\n            throw error;\n        }\n    }\n};\n// Funkcje API dla log√≥w aktywno≈õci\nconst activityLogsApi = {\n    // Pobierz logi aktywno≈õci\n    async getLogs (clientId) {\n        let query = supabase.from('activity_logs').select(`\n        *,\n        clients(first_name, last_name)\n      `).order('timestamp', {\n            ascending: false\n        }).limit(50);\n        if (clientId) {\n            query = query.eq('client_id', clientId);\n        }\n        const { data, error } = await query;\n        if (error) throw error;\n        return data;\n    },\n    // Pobierz historiƒô zmian dla konkretnego klienta\n    async getClientHistory (clientId) {\n        try {\n            console.log('Pobieranie historii dla klienta:', clientId);\n            // Sprawd≈∫ czy u≈ºytkownik jest zalogowany\n            const { data: { user } } = await supabase.auth.getUser();\n            console.log('Aktualny u≈ºytkownik:', user?.id);\n            if (!user) {\n                console.error('U≈ºytkownik nie jest zalogowany');\n                return [];\n            }\n            const { data, error } = await supabase.from('activity_logs').select(`\n          id,\n          client_id,\n          changed_by,\n          change_type,\n          field_changed,\n          old_value,\n          new_value,\n          timestamp\n        `).eq('client_id', clientId).order('timestamp', {\n                ascending: false\n            }).limit(20);\n            if (error) {\n                console.error('B≈ÇƒÖd query activity_logs:', error);\n                console.error('Szczeg√≥≈Çy b≈Çƒôdu:', JSON.stringify(error, null, 2));\n                // Sprawd≈∫ czy to problem z RLS\n                if (error.code === 'PGRST116' || error.message?.includes('RLS')) {\n                    console.error('Problem z Row Level Security - u≈ºytkownik mo≈ºe nie mieƒá dostƒôpu');\n                }\n                // Zwr√≥ƒá pustƒÖ tablicƒô zamiast rzucania b≈Çƒôdem\n                return [];\n            }\n            console.log('Pobrano logi:', data?.length || 0);\n            // Je≈õli nie ma log√≥w, zwr√≥ƒá pustƒÖ tablicƒô\n            if (!data || data.length === 0) {\n                return [];\n            }\n            // Pobierz informacje o u≈ºytkownikach osobno z avatarami\n            const userIds = [\n                ...new Set(data.map((log)=>log.changed_by).filter(Boolean))\n            ];\n            console.log('Pobieranie u≈ºytkownik√≥w:', userIds);\n            const { data: users, error: usersError } = await supabase.from('users').select('id, full_name, role, avatar_url').in('id', userIds);\n            if (usersError) {\n                console.error('B≈ÇƒÖd pobierania u≈ºytkownik√≥w:', usersError);\n            // Kontynuuj bez danych u≈ºytkownik√≥w\n            }\n            console.log('Pobrano u≈ºytkownik√≥w:', users?.length || 0);\n            // Mapuj u≈ºytkownik√≥w do s≈Çownika dla szybkiego dostƒôpu\n            const usersMap = (users || []).reduce((acc, user)=>{\n                acc[user.id] = user;\n                return acc;\n            }, {});\n            // Przekszta≈Çƒá dane z informacjami o edytorze\n            const result = data.map((log)=>{\n                const user = usersMap[log.changed_by];\n                return {\n                    id: log.id,\n                    client_id: log.client_id,\n                    changed_by: log.changed_by,\n                    change_type: log.change_type,\n                    field_changed: log.field_changed,\n                    old_value: log.old_value,\n                    new_value: log.new_value,\n                    timestamp: log.timestamp,\n                    editor_name: user?.full_name || log.changed_by || 'Nieznany u≈ºytkownik',\n                    editor_role: user?.role || 'unknown',\n                    editor_avatar: user?.avatar_url || null\n                };\n            });\n            console.log('Zwracanie historii:', result.length, 'wpis√≥w');\n            return result;\n        } catch (error) {\n            console.error('B≈ÇƒÖd w getClientHistory:', error);\n            throw error;\n        }\n    },\n    // Dodaj log aktywno≈õci\n    async createLog (log) {\n        const { data, error } = await supabase.from('activity_logs').insert([\n            {\n                ...log,\n                timestamp: new Date().toISOString()\n            }\n        ]).select().single();\n        if (error) throw error;\n        return data;\n    },\n    // Funkcja testowa do sprawdzania dostƒôpu do activity_logs\n    async testActivityLogsAccess () {\n        try {\n            console.log('Testowanie dostƒôpu do activity_logs...');\n            // Sprawd≈∫ autoryzacjƒô\n            const { data: { user } } = await supabase.auth.getUser();\n            console.log('Test - u≈ºytkownik:', user?.id, user?.email);\n            if (!user) {\n                return {\n                    success: false,\n                    error: 'Brak autoryzacji - u≈ºytkownik nie jest zalogowany'\n                };\n            }\n            // Sprawd≈∫ czy u≈ºytkownik istnieje w tabeli users\n            const { data: userProfile, error: userError } = await supabase.from('users').select('id, email, role').eq('id', user.id).single();\n            console.log('Test - profil u≈ºytkownika:', userProfile);\n            console.log('Test - b≈ÇƒÖd profilu:', userError);\n            if (userError || !userProfile) {\n                return {\n                    success: false,\n                    error: 'U≈ºytkownik nie istnieje w tabeli users'\n                };\n            }\n            // Testuj dostƒôp do activity_logs\n            const { data, error, count } = await supabase.from('activity_logs').select('*', {\n                count: 'exact'\n            }).limit(1);\n            console.log('Test activity_logs - data:', data);\n            console.log('Test activity_logs - error:', error);\n            console.log('Test activity_logs - count:', count);\n            return {\n                success: !error,\n                data,\n                error,\n                count,\n                user: userProfile\n            };\n        } catch (error) {\n            console.error('B≈ÇƒÖd testu activity_logs:', error);\n            return {\n                success: false,\n                error\n            };\n        }\n    }\n};\n// Funkcje API dla raport√≥w\nconst reportsApi = {\n    // Pobierz statystyki tylko pracownik√≥w z prowizjƒÖ\n    async getEmployeeStats (user) {\n        try {\n            console.log('üìä Pobieranie statystyk pracownik√≥w...');\n            // KROK 1: Pobierz wszystkich u≈ºytkownik√≥w z rolƒÖ 'pracownik'\n            const { data: allEmployees, error: usersError } = await supabase.from('users').select(`\n          id,\n          full_name,\n          email,\n          avatar_url,\n          role\n        `).eq('role', 'pracownik').order('full_name', {\n                ascending: true\n            });\n            if (usersError) {\n                console.error('‚ùå B≈ÇƒÖd pobierania u≈ºytkownik√≥w-pracownik√≥w:', usersError);\n                throw usersError;\n            }\n            if (!allEmployees || allEmployees.length === 0) {\n                console.log('‚ö†Ô∏è Brak u≈ºytkownik√≥w z rolƒÖ pracownik');\n                return [];\n            }\n            console.log('‚úÖ Pobrano wszystkich pracownik√≥w:', allEmployees.length, allEmployees.map((e)=>e.full_name));\n            // KROK 2: Pobierz statystyki z tabeli employee_stats dla tych pracownik√≥w\n            const employeeIds = allEmployees.map((emp)=>emp.id);\n            let existingStats = [];\n            try {\n                const { data, error: statsError } = await supabase.from('employee_stats').select('*').in('user_id', employeeIds);\n                if (statsError) {\n                    console.warn('‚ö†Ô∏è B≈ÇƒÖd pobierania employee_stats:', statsError);\n                } else {\n                    existingStats = data || [];\n                }\n            } catch (error) {\n                console.warn('‚ö†Ô∏è Nie uda≈Ço siƒô pobraƒá employee_stats:', error);\n            }\n            console.log('‚úÖ Pobrano statystyki dla pracownik√≥w:', existingStats?.length || 0);\n            // KROK 3: Pobierz dzisiejsze statystyki z tabeli clients (z obs≈ÇugƒÖ b≈Çƒôd√≥w)\n            const today = new Date().toISOString().split('T')[0];\n            let todayClients = [];\n            try {\n                const { data, error: clientsError } = await supabase.from('clients').select('status, edited_by, created_at, updated_at').gte('updated_at', `${today}T00:00:00`).lt('updated_at', `${today}T23:59:59`);\n                if (clientsError) {\n                    console.warn('‚ö†Ô∏è B≈ÇƒÖd pobierania klient√≥w z dzisiaj:', clientsError);\n                } else {\n                    todayClients = data || [];\n                }\n            } catch (error) {\n                console.warn('‚ö†Ô∏è Nie uda≈Ço siƒô pobraƒá dzisiejszych klient√≥w:', error);\n            }\n            console.log('‚úÖ Pobrano dzisiejszych klient√≥w:', todayClients.length);\n            // KROK 4: Pobierz wczorajsze statystyki dla kar (z obs≈ÇugƒÖ b≈Çƒôd√≥w)\n            const yesterday = new Date();\n            yesterday.setDate(yesterday.getDate() - 1);\n            const yesterdayStr = yesterday.toISOString().split('T')[0];\n            let yesterdayClients = [];\n            try {\n                const { data, error: yesterdayError } = await supabase.from('clients').select('status, edited_by').gte('updated_at', `${yesterdayStr}T00:00:00`).lt('updated_at', `${yesterdayStr}T23:59:59`);\n                if (yesterdayError) {\n                    console.warn('‚ö†Ô∏è B≈ÇƒÖd pobierania wczorajszych klient√≥w:', yesterdayError);\n                } else {\n                    yesterdayClients = data || [];\n                }\n            } catch (error) {\n                console.warn('‚ö†Ô∏è Nie uda≈Ço siƒô pobraƒá wczorajszych klient√≥w:', error);\n            }\n            // KROK 5: Pobierz WSZYSTKICH klient√≥w przypisanych do pracownik√≥w (z obs≈ÇugƒÖ b≈Çƒôd√≥w)\n            let allOwnedClients = [];\n            try {\n                const { data, error: ownedError } = await supabase.from('clients').select('status, owner_id').not('owner_id', 'is', null).in('owner_id', employeeIds);\n                if (ownedError) {\n                    console.warn('‚ö†Ô∏è B≈ÇƒÖd pobierania klient√≥w przypisanych:', ownedError);\n                } else {\n                    allOwnedClients = data || [];\n                }\n            } catch (error) {\n                console.warn('‚ö†Ô∏è Nie uda≈Ço siƒô pobraƒá przypisanych klient√≥w:', error);\n            }\n            console.log('‚úÖ Pobrano wszystkich przypisanych klient√≥w:', allOwnedClients.length);\n            // KROK 6: Agreguj dzisiejsze statystyki per pracownik\n            const todayStats = todayClients.reduce((acc, client)=>{\n                const userId = client.edited_by;\n                if (!userId) return acc;\n                if (!acc[userId]) {\n                    acc[userId] = {\n                        total: 0,\n                        canvas: 0,\n                        antysale: 0,\n                        sale: 0,\n                        other: 0\n                    };\n                }\n                acc[userId].total++;\n                if (client.status === 'canvas') acc[userId].canvas++;\n                else if (client.status === 'antysale') acc[userId].antysale++;\n                else if (client.status === 'sale') acc[userId].sale++;\n                else acc[userId].other++;\n                return acc;\n            }, {});\n            // KROK 7: Agreguj wczorajsze statystyki per pracownik\n            const yesterdayStats = yesterdayClients.reduce((acc, client)=>{\n                const userId = client.edited_by;\n                if (userId) {\n                    acc[userId] = (acc[userId] || 0) + 1;\n                }\n                return acc;\n            }, {});\n            // KROK 8: Agreguj statusy WSZYSTKICH przypisanych klient√≥w per pracownik\n            const ownedClientsStats = allOwnedClients.reduce((acc, client)=>{\n                const ownerId = client.owner_id;\n                if (!ownerId) return acc;\n                if (!acc[ownerId]) {\n                    acc[ownerId] = {\n                        total: 0,\n                        canvas: 0,\n                        antysale: 0,\n                        sale: 0,\n                        brak_kontaktu: 0,\n                        nie_zainteresowany: 0,\n                        zdenerwowany: 0,\n                        '$$': 0\n                    };\n                }\n                acc[ownerId].total++;\n                switch(client.status){\n                    case 'canvas':\n                        acc[ownerId].canvas++;\n                        break;\n                    case 'antysale':\n                        acc[ownerId].antysale++;\n                        break;\n                    case 'sale':\n                        acc[ownerId].sale++;\n                        break;\n                    case 'brak_kontaktu':\n                        acc[ownerId].brak_kontaktu++;\n                        break;\n                    case 'nie_zainteresowany':\n                        acc[ownerId].nie_zainteresowany++;\n                        break;\n                    case 'zdenerwowany':\n                        acc[ownerId].zdenerwowany++;\n                        break;\n                    case '$$':\n                        acc[ownerId]['$$']++;\n                        break;\n                }\n                return acc;\n            }, {});\n            console.log('üìä Statystyki przypisanych klient√≥w:', ownedClientsStats);\n            // KROK 9: Stw√≥rz mapƒô statystyk employee_stats\n            const statsMap = new Map();\n            existingStats.forEach((stat)=>{\n                statsMap.set(stat.user_id, stat);\n            });\n            // KROK 10: Kombinuj dane - dla WSZYSTKICH pracownik√≥w (zawsze zwraca listƒô)\n            const enhancedStats = allEmployees.map((employee)=>{\n                const userId = employee.id;\n                // Pobierz statystyki z employee_stats lub utw√≥rz domy≈õlne\n                const basicStat = statsMap.get(userId) || {\n                    id: 'temp_' + userId,\n                    user_id: userId,\n                    daily_target: 20,\n                    commission_rate: 3.0,\n                    monthly_canvas: 0,\n                    monthly_antysale: 0,\n                    monthly_sale: 0,\n                    total_commissions: 0,\n                    total_penalties: 0,\n                    custom_clients_count: 0,\n                    custom_total_payments: 0,\n                    created_at: new Date().toISOString(),\n                    updated_at: new Date().toISOString()\n                };\n                const todayForUser = todayStats[userId] || {\n                    total: 0,\n                    canvas: 0,\n                    antysale: 0,\n                    sale: 0\n                };\n                const yesterdayForUser = yesterdayStats[userId] || 0;\n                const ownedForUser = ownedClientsStats[userId] || {\n                    total: 0,\n                    canvas: 0,\n                    antysale: 0,\n                    sale: 0,\n                    brak_kontaktu: 0,\n                    nie_zainteresowany: 0,\n                    zdenerwowany: 0,\n                    '$$': 0\n                };\n                // Oblicz karƒô za wczoraj\n                const yesterdayShortage = Math.max(0, basicStat.daily_target - yesterdayForUser);\n                const penalty = yesterdayShortage * 15;\n                // Oblicz prowizjƒô na podstawie przypisanych klient√≥w Sale\n                const commission = ownedForUser.sale * basicStat.commission_rate / 100 * 100;\n                console.log(`üë§ Pracownik ${employee.full_name}: Canvas=${ownedForUser.canvas}, AntyS=${ownedForUser.antysale}, Sale=${ownedForUser.sale}`);\n                return {\n                    ...basicStat,\n                    // WA≈ªNE: Do≈ÇƒÖcz dane u≈ºytkownika\n                    user: {\n                        id: employee.id,\n                        full_name: employee.full_name,\n                        email: employee.email,\n                        avatar_url: employee.avatar_url,\n                        role: employee.role\n                    },\n                    daily_achieved: todayForUser.total,\n                    yesterday_shortage: yesterdayShortage,\n                    status_changes_today: {\n                        canvas: todayForUser.canvas,\n                        antysale: todayForUser.antysale,\n                        sale: todayForUser.sale,\n                        other: todayForUser.other\n                    },\n                    // U≈ºywaj statystyk opartych na owner_id (przypisanych klient√≥w)\n                    monthly_canvas: ownedForUser.canvas,\n                    monthly_antysale: ownedForUser.antysale,\n                    monthly_sale: ownedForUser.sale,\n                    total_commissions: commission,\n                    total_penalties: penalty\n                };\n            });\n            console.log('‚úÖ Przygotowano rozszerzone statystyki dla wszystkich pracownik√≥w:', enhancedStats.length);\n            console.log('üë• Lista pracownik√≥w:', enhancedStats.map((s)=>s.user?.full_name).join(', '));\n            return enhancedStats;\n        } catch (error) {\n            console.error('‚ùå B≈ÇƒÖd pobierania statystyk pracownik√≥w:', error);\n            // W przypadku b≈Çƒôdu, zwr√≥ƒá pustƒÖ listƒô zamiast rzucaƒá b≈ÇƒÖd\n            return [];\n        }\n    },\n    // Podsumowanie dnia\n    async getDailySummary (date) {\n        const { data, error } = await supabase.from('clients').select('status, edited_by').gte('updated_at', `${date}T00:00:00`).lt('updated_at', `${date}T23:59:59`);\n        if (error) throw error;\n        // Agregacja danych\n        const statusBreakdown = data.reduce((acc, client)=>{\n            acc[client.status] = (acc[client.status] || 0) + 1;\n            return acc;\n        }, {});\n        const employeeStats = data.reduce((acc, client)=>{\n            acc[client.edited_by] = (acc[client.edited_by] || 0) + 1;\n            return acc;\n        }, {});\n        return {\n            totalClients: data.length,\n            statusBreakdown,\n            employeeStats\n        };\n    },\n    // Podsumowanie tygodniowe\n    async getWeeklySummary (startDate, endDate) {\n        const { data, error } = await supabase.from('clients').select('status, edited_by, updated_at').gte('updated_at', startDate).lt('updated_at', endDate);\n        if (error) throw error;\n        return data;\n    },\n    // Aktualizuj statystyki pracownika (dla manager/project_manager/junior_manager/szef/admin)\n    async updateEmployeeStats (userId, updates, currentUser) {\n        // Sprawd≈∫ uprawnienia\n        if (![\n            'manager',\n            'project_manager',\n            'junior_manager',\n            'szef',\n            'admin'\n        ].includes(currentUser.role)) {\n            throw new Error('Brak uprawnie≈Ñ do modyfikacji statystyk');\n        }\n        const { data, error } = await supabase.from('employee_stats').update(updates).eq('user_id', userId).select().single();\n        if (error) throw error;\n        return data;\n    },\n    // Edytuj ilo≈õƒá klient√≥w i sumƒô wp≈Çat pracownika (dla manager/project_manager/junior_manager/szef/admin)\n    async updateEmployeeClientStats (userId, clientsCount, totalPayments, currentUser) {\n        // Sprawd≈∫ uprawnienia\n        if (![\n            'manager',\n            'project_manager',\n            'junior_manager',\n            'szef',\n            'admin'\n        ].includes(currentUser.role)) {\n            throw new Error('Brak uprawnie≈Ñ do modyfikacji statystyk');\n        }\n        try {\n            console.log(`üìù Aktualizujƒô statystyki pracownika ${userId}: klienci=${clientsCount}, wp≈Çaty=${totalPayments}`);\n            // METODA 1: Spr√≥buj prostƒÖ aktualizacjƒô w employee_stats\n            try {\n                console.log('üìù Pr√≥ba prostej aktualizacji w employee_stats');\n                const legacyUpdates = {\n                    custom_clients_count: clientsCount,\n                    custom_total_payments: totalPayments,\n                    updated_at: new Date().toISOString()\n                };\n                const { data, error } = await supabase.from('employee_stats').update(legacyUpdates).eq('user_id', userId).select(`\n            *,\n            user:users!user_id (\n              id,\n              full_name,\n              email,\n              avatar_url,\n              role\n            )\n          `).single();\n                if (!error && data) {\n                    console.log('‚úÖ Zaktualizowano statystyki w employee_stats (metoda 1)');\n                    console.log(`üìä Klienci: ${clientsCount}, Wp≈Çaty: ‚Ç¨${totalPayments}`);\n                    return data;\n                } else {\n                    console.warn('‚ö†Ô∏è Metoda 1 nie zadzia≈Ça≈Ça:', error);\n                    throw error;\n                }\n            } catch (method1Error) {\n                console.warn('‚ö†Ô∏è Metoda 1 (prosta aktualizacja) nie zadzia≈Ça≈Ça:', method1Error);\n                // METODA 2: Spr√≥buj INSERT z ON CONFLICT\n                try {\n                    console.log('üìù Pr√≥ba INSERT z ON CONFLICT w employee_stats');\n                    const insertData = {\n                        user_id: userId,\n                        daily_target: 20,\n                        commission_rate: 3.0,\n                        monthly_canvas: 0,\n                        monthly_antysale: 0,\n                        monthly_sale: 0,\n                        total_commissions: 0,\n                        total_penalties: 0,\n                        custom_clients_count: clientsCount,\n                        custom_total_payments: totalPayments,\n                        created_at: new Date().toISOString(),\n                        updated_at: new Date().toISOString()\n                    };\n                    const { data, error } = await supabase.from('employee_stats').upsert(insertData, {\n                        onConflict: 'user_id',\n                        ignoreDuplicates: false\n                    }).select(`\n              *,\n              user:users!user_id (\n                id,\n                full_name,\n                email,\n                avatar_url,\n                role\n              )\n            `).single();\n                    if (!error && data) {\n                        console.log('‚úÖ Zaktualizowano statystyki w employee_stats (metoda 2)');\n                        console.log(`üìä Klienci: ${clientsCount}, Wp≈Çaty: ‚Ç¨${totalPayments}`);\n                        return data;\n                    } else {\n                        console.warn('‚ö†Ô∏è Metoda 2 nie zadzia≈Ça≈Ça:', error);\n                        throw error;\n                    }\n                } catch (method2Error) {\n                    console.warn('‚ö†Ô∏è Metoda 2 (upsert) nie zadzia≈Ça≈Ça:', method2Error);\n                    // METODA 3: Zaktualizuj tylko w pamiƒôci (fallback)\n                    console.log('üìù Fallback - zwracam symulowane dane');\n                    return {\n                        id: 'temp_' + userId,\n                        user_id: userId,\n                        daily_target: 20,\n                        commission_rate: 3.0,\n                        monthly_canvas: 0,\n                        monthly_antysale: 0,\n                        monthly_sale: 0,\n                        total_commissions: 0,\n                        total_penalties: 0,\n                        custom_clients_count: clientsCount,\n                        custom_total_payments: totalPayments,\n                        created_at: new Date().toISOString(),\n                        updated_at: new Date().toISOString(),\n                        user: {\n                            id: userId,\n                            full_name: 'Pracownik',\n                            email: 'brak@email.com',\n                            avatar_url: null,\n                            role: 'pracownik'\n                        }\n                    };\n                }\n            }\n        } catch (error) {\n            console.error('‚ùå B≈ÇƒÖd w updateEmployeeClientStats:', error);\n            throw error;\n        }\n    },\n    // Stw√≥rz statystyki dla nowego pracownika\n    async createEmployeeStats (userId, currentUser) {\n        // Sprawd≈∫ uprawnienia\n        if (![\n            'manager',\n            'project_manager',\n            'junior_manager',\n            'szef',\n            'admin'\n        ].includes(currentUser.role)) {\n            throw new Error('Brak uprawnie≈Ñ do tworzenia statystyk');\n        }\n        const { data, error } = await supabase.from('employee_stats').insert([\n            {\n                user_id: userId,\n                daily_target: 20,\n                commission_rate: 3.0\n            }\n        ]).select().single();\n        if (error) throw error;\n        return data;\n    },\n    // üìä Nowa funkcja: Pobierz statystyki wykorzystania bazy (klienci z/bez w≈Ça≈õciciela)\n    async getDatabaseUtilization () {\n        try {\n            console.log('üìä Pobieranie statystyk wykorzystania bazy...');\n            // Zlicz wszystkich klient√≥w\n            const { count: totalCount, error: totalError } = await supabase.from('clients').select('*', {\n                count: 'exact',\n                head: true\n            });\n            if (totalError) {\n                console.error('‚ùå B≈ÇƒÖd pobierania ≈ÇƒÖcznej liczby klient√≥w:', totalError);\n                throw totalError;\n            }\n            // Zlicz klient√≥w z w≈Ça≈õcicielem (owner_id != null)\n            const { count: withOwnerCount, error: withOwnerError } = await supabase.from('clients').select('*', {\n                count: 'exact',\n                head: true\n            }).not('owner_id', 'is', null);\n            if (withOwnerError) {\n                console.error('‚ùå B≈ÇƒÖd pobierania klient√≥w z w≈Ça≈õcicielem:', withOwnerError);\n                throw withOwnerError;\n            }\n            // Oblicz klient√≥w bez w≈Ça≈õciciela\n            const withoutOwnerCount = (totalCount || 0) - (withOwnerCount || 0);\n            // Oblicz procent wykorzystania\n            const utilizationPercentage = totalCount ? Math.round((withOwnerCount || 0) / totalCount * 100) : 0;\n            const result = {\n                withOwner: withOwnerCount || 0,\n                withoutOwner: withoutOwnerCount,\n                total: totalCount || 0,\n                utilizationPercentage\n            };\n            console.log('üìä Statystyki wykorzystania bazy:', result);\n            return result;\n        } catch (error) {\n            console.error('‚ùå B≈ÇƒÖd pobierania statystyk wykorzystania bazy:', error);\n            throw error;\n        }\n    },\n    // üîÑ ADMIN: Resetuj w≈Ça≈õcicieli wszystkich klient√≥w\n    async resetAllClientOwners (currentUser) {\n        // Sprawd≈∫ uprawnienia - tylko admin\n        if (currentUser.role !== 'admin') {\n            throw new Error('Brak uprawnie≈Ñ! Tylko administrator mo≈ºe resetowaƒá w≈Ça≈õcicieli klient√≥w.');\n        }\n        try {\n            console.log('üîÑ Rozpoczynam resetowanie w≈Ça≈õcicieli klient√≥w...');\n            // Pobierz liczbƒô klient√≥w z w≈Ça≈õcicielem przed resetowaniem\n            const { count: beforeCount, error: beforeError } = await supabase.from('clients').select('*', {\n                count: 'exact',\n                head: true\n            }).not('owner_id', 'is', null);\n            if (beforeError) {\n                console.error('‚ùå B≈ÇƒÖd sprawdzania stanu przed resetowaniem:', beforeError);\n                throw beforeError;\n            }\n            // Resetuj owner_id dla wszystkich klient√≥w\n            const { data, error } = await supabase.from('clients').update({\n                owner_id: null\n            }).not('owner_id', 'is', null) // Tylko te kt√≥re majƒÖ w≈Ça≈õciciela\n            .select('id, first_name, last_name');\n            if (error) {\n                console.error('‚ùå B≈ÇƒÖd resetowania w≈Ça≈õcicieli:', error);\n                throw error;\n            }\n            const resetCount = data?.length || 0;\n            // Loguj akcjƒô do activity_logs\n            try {\n                await activityLogsApi.createLog({\n                    client_id: 'bulk_action',\n                    changed_by: currentUser.id,\n                    change_type: 'update',\n                    field_changed: 'owner_id',\n                    old_value: 'various',\n                    new_value: 'null (reset by admin)'\n                });\n            } catch (logError) {\n                console.error('‚ö†Ô∏è Nie uda≈Ço siƒô zalogowaƒá akcji:', logError);\n            // Nie przerywamy procesu z powodu b≈Çƒôdu logowania\n            }\n            console.log(`‚úÖ Zresetowano w≈Ça≈õcicieli dla ${resetCount} klient√≥w`);\n            return {\n                success: resetCount,\n                message: `Pomy≈õlnie zresetowano w≈Ça≈õcicieli dla ${resetCount} klient√≥w. Wszyscy klienci sƒÖ teraz bez przypisanego w≈Ça≈õciciela.`\n            };\n        } catch (error) {\n            console.error('‚ùå B≈ÇƒÖd resetowania w≈Ça≈õcicieli klient√≥w:', error);\n            throw error;\n        }\n    },\n    // Pobierz statystyki aktywno≈õci pracownik√≥w z tabeli employee_statistics\n    async getEmployeeActivityStats (user) {\n        try {\n            console.log('üìä Pobieranie statystyk aktywno≈õci pracownik√≥w...');\n            // Sprawd≈∫ uprawnienia\n            if (!user || ![\n                'manager',\n                'project_manager',\n                'junior_manager',\n                'szef',\n                'admin'\n            ].includes(user.role)) {\n                console.warn('‚ö†Ô∏è Brak uprawnie≈Ñ do podglƒÖdu statystyk aktywno≈õci');\n                return [];\n            }\n            // KROK 1: Pobierz wszystkich u≈ºytkownik√≥w z rolƒÖ 'pracownik'\n            let allEmployees = [];\n            try {\n                const { data: employees, error: usersError } = await supabase.from('users').select(`\n            id,\n            full_name,\n            email,\n            avatar_url,\n            role\n          `).eq('role', 'pracownik').order('full_name', {\n                    ascending: true\n                });\n                if (usersError) {\n                    console.error('‚ùå B≈ÇƒÖd pobierania u≈ºytkownik√≥w-pracownik√≥w:', usersError);\n                    return [];\n                }\n                allEmployees = employees || [];\n                console.log(`üë• Znaleziono pracownik√≥w: ${allEmployees.length}`);\n                if (allEmployees.length === 0) {\n                    console.log('‚ö†Ô∏è Brak u≈ºytkownik√≥w z rolƒÖ pracownik');\n                    return [];\n                }\n            } catch (error) {\n                console.error('‚ùå B≈ÇƒÖd pobierania pracownik√≥w:', error);\n                return [];\n            }\n            // KROK 2: Pobierz statystyki aktywno≈õci - z obs≈ÇugƒÖ b≈Çƒôd√≥w RLS\n            let activityStats = [];\n            try {\n                const employeeIds = allEmployees.map((emp)=>emp.id);\n                console.log(`üîç Pobieranie statystyk dla ID: ${employeeIds.slice(0, 3).join(', ')}... (${employeeIds.length} total)`);\n                const { data: stats, error: statsError } = await supabase.from('employee_statistics').select('*').eq('period_type', 'monthly').in('user_id', employeeIds).order('period_end', {\n                    ascending: false\n                });\n                if (statsError) {\n                    console.error('‚ùå B≈ÇƒÖd pobierania statystyk aktywno≈õci:', statsError);\n                    // Je≈õli to b≈ÇƒÖd RLS (403), nie przerywaj - u≈ºyj domy≈õlnych danych\n                    if (statsError.code === 'PGRST116' || statsError.message?.includes('RLS') || statsError.message?.includes('permission')) {\n                        console.warn('üîí Problem z RLS - u≈ºywam domy≈õlnych danych aktywno≈õci');\n                        activityStats = [];\n                    } else {\n                        console.error('üí• Krytyczny b≈ÇƒÖd pobierania statystyk - przerywam');\n                        return [];\n                    }\n                } else {\n                    activityStats = stats || [];\n                    console.log(`üìä Znaleziono rekord√≥w aktywno≈õci: ${activityStats.length}`);\n                }\n            } catch (error) {\n                console.error('‚ùå B≈ÇƒÖd zapytania o statystyki aktywno≈õci:', error);\n                activityStats = [];\n            }\n            // KROK 3: Stw√≥rz mapƒô najnowszych statystyk dla ka≈ºdego pracownika\n            const latestStatsMap = new Map();\n            if (activityStats && activityStats.length > 0) {\n                activityStats.forEach((stat)=>{\n                    const userId = stat.user_id;\n                    if (!latestStatsMap.has(userId)) {\n                        latestStatsMap.set(userId, stat);\n                    }\n                });\n                console.log(`üó∫Ô∏è Zmapowano statystyki dla ${latestStatsMap.size} pracownik√≥w`);\n            } else {\n                console.log('‚ö†Ô∏è Brak danych aktywno≈õci - u≈ºyjƒô domy≈õlnych warto≈õci');\n            }\n            // KROK 4: Kombinuj dane pracownik√≥w ze statystykami aktywno≈õci\n            const result = allEmployees.map((employee)=>{\n                const userId = employee.id;\n                const activityStat = latestStatsMap.get(userId);\n                if (activityStat) {\n                    // Mamy statystyki - u≈ºyj prawdziwych danych\n                    return {\n                        ...activityStat,\n                        user: {\n                            id: employee.id,\n                            full_name: employee.full_name,\n                            email: employee.email,\n                            avatar_url: employee.avatar_url,\n                            role: employee.role\n                        }\n                    };\n                } else {\n                    // Brak statystyk - stw√≥rz domy≈õlne dane\n                    const currentDate = new Date();\n                    const currentMonth = currentDate.getMonth() + 1;\n                    const currentYear = currentDate.getFullYear();\n                    const monthStart = `${currentYear}-${currentMonth.toString().padStart(2, '0')}-01`;\n                    const monthEnd = new Date(currentYear, currentMonth, 0).toISOString().split('T')[0];\n                    return {\n                        id: 'temp_' + userId,\n                        user_id: userId,\n                        period_type: 'monthly',\n                        period_start: monthStart,\n                        period_end: monthEnd,\n                        total_work_minutes: 0,\n                        average_daily_minutes: 0,\n                        expected_work_minutes: 176 * 60,\n                        efficiency_percentage: 0,\n                        total_activities: 0,\n                        average_daily_activities: 0,\n                        days_worked: 0,\n                        days_absent: 0,\n                        user: {\n                            id: employee.id,\n                            full_name: employee.full_name,\n                            email: employee.email,\n                            avatar_url: employee.avatar_url,\n                            role: employee.role\n                        }\n                    };\n                }\n            });\n            console.log(`‚úÖ Przygotowano statystyki aktywno≈õci dla wszystkich pracownik√≥w: ${result.length}`);\n            console.log(`üë• Lista pracownik√≥w: ${result.map((s)=>s.user?.full_name).join(', ')}`);\n            // Poka≈º statystyki podsumowujƒÖce\n            const withData = result.filter((r)=>r.total_work_minutes > 0).length;\n            const withoutData = result.length - withData;\n            console.log(`üìä Pracownicy z danymi: ${withData}, bez danych: ${withoutData}`);\n            return result;\n        } catch (error) {\n            console.error('‚ùå B≈ÇƒÖd pobierania statystyk aktywno≈õci:', error);\n            // Graceful fallback - zwr√≥ƒá pustƒÖ tablicƒô zamiast crashowaƒá\n            console.log('üîÑ Graceful fallback - zwracam pustƒÖ tablicƒô');\n            return [];\n        }\n    },\n    // Pobierz trendy sprzeda≈ºowe z ostatnich 7 dni\n    async getSalesTrends (user) {\n        try {\n            console.log('üìà Pobieranie trend√≥w sprzeda≈ºowych z ostatnich 7 dni...');\n            // Pobierz dane z ostatnich 7 dni\n            const endDate = new Date();\n            const startDate = new Date();\n            startDate.setDate(endDate.getDate() - 6) // 7 dni wstecz (w≈ÇƒÖcznie z dzisiaj)\n            ;\n            const { data, error } = await supabase.from('clients').select('status, updated_at, status_changed_at, owner_id, edited_by').gte('updated_at', startDate.toISOString().split('T')[0]).lte('updated_at', endDate.toISOString().split('T')[0] + 'T23:59:59').in('status', [\n                'canvas',\n                'sale',\n                'antysale'\n            ]).order('updated_at', {\n                ascending: true\n            });\n            if (error) {\n                console.error('‚ùå B≈ÇƒÖd pobierania trend√≥w sprzeda≈ºowych:', error);\n                throw error;\n            }\n            console.log(`‚úÖ Pobrano ${data?.length || 0} rekord√≥w z ostatnich 7 dni`);\n            // Filtruj klient√≥w wed≈Çug uprawnie≈Ñ u≈ºytkownika\n            let filteredData = data || [];\n            if (user.role === 'pracownik') {\n                filteredData = filteredData.filter((client)=>client.owner_id === user.id || client.owner_id === null || client.edited_by === user.id);\n            }\n            // Stw√≥rz mapƒô dla dni tygodnia\n            const dayNames = [\n                'Ndz',\n                'Pon',\n                'Wt',\n                '≈ör',\n                'Czw',\n                'Pt',\n                'Sob'\n            ];\n            const trends = {};\n            // Inicjalizuj ostatnie 7 dni\n            for(let i = 6; i >= 0; i--){\n                const date = new Date();\n                date.setDate(date.getDate() - i);\n                const dayName = dayNames[date.getDay()];\n                trends[dayName] = {\n                    canvas: 0,\n                    sale: 0,\n                    antysale: 0\n                };\n            }\n            // Grupuj dane wed≈Çug dni\n            filteredData.forEach((client)=>{\n                const date = new Date(client.updated_at);\n                const dayName = dayNames[date.getDay()];\n                if (trends[dayName]) {\n                    if (client.status === 'canvas') trends[dayName].canvas++;\n                    else if (client.status === 'sale') trends[dayName].sale++;\n                    else if (client.status === 'antysale') trends[dayName].antysale++;\n                }\n            });\n            // Przekszta≈Çƒá na format dla wykresu (ostatnie 7 dni w kolejno≈õci)\n            const result = [];\n            for(let i = 6; i >= 0; i--){\n                const date = new Date();\n                date.setDate(date.getDate() - i);\n                const dayName = dayNames[date.getDay()];\n                result.push({\n                    day: dayName,\n                    canvas: trends[dayName].canvas,\n                    sale: trends[dayName].sale,\n                    antysale: trends[dayName].antysale\n                });\n            }\n            console.log('‚úÖ Trendy sprzeda≈ºowe przygotowane:', result);\n            return result;\n        } catch (error) {\n            console.error('‚ùå B≈ÇƒÖd pobierania trend√≥w sprzeda≈ºowych:', error);\n            // W przypadku b≈Çƒôdu zwr√≥ƒá puste dane dla ostatnich 7 dni\n            const dayNames = [\n                'Ndz',\n                'Pon',\n                'Wt',\n                '≈ör',\n                'Czw',\n                'Pt',\n                'Sob'\n            ];\n            const result = [];\n            for(let i = 6; i >= 0; i--){\n                const date = new Date();\n                date.setDate(date.getDate() - i);\n                const dayName = dayNames[date.getDay()];\n                result.push({\n                    day: dayName,\n                    canvas: 0,\n                    sale: 0,\n                    antysale: 0\n                });\n            }\n            return result;\n        }\n    },\n    // Pobierz statystyki klikniƒôƒá telefonu tylko dla pracownik√≥w\n    async getPhoneClicksStats (user) {\n        try {\n            console.log('üìû Pobieranie statystyk klikniƒôƒá telefonu...');\n            // Pobierz wszystkich pracownik√≥w\n            const { data: employees, error: employeesError } = await supabase.from('users').select('id').eq('role', 'pracownik');\n            if (employeesError) {\n                console.error('‚ùå B≈ÇƒÖd pobierania pracownik√≥w:', employeesError);\n                throw employeesError;\n            }\n            const employeeIds = (employees || []).map((emp)=>emp.id);\n            console.log(`üë• Znaleziono ${employeeIds.length} pracownik√≥w`);\n            if (employeeIds.length === 0) {\n                return {\n                    totalPhoneCalls: 0,\n                    totalPhoneCallsToday: 0\n                };\n            }\n            // Pobierz wszystkie klikniƒôcia telefonu z activity_logs tylko dla pracownik√≥w\n            const { data: allPhoneClicks, error: allClicksError } = await supabase.from('activity_logs').select('id, changed_by, timestamp').eq('field_changed', 'last_phone_click').in('changed_by', employeeIds);\n            if (allClicksError) {\n                console.error('‚ùå B≈ÇƒÖd pobierania klikniƒôƒá telefonu:', allClicksError);\n                throw allClicksError;\n            }\n            const totalPhoneCalls = allPhoneClicks?.length || 0;\n            // Pobierz dzisiejsze klikniƒôcia telefonu\n            const today = new Date().toISOString().split('T')[0] // YYYY-MM-DD\n            ;\n            const { data: todayPhoneClicks, error: todayClicksError } = await supabase.from('activity_logs').select('id, changed_by, timestamp').eq('field_changed', 'last_phone_click').in('changed_by', employeeIds).gte('timestamp', `${today}T00:00:00`).lt('timestamp', `${today}T23:59:59`);\n            if (todayClicksError) {\n                console.error('‚ùå B≈ÇƒÖd pobierania dzisiejszych klikniƒôƒá telefonu:', todayClicksError);\n                throw todayClicksError;\n            }\n            const totalPhoneCallsToday = todayPhoneClicks?.length || 0;\n            console.log(`‚úÖ Statystyki klikniƒôƒá telefonu: ≈ÇƒÖcznie ${totalPhoneCalls}, dzi≈õ ${totalPhoneCallsToday}`);\n            return {\n                totalPhoneCalls,\n                totalPhoneCallsToday\n            };\n        } catch (error) {\n            console.error('‚ùå B≈ÇƒÖd pobierania statystyk klikniƒôƒá telefonu:', error);\n            // W przypadku b≈Çƒôdu zwr√≥ƒá zerowe statystyki\n            return {\n                totalPhoneCalls: 0,\n                totalPhoneCallsToday: 0\n            };\n        }\n    },\n    // Pobierz dane trend√≥w wydajno≈õci zespo≈Çu z ostatnich 7 dni\n    async getTeamPerformanceTrends (user) {\n        try {\n            console.log('üìä Pobieranie trend√≥w wydajno≈õci zespo≈Çu z ostatnich 7 dni...');\n            // Pobierz wszystkich pracownik√≥w\n            const { data: employees, error: employeesError } = await supabase.from('users').select('id').eq('role', 'pracownik');\n            if (employeesError) {\n                console.error('‚ùå B≈ÇƒÖd pobierania pracownik√≥w:', employeesError);\n                throw employeesError;\n            }\n            const employeeIds = (employees || []).map((emp)=>emp.id);\n            console.log(`üë• Znaleziono ${employeeIds.length} pracownik√≥w`);\n            if (employeeIds.length === 0) {\n                // Zwr√≥ƒá puste dane dla ostatnich 7 dni\n                const dayNames = [\n                    'Ndz',\n                    'Pon',\n                    'Wt',\n                    '≈ör',\n                    'Czw',\n                    'Pt',\n                    'Sob'\n                ];\n                const result = [];\n                for(let i = 6; i >= 0; i--){\n                    const date = new Date();\n                    date.setDate(date.getDate() - i);\n                    const dayName = dayNames[date.getDay()];\n                    result.push({\n                        day: dayName,\n                        telefony: 0,\n                        konwersja: 0,\n                        klienci: 0\n                    });\n                }\n                return result;\n            }\n            // Pobierz dane z ostatnich 7 dni\n            const endDate = new Date();\n            const startDate = new Date();\n            startDate.setDate(endDate.getDate() - 6) // 7 dni wstecz (w≈ÇƒÖcznie z dzisiaj)\n            ;\n            // 1. Pobierz klikniƒôcia telefonu z activity_logs (tylko pracownicy)\n            const { data: phoneClicks, error: phoneError } = await supabase.from('activity_logs').select('changed_by, timestamp').eq('field_changed', 'last_phone_click').in('changed_by', employeeIds).gte('timestamp', startDate.toISOString().split('T')[0]).lte('timestamp', endDate.toISOString().split('T')[0] + 'T23:59:59');\n            if (phoneError) {\n                console.error('‚ùå B≈ÇƒÖd pobierania klikniƒôƒá telefonu:', phoneError);\n                throw phoneError;\n            }\n            // 2. Pobierz zmiany klient√≥w z ostatnich 7 dni (tylko przez pracownik√≥w)\n            const { data: clientChanges, error: changesError } = await supabase.from('clients').select('updated_at, status, edited_by').in('edited_by', employeeIds).gte('updated_at', startDate.toISOString().split('T')[0]).lte('updated_at', endDate.toISOString().split('T')[0] + 'T23:59:59').order('updated_at', {\n                ascending: true\n            });\n            if (changesError) {\n                console.error('‚ùå B≈ÇƒÖd pobierania zmian klient√≥w:', changesError);\n                throw changesError;\n            }\n            console.log(`‚úÖ Pobrano ${phoneClicks?.length || 0} klikniƒôƒá telefonu i ${clientChanges?.length || 0} zmian klient√≥w`);\n            // Stw√≥rz mapƒô dla dni tygodnia\n            const dayNames = [\n                'Ndz',\n                'Pon',\n                'Wt',\n                '≈ör',\n                'Czw',\n                'Pt',\n                'Sob'\n            ];\n            const trendsData = {};\n            // Inicjalizuj ostatnie 7 dni\n            for(let i = 6; i >= 0; i--){\n                const date = new Date();\n                date.setDate(date.getDate() - i);\n                const dayName = dayNames[date.getDay()];\n                trendsData[dayName] = {\n                    telefony: 0,\n                    klienci: 0,\n                    sales: 0\n                };\n            }\n            // Grupuj klikniƒôcia telefonu wed≈Çug dni\n            if (phoneClicks && Array.isArray(phoneClicks)) {\n                phoneClicks.forEach((click)=>{\n                    const date = new Date(click.timestamp);\n                    const dayName = dayNames[date.getDay()];\n                    if (trendsData[dayName]) {\n                        trendsData[dayName].telefony++;\n                    }\n                });\n            }\n            // Grupuj zmiany klient√≥w wed≈Çug dni\n            if (clientChanges && Array.isArray(clientChanges)) {\n                clientChanges.forEach((change)=>{\n                    const date = new Date(change.updated_at);\n                    const dayName = dayNames[date.getDay()];\n                    if (trendsData[dayName]) {\n                        trendsData[dayName].klienci++;\n                        if (change.status === 'sale') {\n                            trendsData[dayName].sales++;\n                        }\n                    }\n                });\n            }\n            // Przekszta≈Çƒá na format dla wykresu (ostatnie 7 dni w kolejno≈õci)\n            const result = [];\n            for(let i = 6; i >= 0; i--){\n                const date = new Date();\n                date.setDate(date.getDate() - i);\n                const dayName = dayNames[date.getDay()];\n                const dayData = trendsData[dayName];\n                // Oblicz konwersjƒô (procent sales wzglƒôdem wszystkich klient√≥w)\n                const konwersja = dayData.klienci > 0 ? Math.round(dayData.sales / dayData.klienci * 100) : 0;\n                result.push({\n                    day: dayName,\n                    telefony: dayData.telefony,\n                    konwersja: konwersja,\n                    klienci: dayData.klienci\n                });\n            }\n            console.log('‚úÖ Trendy wydajno≈õci zespo≈Çu przygotowane:', result);\n            return result;\n        } catch (error) {\n            console.error('‚ùå B≈ÇƒÖd pobierania trend√≥w wydajno≈õci zespo≈Çu:', error);\n            // W przypadku b≈Çƒôdu zwr√≥ƒá puste dane dla ostatnich 7 dni\n            const dayNames = [\n                'Ndz',\n                'Pon',\n                'Wt',\n                '≈ör',\n                'Czw',\n                'Pt',\n                'Sob'\n            ];\n            const result = [];\n            for(let i = 6; i >= 0; i--){\n                const date = new Date();\n                date.setDate(date.getDate() - i);\n                const dayName = dayNames[date.getDay()];\n                result.push({\n                    day: dayName,\n                    telefony: 0,\n                    konwersja: 0,\n                    klienci: 0\n                });\n            }\n            return result;\n        }\n    },\n    // API dla statystyk osobistych pracownika\n    async getMyPersonalStats (user) {\n        try {\n            console.log('üìä Pobieranie osobistych statystyk pracownika:', user.id, user.role);\n            // Sprawd≈∫ czy u≈ºytkownik to pracownik\n            if (user.role !== 'pracownik') {\n                console.error('‚ùå Nieautoryzowana rola:', user.role);\n                throw new Error('Dostƒôp tylko dla pracownik√≥w');\n            }\n            console.log('‚úÖ U≈ºytkownik autoryzowany jako pracownik');\n            const currentDate = new Date();\n            const currentMonth = currentDate.toISOString().slice(0, 7) // YYYY-MM\n            ;\n            // Ustaw pierwszy i ostatni dzie≈Ñ miesiƒÖca prawid≈Çowo\n            const startOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n            const endOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0, 23, 59, 59);\n            // 1. Pobierz liczbƒô telefon√≥w w tym miesiƒÖcu (klikniƒôcia telefonu)\n            const { data: phoneClicks, error: phoneError } = await supabase.from('activity_logs').select('id, timestamp').eq('changed_by', user.id).eq('field_changed', 'last_phone_click').gte('timestamp', startOfMonth.toISOString()).lte('timestamp', endOfMonth.toISOString());\n            if (phoneError) {\n                console.error('‚ùå B≈ÇƒÖd pobierania klikniƒôƒá telefonu:', phoneError);\n                throw phoneError;\n            }\n            const phoneCallsThisMonth = phoneClicks?.length || 0;\n            console.log(`üìû Znaleziono ${phoneCallsThisMonth} klikniƒôƒá telefonu w tym miesiƒÖcu`);\n            // 2. Pobierz klient√≥w przypisanych do pracownika\n            console.log('üë• Pobieranie klient√≥w przypisanych do pracownika...');\n            const { data: myClients, error: clientsError } = await supabase.from('clients').select('id, status, first_name, last_name, company_name').eq('owner_id', user.id);\n            if (clientsError) {\n                console.error('‚ùå B≈ÇƒÖd pobierania klient√≥w:', clientsError);\n                throw clientsError;\n            }\n            const clients = myClients || [];\n            const totalClients = clients.length;\n            console.log(`üë§ Pracownik ma ${totalClients} przypisanych klient√≥w`);\n            // 3. Agreguj statusy klient√≥w\n            console.log('üìä Agregowanie status√≥w klient√≥w...');\n            const statusMap = new Map();\n            clients.forEach((client)=>{\n                const status = client.status;\n                statusMap.set(status, (statusMap.get(status) || 0) + 1);\n            });\n            console.log('üìà Statusy klient√≥w:', Object.fromEntries(statusMap));\n            // Mapuj statusy na kolory\n            const statusColors = {\n                canvas: '#06b6d4',\n                sale: '#10b981',\n                antysale: '#f59e0b',\n                brak_kontaktu: '#6b7280',\n                nie_zainteresowany: '#ef4444',\n                zdenerwowany: '#dc2626',\n                '$$': '#fbbf24'\n            };\n            const clientStats = Array.from(statusMap.entries()).map(([status, count])=>({\n                    status,\n                    count,\n                    color: statusColors[status] || '#64748b'\n                }));\n            // 4. Oblicz prowizjƒô (tylko za klient√≥w ze statusem 'sale')\n            const saleClients = statusMap.get('sale') || 0;\n            const commissionPerSale = 200 // 200 z≈Ç za ka≈ºdego klienta sale\n            ;\n            const commissionTotal = saleClients * commissionPerSale;\n            // 5. Pobierz godziny pracy z tego miesiƒÖca na podstawie activity_logs\n            console.log('‚è∞ Pobieranie aktywno≈õci z tego miesiƒÖca...');\n            console.log(`üìÖ Zakres dat: ${startOfMonth.toISOString()} - ${endOfMonth.toISOString()}`);\n            const { data: activities, error: activitiesError } = await supabase.from('activity_logs').select('timestamp').eq('changed_by', user.id).gte('timestamp', startOfMonth.toISOString()).lte('timestamp', endOfMonth.toISOString()).order('timestamp', {\n                ascending: true\n            });\n            if (activitiesError) {\n                console.error('‚ùå B≈ÇƒÖd pobierania aktywno≈õci:', activitiesError);\n                throw activitiesError;\n            }\n            console.log(`‚è∞ Znaleziono ${activities?.length || 0} aktywno≈õci w tym miesiƒÖcu`);\n            // Grupuj aktywno≈õci wed≈Çug dni i oblicz godziny pracy\n            console.log('üìÖ Grupowanie aktywno≈õci wed≈Çug dni...');\n            const dailyActivities = new Map();\n            if (activities && activities.length > 0) {\n                activities.forEach((activity)=>{\n                    const date = new Date(activity.timestamp);\n                    const day = date.toISOString().split('T')[0] // YYYY-MM-DD\n                    ;\n                    const hour = date.getHours();\n                    if (!dailyActivities.has(day)) {\n                        dailyActivities.set(day, new Set());\n                    }\n                    dailyActivities.get(day).add(hour);\n                });\n            }\n            // Przekszta≈Çƒá na format dla wykresu\n            const workingHoursThisMonth = Array.from(dailyActivities.entries()).map(([day, hours])=>({\n                    day: new Date(day).toLocaleDateString('pl-PL', {\n                        weekday: 'short',\n                        day: 'numeric'\n                    }),\n                    hours: hours.size,\n                    sortDate: new Date(day) // Dodaj pole do sortowania\n                })).sort((a, b)=>a.sortDate.getTime() - b.sortDate.getTime()).map(({ day, hours })=>({\n                    day,\n                    hours\n                })) // Usu≈Ñ pole sortDate z wynikowych danych\n            ;\n            const totalWorkingHours = Array.from(dailyActivities.values()).reduce((sum, hours)=>sum + hours.size, 0);\n            const totalWorkingDays = dailyActivities.size;\n            console.log('‚úÖ Statystyki osobiste przygotowane:', {\n                phoneCallsThisMonth,\n                totalClients,\n                commissionTotal,\n                totalWorkingHours,\n                totalWorkingDays\n            });\n            return {\n                phoneCallsThisMonth,\n                clientStats,\n                totalClients,\n                commissionTotal,\n                workingHoursThisMonth,\n                totalWorkingHours,\n                totalWorkingDays\n            };\n        } catch (error) {\n            console.error('‚ùå B≈ÇƒÖd pobierania osobistych statystyk:', error);\n            // Szczeg√≥≈Çowe informacje o b≈Çƒôdzie\n            if (error && typeof error === 'object') {\n                console.error('üìã Szczeg√≥≈Çy b≈Çƒôdu:', {\n                    message: error.message,\n                    code: error.code,\n                    details: error.details,\n                    hint: error.hint,\n                    stack: error.stack\n                });\n            }\n            // Je≈õli to b≈ÇƒÖd RLS lub uprawnie≈Ñ, zwr√≥ƒá pustƒÖ strukturƒô zamiast crashowaƒá\n            if (error && typeof error === 'object' && (error.code === 'PGRST116' || error.message?.includes('RLS') || error.message?.includes('permission'))) {\n                console.warn('üîí Problem z uprawnieniami - zwracam domy≈õlne dane');\n                return {\n                    phoneCallsThisMonth: 0,\n                    clientStats: [],\n                    totalClients: 0,\n                    commissionTotal: 0,\n                    workingHoursThisMonth: [],\n                    totalWorkingHours: 0,\n                    totalWorkingDays: 0\n                };\n            }\n            throw error;\n        }\n    },\n    // Funkcje do zarzƒÖdzania godzinami pracy pracownika\n    async saveWorkingHours (user, date, hours) {\n        try {\n            console.log(`‚è∞ Zapisywanie godzin pracy: ${hours}h dla dnia ${date}`);\n            // Sprawd≈∫ czy u≈ºytkownik to pracownik\n            if (user.role !== 'pracownik') {\n                throw new Error('Dostƒôp tylko dla pracownik√≥w');\n            }\n            // Sprawd≈∫ czy to dzie≈Ñ roboczy (pon-pt) - bezpieczne parsowanie daty\n            const dateParts = date.split('-') // \"2025-06-02\" -> [\"2025\", \"06\", \"02\"]\n            ;\n            const year = parseInt(dateParts[0]);\n            const month = parseInt(dateParts[1]) - 1 // -1 bo JavaScript u≈ºywa 0-11 dla miesiƒôcy\n            ;\n            const day = parseInt(dateParts[2]);\n            const dayOfWeek = new Date(year, month, day).getDay();\n            console.log(`üóìÔ∏è Sprawdzanie dnia roboczego: ${date} => dayOfWeek=${dayOfWeek} (${[\n                'nie',\n                'pon',\n                'wt',\n                '≈õr',\n                'czw',\n                'pt',\n                'sob'\n            ][dayOfWeek]})`);\n            if (dayOfWeek === 0 || dayOfWeek === 6) {\n                throw new Error('Mo≈ºna wpisywaƒá godziny tylko dla dni roboczych (pon-pt)');\n            }\n            // Walidacja godzin (0-12)\n            if (hours < 0 || hours > 12) {\n                throw new Error('Liczba godzin musi byƒá miƒôdzy 0 a 12');\n            }\n            // Upsert godzin pracy w bazie danych (tabela ju≈º istnieje)\n            const { error } = await supabase.from('working_hours').upsert({\n                user_id: user.id,\n                work_date: date,\n                hours_worked: hours,\n                updated_at: new Date().toISOString()\n            }, {\n                onConflict: 'user_id,work_date'\n            });\n            if (error) {\n                console.error('‚ùå B≈ÇƒÖd zapisywania godzin pracy do bazy:', error);\n                // Fallback do localStorage tylko przy b≈Çƒôdzie bazy danych\n                console.warn('‚ö†Ô∏è B≈ÇƒÖd bazy danych - u≈ºywam localStorage jako fallback');\n                const storageKey = `working_hours_${user.id}`;\n                const existingData = JSON.parse(localStorage.getItem(storageKey) || '{}');\n                existingData[date] = hours;\n                localStorage.setItem(storageKey, JSON.stringify(existingData));\n                console.log(`‚úÖ Zapisano ${hours}h dla dnia ${date} (localStorage fallback)`);\n                return;\n            }\n            console.log(`‚úÖ Zapisano ${hours}h dla dnia ${date} (baza danych working_hours)`);\n        } catch (error) {\n            console.error('‚ùå B≈ÇƒÖd w saveWorkingHours:', error);\n            // Ultimate fallback - localStorage\n            try {\n                console.warn('‚ö†Ô∏è U≈ºywam localStorage jako ostateczny fallback');\n                const storageKey = `working_hours_${user.id}`;\n                const existingData = JSON.parse(localStorage.getItem(storageKey) || '{}');\n                existingData[date] = hours;\n                localStorage.setItem(storageKey, JSON.stringify(existingData));\n                console.log(`‚úÖ Zapisano ${hours}h dla dnia ${date} (localStorage ultimate fallback)`);\n            } catch (storageError) {\n                console.error('‚ùå Nie uda≈Ço siƒô zapisaƒá nawet do localStorage:', storageError);\n                throw error;\n            }\n        }\n    },\n    async getWorkingHoursForMonth (user, year, month) {\n        try {\n            console.log(`‚è∞ Pobieranie godzin pracy dla ${year}-${month}`);\n            // Sprawd≈∫ czy u≈ºytkownik to pracownik\n            if (user.role !== 'pracownik') {\n                throw new Error('Dostƒôp tylko dla pracownik√≥w');\n            }\n            // Oblicz pierwszy i ostatni dzie≈Ñ miesiƒÖca (poprawka strefy czasowej)\n            const startDate = `${year}-${month.toString().padStart(2, '0')}-01`;\n            const endDate = `${year}-${month.toString().padStart(2, '0')}-${new Date(year, month, 0).getDate().toString().padStart(2, '0')}`;\n            console.log(`üìÖ Pobieranie godzin dla zakresu: ${startDate} - ${endDate}`);\n            // Pobierz godziny pracy z tabeli working_hours (tabela ju≈º istnieje)\n            const { data, error } = await supabase.from('working_hours').select('work_date, hours_worked').eq('user_id', user.id).gte('work_date', startDate).lte('work_date', endDate);\n            if (error) {\n                console.error('‚ùå B≈ÇƒÖd pobierania godzin pracy z bazy:', error);\n                console.warn('‚ö†Ô∏è B≈ÇƒÖd bazy danych - u≈ºywam localStorage jako fallback');\n                // Fallback do localStorage tylko przy b≈Çƒôdzie bazy danych\n                const storageKey = `working_hours_${user.id}`;\n                const storedData = JSON.parse(localStorage.getItem(storageKey) || '{}');\n                // Filtruj dane dla odpowiedniego miesiƒÖca\n                const hoursMap = {};\n                Object.entries(storedData).forEach(([date, hours])=>{\n                    // U≈ºyj por√≥wnania string√≥w dla dat w formacie YYYY-MM-DD\n                    if (date >= startDate && date <= endDate) {\n                        hoursMap[date] = hours;\n                    }\n                });\n                console.log(`‚úÖ Pobrano godziny pracy z localStorage fallback dla ${Object.keys(hoursMap).length} dni`);\n                return hoursMap;\n            }\n            // Konwertuj na obiekt date -> hours\n            const hoursMap = {};\n            if (data) {\n                data.forEach((entry)=>{\n                    hoursMap[entry.work_date] = entry.hours_worked;\n                });\n            }\n            console.log(`‚úÖ Pobrano godziny pracy z tabeli working_hours dla ${data?.length || 0} dni`);\n            return hoursMap;\n        } catch (error) {\n            console.error('‚ùå B≈ÇƒÖd w getWorkingHoursForMonth:', error);\n            // Ultimate fallback - localStorage\n            try {\n                console.warn('‚ö†Ô∏è U≈ºywam localStorage jako ostateczny fallback');\n                const storageKey = `working_hours_${user.id}`;\n                const storedData = JSON.parse(localStorage.getItem(storageKey) || '{}');\n                // Filtruj dane dla odpowiedniego miesiƒÖca\n                const startDateStr = `${year}-${month.toString().padStart(2, '0')}-01`;\n                const endDateStr = `${year}-${month.toString().padStart(2, '0')}-${new Date(year, month, 0).getDate().toString().padStart(2, '0')}`;\n                const hoursMap = {};\n                Object.entries(storedData).forEach(([date, hours])=>{\n                    // U≈ºyj por√≥wnania string√≥w dla dat w formacie YYYY-MM-DD\n                    if (date >= startDateStr && date <= endDateStr) {\n                        hoursMap[date] = hours;\n                    }\n                });\n                console.log(`‚úÖ Pobrano godziny pracy z localStorage ultimate fallback dla ${Object.keys(hoursMap).length} dni`);\n                return hoursMap;\n            } catch (storageError) {\n                console.error('‚ùå Nie uda≈Ço siƒô pobraƒá nawet z localStorage:', storageError);\n                return {};\n            }\n        }\n    },\n    // üöÄ NOWE FUNKCJE PERFORMANCE - Materializowane Widoki\n    // Zastƒôpuje ciƒô≈ºkie JOIN'y - teraz natychmiastowe ≈Çadowanie\n    async getMonthlyEmployeePerformance (year, month) {\n        try {\n            console.log(`üìä Pobieranie wydajno≈õci pracownik√≥w dla ${year}-${month} (zoptymalizowane)...`);\n            const { data, error } = await supabase.rpc('get_monthly_employee_performance', {\n                target_year: year,\n                target_month: month\n            });\n            if (error) {\n                console.error('‚ùå B≈ÇƒÖd pobierania wydajno≈õci pracownik√≥w:', error);\n                throw error;\n            }\n            console.log(`‚úÖ Wydajno≈õƒá pracownik√≥w pobrana: ${data?.length || 0} rekord√≥w`);\n            return data;\n        } catch (error) {\n            console.error('‚ùå getMonthlyEmployeePerformance failed:', error);\n            throw error;\n        }\n    },\n    // Szybkie statystyki zespo≈Çu na podstawie materializowanych widok√≥w\n    async getTeamSummary (year, month) {\n        try {\n            const { data, error } = await supabase.from('mv_monthly_employee_stats').select('*').eq('year', year).eq('month', month).order('owned_sales', {\n                ascending: false\n            });\n            if (error) throw error;\n            return data;\n        } catch (error) {\n            console.error('‚ùå getTeamSummary failed:', error);\n            throw error;\n        }\n    },\n    // Performance analytics - top performers\n    async getTopPerformers (limit = 10) {\n        try {\n            const { data, error } = await supabase.rpc('get_top_performers', {\n                limit_count: limit\n            });\n            if (error) throw error;\n            return data;\n        } catch (error) {\n            console.error('‚ùå getTopPerformers failed:', error);\n            throw error;\n        }\n    }\n};\n// API dla lokalizacji/kraj√≥w\nconst locationsApi = {\n    // Pobierz wszystkie lokalizacje (podstawowe informacje - dla rejestracji)\n    async getAllLocations () {\n        try {\n            const { data, error } = await supabase.from('locations').select(`\n          id,\n          name,\n          code,\n          currency,\n          timezone,\n          region,\n          created_at,\n          updated_at\n        `).order('name');\n            if (error) {\n                console.error('‚ùå B≈ÇƒÖd pobierania lokalizacji:', error);\n                throw error;\n            }\n            console.log('‚úÖ Pobrano lokalizacje:', data?.length || 0);\n            return data;\n        } catch (error) {\n            console.error('‚ùå getAllLocations failed:', error);\n            throw error;\n        }\n    },\n    // Pobierz wszystkie lokalizacje z pe≈Çnymi informacjami (dla zalogowanych u≈ºytkownik√≥w)\n    async getAllLocationsWithManagers () {\n        const { data, error } = await supabase.from('locations').select(`\n        id,\n        name,\n        code,\n        currency,\n        timezone,\n        region,\n        project_manager_id,\n        created_at,\n        updated_at,\n        project_manager:users!project_manager_id (\n          id,\n          full_name,\n          email,\n          avatar_url\n        )\n      `).order('name');\n        if (error) throw error;\n        // Przekszta≈Çƒá dane - Supabase JOIN zwraca project_manager jako tablicƒô\n        const transformedData = data?.map((location)=>({\n                ...location,\n                project_manager: location.project_manager && Array.isArray(location.project_manager) && location.project_manager.length > 0 ? location.project_manager[0] // We≈∫ pierwszy element z tablicy\n                 : location.project_manager && !Array.isArray(location.project_manager) ? location.project_manager // Ju≈º jest pojedynczym obiektem\n                 : null // Brak project managera\n            }));\n        return transformedData;\n    },\n    // Pobierz dostƒôpne lokalizacje dla u≈ºytkownika\n    async getUserAccessibleLocations (userId) {\n        try {\n            // Najpierw spr√≥buj u≈ºyƒá funkcji SQL (je≈õli istnieje)\n            const { data, error } = await supabase.rpc('get_user_accessible_locations', {\n                user_id: userId\n            });\n            if (error) {\n                console.warn('üîÑ Funkcja SQL get_user_accessible_locations nie istnieje, u≈ºywam fallback logiki');\n                throw error;\n            }\n            return data;\n        } catch (error) {\n            console.warn('‚ö†Ô∏è B≈ÇƒÖd wywo≈Çania funkcji SQL, u≈ºywam JavaScript fallback:', error);\n            // Fallback - implementacja logiki w JavaScript\n            try {\n                // Pobierz u≈ºytkownika\n                const { data: user, error: userError } = await supabase.from('users').select('role, location_id').eq('id', userId).single();\n                if (userError) {\n                    console.error('‚ùå Nie mo≈ºna pobraƒá danych u≈ºytkownika:', userError);\n                    return this.getAllLocations() // Fallback - zwr√≥ƒá wszystkie\n                    ;\n                }\n                // Sprawd≈∫ rolƒô u≈ºytkownika\n                if (user.role === 'admin' || user.role === 'szef') {\n                    // Admin i szef widzƒÖ wszystkie lokalizacje\n                    console.log('üëë Admin/Szef - zwracam wszystkie lokalizacje');\n                    return this.getAllLocations();\n                } else {\n                    // Pozostali widzƒÖ tylko swojƒÖ lokalizacjƒô\n                    if (!user.location_id) {\n                        console.warn('‚ö†Ô∏è U≈ºytkownik nie ma przypisanej lokalizacji');\n                        return [];\n                    }\n                    console.log('üë§ Zwyk≈Çy u≈ºytkownik - zwracam lokalizacjƒô:', user.location_id);\n                    const { data: location, error: locationError } = await supabase.from('locations').select('*').eq('id', user.location_id).single();\n                    if (locationError) {\n                        console.error('‚ùå Nie mo≈ºna pobraƒá lokalizacji u≈ºytkownika:', locationError);\n                        return [];\n                    }\n                    return [\n                        location\n                    ];\n                }\n            } catch (fallbackError) {\n                console.error('‚ùå Fallback logic failed:', fallbackError);\n                // Ostateczny fallback - wszystkie lokalizacje\n                return this.getAllLocations();\n            }\n        }\n    },\n    // Pobierz lokalizacjƒô po ID\n    async getLocationById (id) {\n        const { data, error } = await supabase.from('locations').select(`\n        id,\n        name,\n        code,\n        currency,\n        timezone,\n        region,\n        project_manager_id,\n        created_at,\n        updated_at,\n        project_manager:users!project_manager_id (\n          id,\n          full_name,\n          email,\n          avatar_url\n        )\n      `).eq('id', id).single();\n        if (error) throw error;\n        // Przekszta≈Çƒá dane - Supabase JOIN zwraca project_manager jako tablicƒô\n        const transformedData = {\n            ...data,\n            project_manager: data.project_manager && Array.isArray(data.project_manager) && data.project_manager.length > 0 ? data.project_manager[0] // We≈∫ pierwszy element z tablicy\n             : data.project_manager && !Array.isArray(data.project_manager) ? data.project_manager // Ju≈º jest pojedynczym obiektem\n             : null // Brak project managera\n        };\n        return transformedData;\n    },\n    // Aktualizuj project managera dla lokalizacji\n    async updateLocationProjectManager (locationId, projectManagerId, currentUser) {\n        if (!permissionsApi.canChangeRoles(currentUser)) {\n            throw new Error('Brak uprawnie≈Ñ do zmiany project managera');\n        }\n        const { data, error } = await supabase.from('locations').update({\n            project_manager_id: projectManagerId,\n            updated_at: new Date().toISOString()\n        }).eq('id', locationId).select().single();\n        if (error) throw error;\n        return data;\n    }\n};\n// Funkcje autoryzacji\nconst authApi = {\n    // Zaloguj u≈ºytkownika\n    async signIn (email, password) {\n        const { data, error } = await supabase.auth.signInWithPassword({\n            email,\n            password\n        });\n        if (error) throw error;\n        return data;\n    },\n    // Zarejestruj nowego u≈ºytkownika\n    async signUp (email, password, fullName, locationId) {\n        const { data, error } = await supabase.auth.signUp({\n            email,\n            password,\n            options: {\n                data: {\n                    full_name: fullName,\n                    location_id: locationId\n                }\n            }\n        });\n        if (error) throw error;\n        return data;\n    },\n    // Wyloguj u≈ºytkownika\n    async signOut () {\n        const { error } = await supabase.auth.signOut();\n        if (error) throw error;\n    },\n    // Pobierz aktualnego u≈ºytkownika\n    async getCurrentUser () {\n        const { data: { user } } = await supabase.auth.getUser();\n        return user;\n    },\n    // Pobierz profil u≈ºytkownika z rolƒÖ\n    async getUserProfile (userId) {\n        const { data, error } = await supabase.from('users').select('*').eq('id', userId).single();\n        if (error) throw error;\n        return data;\n    },\n    // Pobierz wszystkich u≈ºytkownik√≥w (dla opcji filtrowania)\n    async getAllUsers () {\n        try {\n            console.log('üë• getAllUsers START - sprawdzam RLS...');\n            // Sprawd≈∫ aktualnego u≈ºytkownika\n            const { data: { user } } = await supabase.auth.getUser();\n            console.log('üë§ Aktualny u≈ºytkownik:', user?.email, user?.id);\n            const { data, error } = await supabase.from('users').select('id, full_name, email, role, avatar_url').order('full_name');\n            console.log('üë• getAllUsers - znaleziono u≈ºytkownik√≥w:', data?.length || 0);\n            console.log('üë• getAllUsers - b≈ÇƒÖd:', error);\n            if (error) {\n                console.error('‚ùå RLS Error in getAllUsers:', error);\n                // Sprawd≈∫ czy to problem z RLS\n                if (error.code === 'PGRST116' || error.message?.includes('RLS') || error.message?.includes('permission')) {\n                    console.error('üîí Problem z Row Level Security - pracownik nie mo≈ºe widzieƒá innych u≈ºytkownik√≥w');\n                }\n                throw error;\n            }\n            if (data && data.length > 0) {\n                console.log('üë• Przyk≈Çad u≈ºytkownik√≥w:', data.slice(0, 3).map((u)=>({\n                        id: u.id,\n                        name: u.full_name,\n                        role: u.role\n                    })));\n            } else {\n                console.log('üë• UWAGA: Brak danych u≈ºytkownik√≥w - mo≈ºe RLS blokuje dostƒôp');\n            }\n            return data;\n        } catch (error) {\n            console.error('‚ùå getAllUsers FAILED:', error);\n            throw error;\n        }\n    },\n    // Sprawd≈∫ sesjƒô u≈ºytkownika\n    async getSession () {\n        const { data: { session } } = await supabase.auth.getSession();\n        return session;\n    },\n    // Nas≈Çuchuj zmian w autoryzacji\n    onAuthStateChange (callback) {\n        return supabase.auth.onAuthStateChange(callback);\n    },\n    // Zaktualizuj jƒôzyk u≈ºytkownika\n    async updateUserLanguage (userId, language) {\n        const { data, error } = await supabase.from('users').update({\n            language\n        }).eq('id', userId).select().single();\n        if (error) throw error;\n        return data;\n    },\n    // Bezpieczne pobieranie u≈ºytkownik√≥w do wy≈õwietlania (odporne na RLS)\n    async getAllUsersForDisplay () {\n        try {\n            console.log('üë• getAllUsersForDisplay START - bezpieczne pobieranie...');\n            // Sprawd≈∫ aktualnego u≈ºytkownika\n            const { data: { user } } = await supabase.auth.getUser();\n            console.log('üë§ Aktualny u≈ºytkownik:', user?.email, user?.id);\n            if (!user) {\n                console.log('‚ùå Brak zalogowanego u≈ºytkownika');\n                return [];\n            }\n            const { data, error } = await supabase.from('users').select('id, full_name, email, role, avatar_url').order('full_name');\n            console.log('üë• getAllUsersForDisplay - znaleziono u≈ºytkownik√≥w:', data?.length || 0);\n            if (error) {\n                console.error('‚ùå RLS Error in getAllUsersForDisplay:', error);\n                // Je≈õli to problem z RLS, zwr√≥ƒá przynajmniej aktualnego u≈ºytkownika\n                if (error.code === 'PGRST116' || error.message?.includes('RLS') || error.message?.includes('permission')) {\n                    console.error('üîí RLS blokuje dostƒôp - zwracam tylko aktualnego u≈ºytkownika');\n                    // Pobierz profil aktualnego u≈ºytkownika\n                    try {\n                        const userProfile = await this.getUserProfile(user.id);\n                        console.log('üë§ Fallback: u≈ºywam profilu aktualnego u≈ºytkownika:', userProfile.full_name);\n                        return [\n                            userProfile\n                        ];\n                    } catch (profileError) {\n                        console.error('‚ùå Nie mo≈ºna pobraƒá profilu u≈ºytkownika:', profileError);\n                        return [];\n                    }\n                }\n                // Inny b≈ÇƒÖd - zwr√≥ƒá pustƒÖ tablicƒô\n                console.error('‚ùå Inny b≈ÇƒÖd - zwracam pustƒÖ tablicƒô');\n                return [];\n            }\n            if (data && data.length > 0) {\n                console.log('üë• Udane pobranie u≈ºytkownik√≥w:', data.length);\n                console.log('üë• Przyk≈Çad u≈ºytkownik√≥w:', data.slice(0, 3).map((u)=>({\n                        id: u.id,\n                        name: u.full_name,\n                        role: u.role\n                    })));\n                return data;\n            } else {\n                console.log('üë• UWAGA: Brak danych u≈ºytkownik√≥w');\n                // Fallback - przynajmniej aktualny u≈ºytkownik\n                try {\n                    const userProfile = await this.getUserProfile(user.id);\n                    console.log('üë§ Fallback: u≈ºywam profilu aktualnego u≈ºytkownika:', userProfile.full_name);\n                    return [\n                        userProfile\n                    ];\n                } catch (profileError) {\n                    console.error('‚ùå Nie mo≈ºna pobraƒá profilu u≈ºytkownika:', profileError);\n                    return [];\n                }\n            }\n        } catch (error) {\n            console.error('‚ùå getAllUsersForDisplay CRITICAL ERROR:', error);\n            // Krytyczny fallback - spr√≥buj przynajmniej pobraƒá aktualnego u≈ºytkownika\n            try {\n                const { data: { user } } = await supabase.auth.getUser();\n                if (user) {\n                    const userProfile = await this.getUserProfile(user.id);\n                    console.log('üë§ Krytyczny fallback: zwracam aktualnego u≈ºytkownika:', userProfile.full_name);\n                    return [\n                        userProfile\n                    ];\n                }\n            } catch (criticalError) {\n                console.error('‚ùå Krytyczny b≈ÇƒÖd fallback:', criticalError);\n            }\n            return [];\n        }\n    }\n};\n// Funkcja do okre≈õlania koloru statusu \"canvas\" na podstawie czasu\nconst getCanvasStatusColor = (statusChangedAt)=>{\n    if (!statusChangedAt) {\n        return {\n            color: 'bg-blue-500/20 text-blue-400 border-blue-500/30',\n            description: 'Nowy',\n            priority: 'low'\n        };\n    }\n    const now = new Date();\n    const statusDate = new Date(statusChangedAt);\n    const daysDiff = Math.floor((now.getTime() - statusDate.getTime()) / (1000 * 60 * 60 * 24));\n    if (daysDiff <= 2) {\n        // 0-2 dni - zielony (≈õwie≈ºy)\n        return {\n            color: 'bg-green-500/20 text-green-400 border-green-500/30',\n            description: `≈öwie≈ºy (${daysDiff}d)`,\n            priority: 'low'\n        };\n    } else if (daysDiff <= 4) {\n        // 2-4 dni - ≈º√≥≈Çty (uwaga)\n        return {\n            color: 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30',\n            description: `Wymaga uwagi (${daysDiff}d)`,\n            priority: 'medium'\n        };\n    } else {\n        // 5+ dni - czerwony (pilny)\n        return {\n            color: 'bg-red-500/20 text-red-400 border-red-500/30',\n            description: `Pilny (${daysDiff}d)`,\n            priority: 'high'\n        };\n    }\n};\n// Funkcja do pobierania klient√≥w z oznaczeniami priorytet√≥w\nconst getCanvasClientsWithPriority = async (user)=>{\n    try {\n        const clients = await clientsApi.getClients(user);\n        const canvasClients = clients.filter((client)=>client.status === 'canvas');\n        const priorityStats = {\n            high: 0,\n            medium: 0,\n            low: 0,\n            total: canvasClients.length\n        };\n        canvasClients.forEach((client)=>{\n            const { priority } = getCanvasStatusColor(client.status_changed_at);\n            priorityStats[priority]++;\n        });\n        return {\n            clients: canvasClients,\n            stats: priorityStats\n        };\n    } catch (error) {\n        console.error('B≈ÇƒÖd pobierania klient√≥w canvas:', error);\n        return {\n            clients: [],\n            stats: {\n                high: 0,\n                medium: 0,\n                low: 0,\n                total: 0\n            }\n        };\n    }\n};\n// üöÄ NOWE API PERFORMANCE - Materializowane Widoki i Optymalizacje\n// Dodane zgodnie z INSTRUKCJE_PERFORMANCE_OPTIMIZATIONS.md\nconst dashboardApi = {\n    // Zastƒôpuje wolne zapytania dashboard - teraz ~10ms zamiast ~200ms\n    async getDashboardMetrics () {\n        try {\n            console.log('‚ö° Pobieranie szybkich metryk dashboard z materializowanego widoku...');\n            const { data, error } = await supabase.rpc('get_dashboard_metrics');\n            if (error) {\n                console.error('‚ùå B≈ÇƒÖd pobierania metryk dashboard:', error);\n                throw error;\n            }\n            console.log('‚úÖ Dashboard metrics pobrane w trybie express:', data?.length || 0, 'metryk');\n            return data;\n        } catch (error) {\n            console.error('‚ùå getDashboardMetrics failed:', error);\n            throw error;\n        }\n    },\n    // Sprawdzenie czy materializowane widoki sƒÖ ≈õwie≈ºe\n    async checkViewFreshness () {\n        try {\n            // Sprawd≈∫ czy tabela mv_dashboard_summary istnieje\n            const { data, error } = await supabase.from('mv_dashboard_summary').select('last_updated').limit(1).single();\n            if (error) {\n                console.warn('‚ö†Ô∏è Materialized view mv_dashboard_summary nie istnieje lub brak uprawnie≈Ñ:', error);\n                // Fallback - u≈ºyj aktualnego czasu\n                return {\n                    lastUpdate: new Date().toISOString(),\n                    minutesSinceUpdate: 0,\n                    isStale: false // Za≈Ço≈º ≈ºe dane sƒÖ ≈õwie≈ºe je≈õli nie ma widoku\n                };\n            }\n            const lastUpdate = new Date(data.last_updated);\n            const now = new Date();\n            const minutesSinceUpdate = Math.floor((now.getTime() - lastUpdate.getTime()) / (1000 * 60));\n            return {\n                lastUpdate: data.last_updated,\n                minutesSinceUpdate,\n                isStale: minutesSinceUpdate > 30 // Uznaj za nieaktualne po 30 minutach\n            };\n        } catch (error) {\n            console.error('‚ùå B≈ÇƒÖd sprawdzania ≈õwie≈ºo≈õci widok√≥w:', error);\n            // Graceful fallback\n            return {\n                lastUpdate: new Date().toISOString(),\n                minutesSinceUpdate: 0,\n                isStale: false\n            };\n        }\n    }\n};\n// üöÄ NOWE FUNKCJE PERFORMANCE dodane do istniejƒÖcego reportsApi\nconst teamApi = {\n    // Szybki przeglƒÖd aktywno≈õci zespo≈Çu\n    async getTeamActivityOverview () {\n        try {\n            console.log('üë• Pobieranie przeglƒÖdu aktywno≈õci zespo≈Çu (zoptymalizowane)...');\n            const { data, error } = await supabase.from('mv_activity_summary').select('*').in('role', [\n                'pracownik',\n                'manager',\n                'project_manager',\n                'junior_manager',\n                'szef'\n            ]).order('activities_24h', {\n                ascending: false\n            });\n            if (error) {\n                console.error('‚ùå B≈ÇƒÖd pobierania aktywno≈õci zespo≈Çu:', error);\n                throw error;\n            }\n            console.log(`‚úÖ Aktywno≈õƒá zespo≈Çu pobrana: ${data?.length || 0} u≈ºytkownik√≥w`);\n            return data;\n        } catch (error) {\n            console.error('‚ùå getTeamActivityOverview failed:', error);\n            throw error;\n        }\n    },\n    // Sprawdzenie aktywnych u≈ºytkownik√≥w w czasie rzeczywistym\n    async getActiveUsersNow () {\n        try {\n            const { data, error } = await supabase.from('mv_activity_summary').select('user_id, full_name, activity_status, last_activity').eq('activity_status', 'active').order('last_activity', {\n                ascending: false\n            });\n            if (error) throw error;\n            return data;\n        } catch (error) {\n            console.error('‚ùå getActiveUsersNow failed:', error);\n            throw error;\n        }\n    },\n    // Statystyki produktywno≈õci zespo≈Çu\n    async getProductivityStats () {\n        try {\n            const { data, error } = await supabase.from('mv_activity_summary').select('activities_24h, activities_7d, phone_clicks, status_changes').in('role', [\n                'pracownik',\n                'manager',\n                'project_manager',\n                'junior_manager',\n                'szef'\n            ]);\n            if (error) throw error;\n            // Oblicz ≈õrednie\n            const totalUsers = data.length;\n            const avgDaily = data.reduce((sum, user)=>sum + user.activities_24h, 0) / totalUsers;\n            const avgWeekly = data.reduce((sum, user)=>sum + user.activities_7d, 0) / totalUsers;\n            return {\n                totalUsers,\n                avgDailyActivities: Math.round(avgDaily),\n                avgWeeklyActivities: Math.round(avgWeekly),\n                totalDailyActivities: data.reduce((sum, user)=>sum + user.activities_24h, 0),\n                totalWeeklyActivities: data.reduce((sum, user)=>sum + user.activities_7d, 0)\n            };\n        } catch (error) {\n            console.error('‚ùå getProductivityStats failed:', error);\n            throw error;\n        }\n    }\n};\n// üîß PERFORMANCE MONITORING API\nconst performanceApi = {\n    // Sprawdzenie metryk wydajno≈õci systemu\n    async getSystemMetrics () {\n        try {\n            console.log('üîç Pobieranie metryk wydajno≈õci systemu...');\n            const tableStats = [];\n            // Pomocnicza funkcja do bezpiecznego pobierania statystyk tabeli\n            const getTableStats = async (tableName)=>{\n                try {\n                    const { count, error } = await supabase.from(tableName).select('*', {\n                        count: 'exact',\n                        head: true\n                    });\n                    if (error) {\n                        console.warn(`‚ö†Ô∏è Nie mo≈ºna pobraƒá statystyk tabeli ${tableName}:`, error.message);\n                        return null;\n                    }\n                    return {\n                        table_name: tableName,\n                        record_count: count || 0,\n                        table_size: 'N/A',\n                        last_updated: new Date().toISOString()\n                    };\n                } catch (err) {\n                    console.warn(`‚ö†Ô∏è B≈ÇƒÖd tabeli ${tableName}:`, err);\n                    return null;\n                }\n            };\n            // Sprawd≈∫ ka≈ºdƒÖ tabelƒô oddzielnie\n            const tables = [\n                'clients',\n                'users',\n                'activity_logs',\n                'activity_logs_archive'\n            ];\n            for (const tableName of tables){\n                const stats = await getTableStats(tableName);\n                if (stats) {\n                    tableStats.push(stats);\n                }\n            }\n            // Je≈õli nie uda≈Ço siƒô pobraƒá ≈ºadnych statystyk, zwr√≥ƒá podstawowe informacje\n            if (tableStats.length === 0) {\n                console.warn('‚ö†Ô∏è Nie uda≈Ço siƒô pobraƒá statystyk ≈ºadnej tabeli - zwracam dane przyk≈Çadowe');\n                tableStats.push({\n                    table_name: 'system_info',\n                    record_count: 0,\n                    table_size: 'Brak dostƒôpu',\n                    last_updated: new Date().toISOString()\n                });\n            }\n            console.log(`‚úÖ Pobrano statystyki ${tableStats.length} tabel`);\n            return tableStats;\n        } catch (error) {\n            console.error('‚ùå getSystemMetrics failed:', error);\n            // Graceful fallback - zwr√≥ƒá podstawowe dane zamiast rzucaƒá b≈ÇƒÖd\n            return [\n                {\n                    table_name: 'error_fallback',\n                    record_count: 0,\n                    table_size: 'B≈ÇƒÖd po≈ÇƒÖczenia',\n                    last_updated: new Date().toISOString()\n                }\n            ];\n        }\n    },\n    // Manualne od≈õwie≈ºenie materializowanych widok√≥w\n    async refreshMaterializedViews () {\n        try {\n            console.log('üîÑ Manualnie od≈õwie≈ºam materializowane widoki...');\n            const { data, error } = await supabase.rpc('refresh_all_materialized_views');\n            if (error) throw error;\n            console.log('‚úÖ Widoki od≈õwie≈ºone:', data);\n            return data;\n        } catch (error) {\n            console.error('‚ùå refreshMaterializedViews failed:', error);\n            throw error;\n        }\n    },\n    // Archiwizacja starych log√≥w\n    async archiveOldLogs () {\n        try {\n            console.log('üì¶ Uruchamiam archiwizacjƒô starych log√≥w...');\n            const { data, error } = await supabase.rpc('archive_old_activity_logs');\n            if (error) throw error;\n            console.log(`‚úÖ Zarchiwizowano ${data} starych log√≥w`);\n            return data;\n        } catch (error) {\n            console.error('‚ùå archiveOldLogs failed:', error);\n            throw error;\n        }\n    },\n    // Optymalizacja bazy danych\n    async optimizeDatabase () {\n        try {\n            console.log('üöÄ Uruchamiam optymalizacjƒô bazy danych...');\n            const { data, error } = await supabase.rpc('optimize_database_performance');\n            if (error) throw error;\n            console.log('‚úÖ Baza danych zoptymalizowana:', data);\n            return data;\n        } catch (error) {\n            console.error('‚ùå optimizeDatabase failed:', error);\n            throw error;\n        }\n    }\n};\nconst callsApi = {\n    /**\r\n   * üìû POBIERZ HISTORIƒò PO≈ÅƒÑCZE≈É\r\n   * \r\n   * Pobiera historiƒô po≈ÇƒÖcze≈Ñ telefonicznych z activity_logs\r\n   * Uwzglƒôdnia uprawnienia u≈ºytkownika:\r\n   * - Admin/Szef: wszystkie po≈ÇƒÖczenia z wybranego kraju\r\n   * - Project Manager/Junior Manager: wszystkie z ich lokalizacji\r\n   * - Pracownik: tylko swoje po≈ÇƒÖczenia\r\n   */ async getCalls (user, filter = {}) {\n        try {\n            console.log('üìû Pobieranie historii po≈ÇƒÖcze≈Ñ...', {\n                user: user.role,\n                filter\n            });\n            let query = supabase.from('activity_logs').select(`\n          id,\n          client_id,\n          changed_by,\n          timestamp,\n          clients!inner (\n            id,\n            first_name,\n            last_name,\n            company_name,\n            phone,\n            location_id,\n            location:locations (\n              id,\n              name,\n              code\n            )\n          )\n        `).eq('field_changed', 'last_phone_click').order('timestamp', {\n                ascending: false\n            }).limit(filter.limit || 100);\n            // Filtrowanie wed≈Çug uprawnie≈Ñ u≈ºytkownika\n            if (user.role === 'pracownik') {\n                // Pracownik widzi tylko swoje po≈ÇƒÖczenia\n                query = query.eq('changed_by', user.id);\n            } else if ([\n                'junior_manager',\n                'manager',\n                'project_manager'\n            ].includes(user.role)) {\n                // Mened≈ºerowie widzƒÖ po≈ÇƒÖczenia z ich lokalizacji\n                if (filter.locationId) {\n                    // Je≈õli wybrano konkretnƒÖ lokalizacjƒô, filtruj po niej\n                    query = query.eq('clients.location_id', filter.locationId);\n                } else if (user.location_id) {\n                    // Je≈õli nie wybrano lokalizacji, poka≈º z lokalizacji u≈ºytkownika\n                    query = query.eq('clients.location_id', user.location_id);\n                }\n            } else if ([\n                'szef',\n                'admin'\n            ].includes(user.role)) {\n                // Szef i admin widzƒÖ wszystko, opcjonalnie filtrowane po lokalizacji\n                if (filter.locationId) {\n                    query = query.eq('clients.location_id', filter.locationId);\n                }\n            }\n            // Dodatkowe filtry czasowe\n            if (filter.startDate) {\n                query = query.gte('timestamp', filter.startDate);\n            }\n            if (filter.endDate) {\n                query = query.lte('timestamp', filter.endDate);\n            }\n            const { data: callLogs, error } = await query;\n            if (error) {\n                console.error('‚ùå B≈ÇƒÖd pobierania po≈ÇƒÖcze≈Ñ:', error);\n                throw error;\n            }\n            if (!callLogs || callLogs.length === 0) {\n                console.log('üìû Brak po≈ÇƒÖcze≈Ñ dla podanych kryteri√≥w');\n                return [];\n            }\n            // Pobierz informacje o u≈ºytkownikach (dzwoniƒÖcych)\n            const callerIds = [\n                ...new Set(callLogs.map((log)=>log.changed_by))\n            ];\n            const { data: callers, error: callersError } = await supabase.from('users').select('id, full_name, role, avatar_url').in('id', callerIds);\n            if (callersError) {\n                console.error('‚ùå B≈ÇƒÖd pobierania u≈ºytkownik√≥w:', callersError);\n            // Kontynuuj bez szczeg√≥≈Ç√≥w u≈ºytkownik√≥w\n            }\n            // Stw√≥rz mapƒô u≈ºytkownik√≥w\n            const callersMap = (callers || []).reduce((acc, caller)=>{\n                acc[caller.id] = caller;\n                return acc;\n            }, {});\n            // Przekszta≈Çƒá dane na format CallRecord\n            const callRecords = callLogs.map((log)=>{\n                const client = Array.isArray(log.clients) ? log.clients[0] : log.clients;\n                const caller = callersMap[log.changed_by];\n                const location = Array.isArray(client?.location) ? client.location[0] : client?.location;\n                return {\n                    id: log.id,\n                    client_id: log.client_id,\n                    client_name: client ? `${client.first_name} ${client.last_name}`.trim() : 'Nieznany klient',\n                    client_company: client?.company_name || 'Brak informacji',\n                    client_phone: client?.phone || 'Brak telefonu',\n                    called_by: log.changed_by,\n                    caller_name: caller?.full_name || 'Nieznany u≈ºytkownik',\n                    caller_role: caller?.role || 'unknown',\n                    caller_avatar: caller?.avatar_url || null,\n                    call_timestamp: log.timestamp,\n                    location_id: client?.location_id || null,\n                    location_name: location?.name || null,\n                    location_code: location?.code || null\n                };\n            });\n            console.log(`‚úÖ Pobrano ${callRecords.length} rekord√≥w po≈ÇƒÖcze≈Ñ`);\n            return callRecords;\n        } catch (error) {\n            console.error('‚ùå B≈ÇƒÖd w callsApi.getCalls:', error);\n            throw error;\n        }\n    },\n    /**\r\n   * üìä POBIERZ STATYSTYKI PO≈ÅƒÑCZE≈É\r\n   * \r\n   * Pobiera statystyki po≈ÇƒÖcze≈Ñ dla wybranego okresu\r\n   */ async getCallsStats (user, filter = {}) {\n        try {\n            console.log('üìä Pobieranie statystyk po≈ÇƒÖcze≈Ñ...');\n            const now = new Date();\n            const today = now.toISOString().split('T')[0];\n            const weekStart = new Date(now.setDate(now.getDate() - now.getDay())).toISOString().split('T')[0];\n            const monthStart = new Date(now.getFullYear(), now.getMonth(), 1).toISOString();\n            // Pobierz wszystkie po≈ÇƒÖczenia zgodnie z uprawnieniami\n            const allCalls = await callsApi.getCalls(user, {\n                ...filter,\n                limit: 1000\n            });\n            // Zlicz statystyki\n            const totalCalls = allCalls.length;\n            const callsToday = allCalls.filter((call)=>call.call_timestamp.startsWith(today)).length;\n            const callsThisWeek = allCalls.filter((call)=>call.call_timestamp >= weekStart).length;\n            const callsThisMonth = allCalls.filter((call)=>call.call_timestamp >= monthStart).length;\n            // Top dzwoniƒÖcy\n            const callerCounts = allCalls.reduce((acc, call)=>{\n                const key = call.called_by;\n                if (!acc[key]) {\n                    acc[key] = {\n                        name: call.caller_name,\n                        role: call.caller_role,\n                        avatar: call.caller_avatar,\n                        count: 0\n                    };\n                }\n                acc[key].count++;\n                return acc;\n            }, {});\n            const topCallers = Object.values(callerCounts).sort((a, b)=>b.count - a.count).slice(0, 5);\n            return {\n                totalCalls,\n                callsToday,\n                callsThisWeek,\n                callsThisMonth,\n                topCallers\n            };\n        } catch (error) {\n            console.error('‚ùå B≈ÇƒÖd pobierania statystyk po≈ÇƒÖcze≈Ñ:', error);\n            return {\n                totalCalls: 0,\n                callsToday: 0,\n                callsThisWeek: 0,\n                callsThisMonth: 0,\n                topCallers: []\n            };\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/supabase.ts\n");

/***/ }),

/***/ "(rsc)/./node_modules/@supabase/realtime-js/dist/main sync recursive":
/*!************************************************************!*\
  !*** ./node_modules/@supabase/realtime-js/dist/main/ sync ***!
  \************************************************************/
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = "(rsc)/./node_modules/@supabase/realtime-js/dist/main sync recursive";
module.exports = webpackEmptyContext;

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Fperformance-check%2Froute&page=%2Fapi%2Fadmin%2Fperformance-check%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fperformance-check%2Froute.ts&appDir=C%3A%5CUsers%5Ckkacp%5CDesktop%5CSpectresGroupCRM%5Cdashboard%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Ckkacp%5CDesktop%5CSpectresGroupCRM%5Cdashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Fperformance-check%2Froute&page=%2Fapi%2Fadmin%2Fperformance-check%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fperformance-check%2Froute.ts&appDir=C%3A%5CUsers%5Ckkacp%5CDesktop%5CSpectresGroupCRM%5Cdashboard%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Ckkacp%5CDesktop%5CSpectresGroupCRM%5Cdashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_kkacp_Desktop_SpectresGroupCRM_dashboard_app_api_admin_performance_check_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/admin/performance-check/route.ts */ \"(rsc)/./app/api/admin/performance-check/route.ts\");\n\r\n\r\n\r\n\r\n// We inject the nextConfigOutput here so that we can use them in the route\r\n// module.\r\nconst nextConfigOutput = \"standalone\"\r\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\r\n    definition: {\r\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\r\n        page: \"/api/admin/performance-check/route\",\r\n        pathname: \"/api/admin/performance-check\",\r\n        filename: \"route\",\r\n        bundlePath: \"app/api/admin/performance-check/route\"\r\n    },\r\n    resolvedPagePath: \"C:\\\\Users\\\\kkacp\\\\Desktop\\\\SpectresGroupCRM\\\\dashboard\\\\app\\\\api\\\\admin\\\\performance-check\\\\route.ts\",\r\n    nextConfigOutput,\r\n    userland: C_Users_kkacp_Desktop_SpectresGroupCRM_dashboard_app_api_admin_performance_check_route_ts__WEBPACK_IMPORTED_MODULE_3__\r\n});\r\n// Pull out the exports that we need to expose from the module. This should\r\n// be eliminated when we've moved the other routes to the new format. These\r\n// are used to hook into the route.\r\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\r\nfunction patchFetch() {\r\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\r\n        workAsyncStorage,\r\n        workUnitAsyncStorage\r\n    });\r\n}\r\n\r\n\r\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZhZG1pbiUyRnBlcmZvcm1hbmNlLWNoZWNrJTJGcm91dGUmcGFnZT0lMkZhcGklMkZhZG1pbiUyRnBlcmZvcm1hbmNlLWNoZWNrJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGYWRtaW4lMkZwZXJmb3JtYW5jZS1jaGVjayUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNra2FjcCU1Q0Rlc2t0b3AlNUNTcGVjdHJlc0dyb3VwQ1JNJTVDZGFzaGJvYXJkJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1DJTNBJTVDVXNlcnMlNUNra2FjcCU1Q0Rlc2t0b3AlNUNTcGVjdHJlc0dyb3VwQ1JNJTVDZGFzaGJvYXJkJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PXN0YW5kYWxvbmUmcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBK0Y7QUFDdkM7QUFDcUI7QUFDb0Q7QUFDakk7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHlHQUFtQjtBQUMzQztBQUNBLGNBQWMsa0VBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxzREFBc0Q7QUFDOUQ7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDMEY7QUFDMUY7QUFDQSIsInNvdXJjZXMiOlsiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcclxuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUta2luZFwiO1xyXG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XHJcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxVc2Vyc1xcXFxra2FjcFxcXFxEZXNrdG9wXFxcXFNwZWN0cmVzR3JvdXBDUk1cXFxcZGFzaGJvYXJkXFxcXGFwcFxcXFxhcGlcXFxcYWRtaW5cXFxccGVyZm9ybWFuY2UtY2hlY2tcXFxccm91dGUudHNcIjtcclxuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXHJcbi8vIG1vZHVsZS5cclxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwic3RhbmRhbG9uZVwiXHJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xyXG4gICAgZGVmaW5pdGlvbjoge1xyXG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXHJcbiAgICAgICAgcGFnZTogXCIvYXBpL2FkbWluL3BlcmZvcm1hbmNlLWNoZWNrL3JvdXRlXCIsXHJcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9hZG1pbi9wZXJmb3JtYW5jZS1jaGVja1wiLFxyXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXHJcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2FkbWluL3BlcmZvcm1hbmNlLWNoZWNrL3JvdXRlXCJcclxuICAgIH0sXHJcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIkM6XFxcXFVzZXJzXFxcXGtrYWNwXFxcXERlc2t0b3BcXFxcU3BlY3RyZXNHcm91cENSTVxcXFxkYXNoYm9hcmRcXFxcYXBwXFxcXGFwaVxcXFxhZG1pblxcXFxwZXJmb3JtYW5jZS1jaGVja1xcXFxyb3V0ZS50c1wiLFxyXG4gICAgbmV4dENvbmZpZ091dHB1dCxcclxuICAgIHVzZXJsYW5kXHJcbn0pO1xyXG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcclxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXHJcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXHJcbmNvbnN0IHsgd29ya0FzeW5jU3RvcmFnZSwgd29ya1VuaXRBc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcclxuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcclxuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XHJcbiAgICAgICAgd29ya0FzeW5jU3RvcmFnZSxcclxuICAgICAgICB3b3JrVW5pdEFzeW5jU3RvcmFnZVxyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHdvcmtBc3luY1N0b3JhZ2UsIHdvcmtVbml0QXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgcGF0Y2hGZXRjaCwgIH07XHJcblxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Fperformance-check%2Froute&page=%2Fapi%2Fadmin%2Fperformance-check%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fperformance-check%2Froute.ts&appDir=C%3A%5CUsers%5Ckkacp%5CDesktop%5CSpectresGroupCRM%5Cdashboard%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Ckkacp%5CDesktop%5CSpectresGroupCRM%5Cdashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "?32c4":
/*!****************************!*\
  !*** bufferutil (ignored) ***!
  \****************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?66e9":
/*!********************************!*\
  !*** utf-8-validate (ignored) ***!
  \********************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@supabase","vendor-chunks/tr46","vendor-chunks/ws","vendor-chunks/whatwg-url","vendor-chunks/webidl-conversions"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Fperformance-check%2Froute&page=%2Fapi%2Fadmin%2Fperformance-check%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fperformance-check%2Froute.ts&appDir=C%3A%5CUsers%5Ckkacp%5CDesktop%5CSpectresGroupCRM%5Cdashboard%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Ckkacp%5CDesktop%5CSpectresGroupCRM%5Cdashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();