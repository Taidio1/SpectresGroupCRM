"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/fast-equals";
exports.ids = ["vendor-chunks/fast-equals"];
exports.modules = {

/***/ "(ssr)/./node_modules/fast-equals/dist/esm/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/fast-equals/dist/esm/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   circularDeepEqual: () => (/* binding */ circularDeepEqual),\n/* harmony export */   circularShallowEqual: () => (/* binding */ circularShallowEqual),\n/* harmony export */   createCustomEqual: () => (/* binding */ createCustomEqual),\n/* harmony export */   deepEqual: () => (/* binding */ deepEqual),\n/* harmony export */   sameValueZeroEqual: () => (/* binding */ sameValueZeroEqual),\n/* harmony export */   shallowEqual: () => (/* binding */ shallowEqual),\n/* harmony export */   strictCircularDeepEqual: () => (/* binding */ strictCircularDeepEqual),\n/* harmony export */   strictCircularShallowEqual: () => (/* binding */ strictCircularShallowEqual),\n/* harmony export */   strictDeepEqual: () => (/* binding */ strictDeepEqual),\n/* harmony export */   strictShallowEqual: () => (/* binding */ strictShallowEqual)\n/* harmony export */ });\nvar getOwnPropertyNames = Object.getOwnPropertyNames, getOwnPropertySymbols = Object.getOwnPropertySymbols;\r\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\r\n/**\r\n * Combine two comparators into a single comparators.\r\n */\r\nfunction combineComparators(comparatorA, comparatorB) {\r\n    return function isEqual(a, b, state) {\r\n        return comparatorA(a, b, state) && comparatorB(a, b, state);\r\n    };\r\n}\r\n/**\r\n * Wrap the provided `areItemsEqual` method to manage the circular state, allowing\r\n * for circular references to be safely included in the comparison without creating\r\n * stack overflows.\r\n */\r\nfunction createIsCircular(areItemsEqual) {\r\n    return function isCircular(a, b, state) {\r\n        if (!a || !b || typeof a !== 'object' || typeof b !== 'object') {\r\n            return areItemsEqual(a, b, state);\r\n        }\r\n        var cache = state.cache;\r\n        var cachedA = cache.get(a);\r\n        var cachedB = cache.get(b);\r\n        if (cachedA && cachedB) {\r\n            return cachedA === b && cachedB === a;\r\n        }\r\n        cache.set(a, b);\r\n        cache.set(b, a);\r\n        var result = areItemsEqual(a, b, state);\r\n        cache.delete(a);\r\n        cache.delete(b);\r\n        return result;\r\n    };\r\n}\r\n/**\r\n * Get the properties to strictly examine, which include both own properties that are\r\n * not enumerable and symbol properties.\r\n */\r\nfunction getStrictProperties(object) {\r\n    return getOwnPropertyNames(object).concat(getOwnPropertySymbols(object));\r\n}\r\n/**\r\n * Whether the object contains the property passed as an own property.\r\n */\r\nvar hasOwn = Object.hasOwn ||\r\n    (function (object, property) {\r\n        return hasOwnProperty.call(object, property);\r\n    });\r\n/**\r\n * Whether the values passed are strictly equal or both NaN.\r\n */\r\nfunction sameValueZeroEqual(a, b) {\r\n    return a === b || (!a && !b && a !== a && b !== b);\r\n}\r\n\r\nvar PREACT_VNODE = '__v';\r\nvar PREACT_OWNER = '__o';\r\nvar REACT_OWNER = '_owner';\r\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor, keys = Object.keys;\r\n/**\r\n * Whether the arrays are equal in value.\r\n */\r\nfunction areArraysEqual(a, b, state) {\r\n    var index = a.length;\r\n    if (b.length !== index) {\r\n        return false;\r\n    }\r\n    while (index-- > 0) {\r\n        if (!state.equals(a[index], b[index], index, index, a, b, state)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Whether the dates passed are equal in value.\r\n */\r\nfunction areDatesEqual(a, b) {\r\n    return sameValueZeroEqual(a.getTime(), b.getTime());\r\n}\r\n/**\r\n * Whether the errors passed are equal in value.\r\n */\r\nfunction areErrorsEqual(a, b) {\r\n    return (a.name === b.name &&\r\n        a.message === b.message &&\r\n        a.cause === b.cause &&\r\n        a.stack === b.stack);\r\n}\r\n/**\r\n * Whether the functions passed are equal in value.\r\n */\r\nfunction areFunctionsEqual(a, b) {\r\n    return a === b;\r\n}\r\n/**\r\n * Whether the `Map`s are equal in value.\r\n */\r\nfunction areMapsEqual(a, b, state) {\r\n    var size = a.size;\r\n    if (size !== b.size) {\r\n        return false;\r\n    }\r\n    if (!size) {\r\n        return true;\r\n    }\r\n    var matchedIndices = new Array(size);\r\n    var aIterable = a.entries();\r\n    var aResult;\r\n    var bResult;\r\n    var index = 0;\r\n    while ((aResult = aIterable.next())) {\r\n        if (aResult.done) {\r\n            break;\r\n        }\r\n        var bIterable = b.entries();\r\n        var hasMatch = false;\r\n        var matchIndex = 0;\r\n        while ((bResult = bIterable.next())) {\r\n            if (bResult.done) {\r\n                break;\r\n            }\r\n            if (matchedIndices[matchIndex]) {\r\n                matchIndex++;\r\n                continue;\r\n            }\r\n            var aEntry = aResult.value;\r\n            var bEntry = bResult.value;\r\n            if (state.equals(aEntry[0], bEntry[0], index, matchIndex, a, b, state) &&\r\n                state.equals(aEntry[1], bEntry[1], aEntry[0], bEntry[0], a, b, state)) {\r\n                hasMatch = matchedIndices[matchIndex] = true;\r\n                break;\r\n            }\r\n            matchIndex++;\r\n        }\r\n        if (!hasMatch) {\r\n            return false;\r\n        }\r\n        index++;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Whether the numbers are equal in value.\r\n */\r\nvar areNumbersEqual = sameValueZeroEqual;\r\n/**\r\n * Whether the objects are equal in value.\r\n */\r\nfunction areObjectsEqual(a, b, state) {\r\n    var properties = keys(a);\r\n    var index = properties.length;\r\n    if (keys(b).length !== index) {\r\n        return false;\r\n    }\r\n    // Decrementing `while` showed faster results than either incrementing or\r\n    // decrementing `for` loop and than an incrementing `while` loop. Declarative\r\n    // methods like `some` / `every` were not used to avoid incurring the garbage\r\n    // cost of anonymous callbacks.\r\n    while (index-- > 0) {\r\n        if (!isPropertyEqual(a, b, state, properties[index])) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Whether the objects are equal in value with strict property checking.\r\n */\r\nfunction areObjectsEqualStrict(a, b, state) {\r\n    var properties = getStrictProperties(a);\r\n    var index = properties.length;\r\n    if (getStrictProperties(b).length !== index) {\r\n        return false;\r\n    }\r\n    var property;\r\n    var descriptorA;\r\n    var descriptorB;\r\n    // Decrementing `while` showed faster results than either incrementing or\r\n    // decrementing `for` loop and than an incrementing `while` loop. Declarative\r\n    // methods like `some` / `every` were not used to avoid incurring the garbage\r\n    // cost of anonymous callbacks.\r\n    while (index-- > 0) {\r\n        property = properties[index];\r\n        if (!isPropertyEqual(a, b, state, property)) {\r\n            return false;\r\n        }\r\n        descriptorA = getOwnPropertyDescriptor(a, property);\r\n        descriptorB = getOwnPropertyDescriptor(b, property);\r\n        if ((descriptorA || descriptorB) &&\r\n            (!descriptorA ||\r\n                !descriptorB ||\r\n                descriptorA.configurable !== descriptorB.configurable ||\r\n                descriptorA.enumerable !== descriptorB.enumerable ||\r\n                descriptorA.writable !== descriptorB.writable)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Whether the primitive wrappers passed are equal in value.\r\n */\r\nfunction arePrimitiveWrappersEqual(a, b) {\r\n    return sameValueZeroEqual(a.valueOf(), b.valueOf());\r\n}\r\n/**\r\n * Whether the regexps passed are equal in value.\r\n */\r\nfunction areRegExpsEqual(a, b) {\r\n    return a.source === b.source && a.flags === b.flags;\r\n}\r\n/**\r\n * Whether the `Set`s are equal in value.\r\n */\r\nfunction areSetsEqual(a, b, state) {\r\n    var size = a.size;\r\n    if (size !== b.size) {\r\n        return false;\r\n    }\r\n    if (!size) {\r\n        return true;\r\n    }\r\n    var matchedIndices = new Array(size);\r\n    var aIterable = a.values();\r\n    var aResult;\r\n    var bResult;\r\n    while ((aResult = aIterable.next())) {\r\n        if (aResult.done) {\r\n            break;\r\n        }\r\n        var bIterable = b.values();\r\n        var hasMatch = false;\r\n        var matchIndex = 0;\r\n        while ((bResult = bIterable.next())) {\r\n            if (bResult.done) {\r\n                break;\r\n            }\r\n            if (!matchedIndices[matchIndex] &&\r\n                state.equals(aResult.value, bResult.value, aResult.value, bResult.value, a, b, state)) {\r\n                hasMatch = matchedIndices[matchIndex] = true;\r\n                break;\r\n            }\r\n            matchIndex++;\r\n        }\r\n        if (!hasMatch) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Whether the TypedArray instances are equal in value.\r\n */\r\nfunction areTypedArraysEqual(a, b) {\r\n    var index = a.length;\r\n    if (b.length !== index) {\r\n        return false;\r\n    }\r\n    while (index-- > 0) {\r\n        if (a[index] !== b[index]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Whether the URL instances are equal in value.\r\n */\r\nfunction areUrlsEqual(a, b) {\r\n    return (a.hostname === b.hostname &&\r\n        a.pathname === b.pathname &&\r\n        a.protocol === b.protocol &&\r\n        a.port === b.port &&\r\n        a.hash === b.hash &&\r\n        a.username === b.username &&\r\n        a.password === b.password);\r\n}\r\nfunction isPropertyEqual(a, b, state, property) {\r\n    if ((property === REACT_OWNER ||\r\n        property === PREACT_OWNER ||\r\n        property === PREACT_VNODE) &&\r\n        (a.$$typeof || b.$$typeof)) {\r\n        return true;\r\n    }\r\n    return (hasOwn(b, property) &&\r\n        state.equals(a[property], b[property], property, property, a, b, state));\r\n}\r\n\r\nvar ARGUMENTS_TAG = '[object Arguments]';\r\nvar BOOLEAN_TAG = '[object Boolean]';\r\nvar DATE_TAG = '[object Date]';\r\nvar ERROR_TAG = '[object Error]';\r\nvar MAP_TAG = '[object Map]';\r\nvar NUMBER_TAG = '[object Number]';\r\nvar OBJECT_TAG = '[object Object]';\r\nvar REG_EXP_TAG = '[object RegExp]';\r\nvar SET_TAG = '[object Set]';\r\nvar STRING_TAG = '[object String]';\r\nvar URL_TAG = '[object URL]';\r\nvar isArray = Array.isArray;\r\nvar isTypedArray = typeof ArrayBuffer === 'function' && ArrayBuffer.isView\r\n    ? ArrayBuffer.isView\r\n    : null;\r\nvar assign = Object.assign;\r\nvar getTag = Object.prototype.toString.call.bind(Object.prototype.toString);\r\n/**\r\n * Create a comparator method based on the type-specific equality comparators passed.\r\n */\r\nfunction createEqualityComparator(_a) {\r\n    var areArraysEqual = _a.areArraysEqual, areDatesEqual = _a.areDatesEqual, areErrorsEqual = _a.areErrorsEqual, areFunctionsEqual = _a.areFunctionsEqual, areMapsEqual = _a.areMapsEqual, areNumbersEqual = _a.areNumbersEqual, areObjectsEqual = _a.areObjectsEqual, arePrimitiveWrappersEqual = _a.arePrimitiveWrappersEqual, areRegExpsEqual = _a.areRegExpsEqual, areSetsEqual = _a.areSetsEqual, areTypedArraysEqual = _a.areTypedArraysEqual, areUrlsEqual = _a.areUrlsEqual;\r\n    /**\r\n     * compare the value of the two objects and return true if they are equivalent in values\r\n     */\r\n    return function comparator(a, b, state) {\r\n        // If the items are strictly equal, no need to do a value comparison.\r\n        if (a === b) {\r\n            return true;\r\n        }\r\n        // If either of the items are nullish and fail the strictly equal check\r\n        // above, then they must be unequal.\r\n        if (a == null || b == null) {\r\n            return false;\r\n        }\r\n        var type = typeof a;\r\n        if (type !== typeof b) {\r\n            return false;\r\n        }\r\n        if (type !== 'object') {\r\n            if (type === 'number') {\r\n                return areNumbersEqual(a, b, state);\r\n            }\r\n            if (type === 'function') {\r\n                return areFunctionsEqual(a, b, state);\r\n            }\r\n            // If a primitive value that is not strictly equal, it must be unequal.\r\n            return false;\r\n        }\r\n        var constructor = a.constructor;\r\n        // Checks are listed in order of commonality of use-case:\r\n        //   1. Common complex object types (plain object, array)\r\n        //   2. Common data values (date, regexp)\r\n        //   3. Less-common complex object types (map, set)\r\n        //   4. Less-common data values (promise, primitive wrappers)\r\n        // Inherently this is both subjective and assumptive, however\r\n        // when reviewing comparable libraries in the wild this order\r\n        // appears to be generally consistent.\r\n        // Constructors should match, otherwise there is potential for false positives\r\n        // between class and subclass or custom object and POJO.\r\n        if (constructor !== b.constructor) {\r\n            return false;\r\n        }\r\n        // `isPlainObject` only checks against the object's own realm. Cross-realm\r\n        // comparisons are rare, and will be handled in the ultimate fallback, so\r\n        // we can avoid capturing the string tag.\r\n        if (constructor === Object) {\r\n            return areObjectsEqual(a, b, state);\r\n        }\r\n        // `isArray()` works on subclasses and is cross-realm, so we can avoid capturing\r\n        // the string tag or doing an `instanceof` check.\r\n        if (isArray(a)) {\r\n            return areArraysEqual(a, b, state);\r\n        }\r\n        // `isTypedArray()` works on all possible TypedArray classes, so we can avoid\r\n        // capturing the string tag or comparing against all possible constructors.\r\n        if (isTypedArray != null && isTypedArray(a)) {\r\n            return areTypedArraysEqual(a, b, state);\r\n        }\r\n        // Try to fast-path equality checks for other complex object types in the\r\n        // same realm to avoid capturing the string tag. Strict equality is used\r\n        // instead of `instanceof` because it is more performant for the common\r\n        // use-case. If someone is subclassing a native class, it will be handled\r\n        // with the string tag comparison.\r\n        if (constructor === Date) {\r\n            return areDatesEqual(a, b, state);\r\n        }\r\n        if (constructor === RegExp) {\r\n            return areRegExpsEqual(a, b, state);\r\n        }\r\n        if (constructor === Map) {\r\n            return areMapsEqual(a, b, state);\r\n        }\r\n        if (constructor === Set) {\r\n            return areSetsEqual(a, b, state);\r\n        }\r\n        // Since this is a custom object, capture the string tag to determing its type.\r\n        // This is reasonably performant in modern environments like v8 and SpiderMonkey.\r\n        var tag = getTag(a);\r\n        if (tag === DATE_TAG) {\r\n            return areDatesEqual(a, b, state);\r\n        }\r\n        // For RegExp, the properties are not enumerable, and therefore will give false positives if\r\n        // tested like a standard object.\r\n        if (tag === REG_EXP_TAG) {\r\n            return areRegExpsEqual(a, b, state);\r\n        }\r\n        if (tag === MAP_TAG) {\r\n            return areMapsEqual(a, b, state);\r\n        }\r\n        if (tag === SET_TAG) {\r\n            return areSetsEqual(a, b, state);\r\n        }\r\n        if (tag === OBJECT_TAG) {\r\n            // The exception for value comparison is custom `Promise`-like class instances. These should\r\n            // be treated the same as standard `Promise` objects, which means strict equality, and if\r\n            // it reaches this point then that strict equality comparison has already failed.\r\n            return (typeof a.then !== 'function' &&\r\n                typeof b.then !== 'function' &&\r\n                areObjectsEqual(a, b, state));\r\n        }\r\n        // If a URL tag, it should be tested explicitly. Like RegExp, the properties are not\r\n        // enumerable, and therefore will give false positives if tested like a standard object.\r\n        if (tag === URL_TAG) {\r\n            return areUrlsEqual(a, b, state);\r\n        }\r\n        // If an error tag, it should be tested explicitly. Like RegExp, the properties are not\r\n        // enumerable, and therefore will give false positives if tested like a standard object.\r\n        if (tag === ERROR_TAG) {\r\n            return areErrorsEqual(a, b, state);\r\n        }\r\n        // If an arguments tag, it should be treated as a standard object.\r\n        if (tag === ARGUMENTS_TAG) {\r\n            return areObjectsEqual(a, b, state);\r\n        }\r\n        // As the penultimate fallback, check if the values passed are primitive wrappers. This\r\n        // is very rare in modern JS, which is why it is deprioritized compared to all other object\r\n        // types.\r\n        if (tag === BOOLEAN_TAG || tag === NUMBER_TAG || tag === STRING_TAG) {\r\n            return arePrimitiveWrappersEqual(a, b, state);\r\n        }\r\n        // If not matching any tags that require a specific type of comparison, then we hard-code false because\r\n        // the only thing remaining is strict equality, which has already been compared. This is for a few reasons:\r\n        //   - Certain types that cannot be introspected (e.g., `WeakMap`). For these types, this is the only\r\n        //     comparison that can be made.\r\n        //   - For types that can be introspected, but rarely have requirements to be compared\r\n        //     (`ArrayBuffer`, `DataView`, etc.), the cost is avoided to prioritize the common\r\n        //     use-cases (may be included in a future release, if requested enough).\r\n        //   - For types that can be introspected but do not have an objective definition of what\r\n        //     equality is (`Error`, etc.), the subjective decision is to be conservative and strictly compare.\r\n        // In all cases, these decisions should be reevaluated based on changes to the language and\r\n        // common development practices.\r\n        return false;\r\n    };\r\n}\r\n/**\r\n * Create the configuration object used for building comparators.\r\n */\r\nfunction createEqualityComparatorConfig(_a) {\r\n    var circular = _a.circular, createCustomConfig = _a.createCustomConfig, strict = _a.strict;\r\n    var config = {\r\n        areArraysEqual: strict\r\n            ? areObjectsEqualStrict\r\n            : areArraysEqual,\r\n        areDatesEqual: areDatesEqual,\r\n        areErrorsEqual: areErrorsEqual,\r\n        areFunctionsEqual: areFunctionsEqual,\r\n        areMapsEqual: strict\r\n            ? combineComparators(areMapsEqual, areObjectsEqualStrict)\r\n            : areMapsEqual,\r\n        areNumbersEqual: areNumbersEqual,\r\n        areObjectsEqual: strict\r\n            ? areObjectsEqualStrict\r\n            : areObjectsEqual,\r\n        arePrimitiveWrappersEqual: arePrimitiveWrappersEqual,\r\n        areRegExpsEqual: areRegExpsEqual,\r\n        areSetsEqual: strict\r\n            ? combineComparators(areSetsEqual, areObjectsEqualStrict)\r\n            : areSetsEqual,\r\n        areTypedArraysEqual: strict\r\n            ? areObjectsEqualStrict\r\n            : areTypedArraysEqual,\r\n        areUrlsEqual: areUrlsEqual,\r\n    };\r\n    if (createCustomConfig) {\r\n        config = assign({}, config, createCustomConfig(config));\r\n    }\r\n    if (circular) {\r\n        var areArraysEqual$1 = createIsCircular(config.areArraysEqual);\r\n        var areMapsEqual$1 = createIsCircular(config.areMapsEqual);\r\n        var areObjectsEqual$1 = createIsCircular(config.areObjectsEqual);\r\n        var areSetsEqual$1 = createIsCircular(config.areSetsEqual);\r\n        config = assign({}, config, {\r\n            areArraysEqual: areArraysEqual$1,\r\n            areMapsEqual: areMapsEqual$1,\r\n            areObjectsEqual: areObjectsEqual$1,\r\n            areSetsEqual: areSetsEqual$1,\r\n        });\r\n    }\r\n    return config;\r\n}\r\n/**\r\n * Default equality comparator pass-through, used as the standard `isEqual` creator for\r\n * use inside the built comparator.\r\n */\r\nfunction createInternalEqualityComparator(compare) {\r\n    return function (a, b, _indexOrKeyA, _indexOrKeyB, _parentA, _parentB, state) {\r\n        return compare(a, b, state);\r\n    };\r\n}\r\n/**\r\n * Create the `isEqual` function used by the consuming application.\r\n */\r\nfunction createIsEqual(_a) {\r\n    var circular = _a.circular, comparator = _a.comparator, createState = _a.createState, equals = _a.equals, strict = _a.strict;\r\n    if (createState) {\r\n        return function isEqual(a, b) {\r\n            var _a = createState(), _b = _a.cache, cache = _b === void 0 ? circular ? new WeakMap() : undefined : _b, meta = _a.meta;\r\n            return comparator(a, b, {\r\n                cache: cache,\r\n                equals: equals,\r\n                meta: meta,\r\n                strict: strict,\r\n            });\r\n        };\r\n    }\r\n    if (circular) {\r\n        return function isEqual(a, b) {\r\n            return comparator(a, b, {\r\n                cache: new WeakMap(),\r\n                equals: equals,\r\n                meta: undefined,\r\n                strict: strict,\r\n            });\r\n        };\r\n    }\r\n    var state = {\r\n        cache: undefined,\r\n        equals: equals,\r\n        meta: undefined,\r\n        strict: strict,\r\n    };\r\n    return function isEqual(a, b) {\r\n        return comparator(a, b, state);\r\n    };\r\n}\r\n\r\n/**\r\n * Whether the items passed are deeply-equal in value.\r\n */\r\nvar deepEqual = createCustomEqual();\r\n/**\r\n * Whether the items passed are deeply-equal in value based on strict comparison.\r\n */\r\nvar strictDeepEqual = createCustomEqual({ strict: true });\r\n/**\r\n * Whether the items passed are deeply-equal in value, including circular references.\r\n */\r\nvar circularDeepEqual = createCustomEqual({ circular: true });\r\n/**\r\n * Whether the items passed are deeply-equal in value, including circular references,\r\n * based on strict comparison.\r\n */\r\nvar strictCircularDeepEqual = createCustomEqual({\r\n    circular: true,\r\n    strict: true,\r\n});\r\n/**\r\n * Whether the items passed are shallowly-equal in value.\r\n */\r\nvar shallowEqual = createCustomEqual({\r\n    createInternalComparator: function () { return sameValueZeroEqual; },\r\n});\r\n/**\r\n * Whether the items passed are shallowly-equal in value based on strict comparison\r\n */\r\nvar strictShallowEqual = createCustomEqual({\r\n    strict: true,\r\n    createInternalComparator: function () { return sameValueZeroEqual; },\r\n});\r\n/**\r\n * Whether the items passed are shallowly-equal in value, including circular references.\r\n */\r\nvar circularShallowEqual = createCustomEqual({\r\n    circular: true,\r\n    createInternalComparator: function () { return sameValueZeroEqual; },\r\n});\r\n/**\r\n * Whether the items passed are shallowly-equal in value, including circular references,\r\n * based on strict comparison.\r\n */\r\nvar strictCircularShallowEqual = createCustomEqual({\r\n    circular: true,\r\n    createInternalComparator: function () { return sameValueZeroEqual; },\r\n    strict: true,\r\n});\r\n/**\r\n * Create a custom equality comparison method.\r\n *\r\n * This can be done to create very targeted comparisons in extreme hot-path scenarios\r\n * where the standard methods are not performant enough, but can also be used to provide\r\n * support for legacy environments that do not support expected features like\r\n * `RegExp.prototype.flags` out of the box.\r\n */\r\nfunction createCustomEqual(options) {\r\n    if (options === void 0) { options = {}; }\r\n    var _a = options.circular, circular = _a === void 0 ? false : _a, createCustomInternalComparator = options.createInternalComparator, createState = options.createState, _b = options.strict, strict = _b === void 0 ? false : _b;\r\n    var config = createEqualityComparatorConfig(options);\r\n    var comparator = createEqualityComparator(config);\r\n    var equals = createCustomInternalComparator\r\n        ? createCustomInternalComparator(comparator)\r\n        : createInternalEqualityComparator(comparator);\r\n    return createIsEqual({ circular: circular, comparator: comparator, createState: createState, equals: equals, strict: strict });\r\n}\r\n\r\n\r\n//# sourceMappingURL=index.mjs.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fast-equals/dist/esm/index.mjs\n");

/***/ })

};
;