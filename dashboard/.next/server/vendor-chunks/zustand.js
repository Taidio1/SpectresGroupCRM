"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/zustand";
exports.ids = ["vendor-chunks/zustand"];
exports.modules = {

/***/ "(ssr)/./node_modules/zustand/esm/middleware.mjs":
/*!*************************************************!*\
  !*** ./node_modules/zustand/esm/middleware.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   combine: () => (/* binding */ combine),\n/* harmony export */   createJSONStorage: () => (/* binding */ createJSONStorage),\n/* harmony export */   devtools: () => (/* binding */ devtools),\n/* harmony export */   persist: () => (/* binding */ persist),\n/* harmony export */   redux: () => (/* binding */ redux),\n/* harmony export */   subscribeWithSelector: () => (/* binding */ subscribeWithSelector)\n/* harmony export */ });\nconst reduxImpl = (reducer, initial) => (set, _get, api) => {\r\n  api.dispatch = (action) => {\r\n    set((state) => reducer(state, action), false, action);\r\n    return action;\r\n  };\r\n  api.dispatchFromDevtools = true;\r\n  return { dispatch: (...args) => api.dispatch(...args), ...initial };\r\n};\r\nconst redux = reduxImpl;\r\n\r\nconst trackedConnections = /* @__PURE__ */ new Map();\r\nconst getTrackedConnectionState = (name) => {\r\n  const api = trackedConnections.get(name);\r\n  if (!api) return {};\r\n  return Object.fromEntries(\r\n    Object.entries(api.stores).map(([key, api2]) => [key, api2.getState()])\r\n  );\r\n};\r\nconst extractConnectionInformation = (store, extensionConnector, options) => {\r\n  if (store === void 0) {\r\n    return {\r\n      type: \"untracked\",\r\n      connection: extensionConnector.connect(options)\r\n    };\r\n  }\r\n  const existingConnection = trackedConnections.get(options.name);\r\n  if (existingConnection) {\r\n    return { type: \"tracked\", store, ...existingConnection };\r\n  }\r\n  const newConnection = {\r\n    connection: extensionConnector.connect(options),\r\n    stores: {}\r\n  };\r\n  trackedConnections.set(options.name, newConnection);\r\n  return { type: \"tracked\", store, ...newConnection };\r\n};\r\nconst removeStoreFromTrackedConnections = (name, store) => {\r\n  if (store === void 0) return;\r\n  const connectionInfo = trackedConnections.get(name);\r\n  if (!connectionInfo) return;\r\n  delete connectionInfo.stores[store];\r\n  if (Object.keys(connectionInfo.stores).length === 0) {\r\n    trackedConnections.delete(name);\r\n  }\r\n};\r\nconst findCallerName = (stack) => {\r\n  var _a, _b;\r\n  if (!stack) return void 0;\r\n  const traceLines = stack.split(\"\\n\");\r\n  const apiSetStateLineIndex = traceLines.findIndex(\r\n    (traceLine) => traceLine.includes(\"api.setState\")\r\n  );\r\n  if (apiSetStateLineIndex < 0) return void 0;\r\n  const callerLine = ((_a = traceLines[apiSetStateLineIndex + 1]) == null ? void 0 : _a.trim()) || \"\";\r\n  return (_b = /.+ (.+) .+/.exec(callerLine)) == null ? void 0 : _b[1];\r\n};\r\nconst devtoolsImpl = (fn, devtoolsOptions = {}) => (set, get, api) => {\r\n  const { enabled, anonymousActionType, store, ...options } = devtoolsOptions;\r\n  let extensionConnector;\r\n  try {\r\n    extensionConnector = (enabled != null ? enabled : ( false ? 0 : void 0) !== \"production\") && window.__REDUX_DEVTOOLS_EXTENSION__;\r\n  } catch (e) {\r\n  }\r\n  if (!extensionConnector) {\r\n    return fn(set, get, api);\r\n  }\r\n  const { connection, ...connectionInformation } = extractConnectionInformation(store, extensionConnector, options);\r\n  let isRecording = true;\r\n  api.setState = (state, replace, nameOrAction) => {\r\n    const r = set(state, replace);\r\n    if (!isRecording) return r;\r\n    const inferredActionType = findCallerName(new Error().stack);\r\n    const action = nameOrAction === void 0 ? { type: anonymousActionType || inferredActionType || \"anonymous\" } : typeof nameOrAction === \"string\" ? { type: nameOrAction } : nameOrAction;\r\n    if (store === void 0) {\r\n      connection == null ? void 0 : connection.send(action, get());\r\n      return r;\r\n    }\r\n    connection == null ? void 0 : connection.send(\r\n      {\r\n        ...action,\r\n        type: `${store}/${action.type}`\r\n      },\r\n      {\r\n        ...getTrackedConnectionState(options.name),\r\n        [store]: api.getState()\r\n      }\r\n    );\r\n    return r;\r\n  };\r\n  api.devtools = {\r\n    cleanup: () => {\r\n      if (connection && typeof connection.unsubscribe === \"function\") {\r\n        connection.unsubscribe();\r\n      }\r\n      removeStoreFromTrackedConnections(options.name, store);\r\n    }\r\n  };\r\n  const setStateFromDevtools = (...a) => {\r\n    const originalIsRecording = isRecording;\r\n    isRecording = false;\r\n    set(...a);\r\n    isRecording = originalIsRecording;\r\n  };\r\n  const initialState = fn(api.setState, get, api);\r\n  if (connectionInformation.type === \"untracked\") {\r\n    connection == null ? void 0 : connection.init(initialState);\r\n  } else {\r\n    connectionInformation.stores[connectionInformation.store] = api;\r\n    connection == null ? void 0 : connection.init(\r\n      Object.fromEntries(\r\n        Object.entries(connectionInformation.stores).map(([key, store2]) => [\r\n          key,\r\n          key === connectionInformation.store ? initialState : store2.getState()\r\n        ])\r\n      )\r\n    );\r\n  }\r\n  if (api.dispatchFromDevtools && typeof api.dispatch === \"function\") {\r\n    let didWarnAboutReservedActionType = false;\r\n    const originalDispatch = api.dispatch;\r\n    api.dispatch = (...args) => {\r\n      if (( false ? 0 : void 0) !== \"production\" && args[0].type === \"__setState\" && !didWarnAboutReservedActionType) {\r\n        console.warn(\r\n          '[zustand devtools middleware] \"__setState\" action type is reserved to set state from the devtools. Avoid using it.'\r\n        );\r\n        didWarnAboutReservedActionType = true;\r\n      }\r\n      originalDispatch(...args);\r\n    };\r\n  }\r\n  connection.subscribe((message) => {\r\n    var _a;\r\n    switch (message.type) {\r\n      case \"ACTION\":\r\n        if (typeof message.payload !== \"string\") {\r\n          console.error(\r\n            \"[zustand devtools middleware] Unsupported action format\"\r\n          );\r\n          return;\r\n        }\r\n        return parseJsonThen(\r\n          message.payload,\r\n          (action) => {\r\n            if (action.type === \"__setState\") {\r\n              if (store === void 0) {\r\n                setStateFromDevtools(action.state);\r\n                return;\r\n              }\r\n              if (Object.keys(action.state).length !== 1) {\r\n                console.error(\r\n                  `\r\n                    [zustand devtools middleware] Unsupported __setState action format.\r\n                    When using 'store' option in devtools(), the 'state' should have only one key, which is a value of 'store' that was passed in devtools(),\r\n                    and value of this only key should be a state object. Example: { \"type\": \"__setState\", \"state\": { \"abc123Store\": { \"foo\": \"bar\" } } }\r\n                    `\r\n                );\r\n              }\r\n              const stateFromDevtools = action.state[store];\r\n              if (stateFromDevtools === void 0 || stateFromDevtools === null) {\r\n                return;\r\n              }\r\n              if (JSON.stringify(api.getState()) !== JSON.stringify(stateFromDevtools)) {\r\n                setStateFromDevtools(stateFromDevtools);\r\n              }\r\n              return;\r\n            }\r\n            if (!api.dispatchFromDevtools) return;\r\n            if (typeof api.dispatch !== \"function\") return;\r\n            api.dispatch(action);\r\n          }\r\n        );\r\n      case \"DISPATCH\":\r\n        switch (message.payload.type) {\r\n          case \"RESET\":\r\n            setStateFromDevtools(initialState);\r\n            if (store === void 0) {\r\n              return connection == null ? void 0 : connection.init(api.getState());\r\n            }\r\n            return connection == null ? void 0 : connection.init(getTrackedConnectionState(options.name));\r\n          case \"COMMIT\":\r\n            if (store === void 0) {\r\n              connection == null ? void 0 : connection.init(api.getState());\r\n              return;\r\n            }\r\n            return connection == null ? void 0 : connection.init(getTrackedConnectionState(options.name));\r\n          case \"ROLLBACK\":\r\n            return parseJsonThen(message.state, (state) => {\r\n              if (store === void 0) {\r\n                setStateFromDevtools(state);\r\n                connection == null ? void 0 : connection.init(api.getState());\r\n                return;\r\n              }\r\n              setStateFromDevtools(state[store]);\r\n              connection == null ? void 0 : connection.init(getTrackedConnectionState(options.name));\r\n            });\r\n          case \"JUMP_TO_STATE\":\r\n          case \"JUMP_TO_ACTION\":\r\n            return parseJsonThen(message.state, (state) => {\r\n              if (store === void 0) {\r\n                setStateFromDevtools(state);\r\n                return;\r\n              }\r\n              if (JSON.stringify(api.getState()) !== JSON.stringify(state[store])) {\r\n                setStateFromDevtools(state[store]);\r\n              }\r\n            });\r\n          case \"IMPORT_STATE\": {\r\n            const { nextLiftedState } = message.payload;\r\n            const lastComputedState = (_a = nextLiftedState.computedStates.slice(-1)[0]) == null ? void 0 : _a.state;\r\n            if (!lastComputedState) return;\r\n            if (store === void 0) {\r\n              setStateFromDevtools(lastComputedState);\r\n            } else {\r\n              setStateFromDevtools(lastComputedState[store]);\r\n            }\r\n            connection == null ? void 0 : connection.send(\r\n              null,\r\n              // FIXME no-any\r\n              nextLiftedState\r\n            );\r\n            return;\r\n          }\r\n          case \"PAUSE_RECORDING\":\r\n            return isRecording = !isRecording;\r\n        }\r\n        return;\r\n    }\r\n  });\r\n  return initialState;\r\n};\r\nconst devtools = devtoolsImpl;\r\nconst parseJsonThen = (stringified, fn) => {\r\n  let parsed;\r\n  try {\r\n    parsed = JSON.parse(stringified);\r\n  } catch (e) {\r\n    console.error(\r\n      \"[zustand devtools middleware] Could not parse the received json\",\r\n      e\r\n    );\r\n  }\r\n  if (parsed !== void 0) fn(parsed);\r\n};\r\n\r\nconst subscribeWithSelectorImpl = (fn) => (set, get, api) => {\r\n  const origSubscribe = api.subscribe;\r\n  api.subscribe = (selector, optListener, options) => {\r\n    let listener = selector;\r\n    if (optListener) {\r\n      const equalityFn = (options == null ? void 0 : options.equalityFn) || Object.is;\r\n      let currentSlice = selector(api.getState());\r\n      listener = (state) => {\r\n        const nextSlice = selector(state);\r\n        if (!equalityFn(currentSlice, nextSlice)) {\r\n          const previousSlice = currentSlice;\r\n          optListener(currentSlice = nextSlice, previousSlice);\r\n        }\r\n      };\r\n      if (options == null ? void 0 : options.fireImmediately) {\r\n        optListener(currentSlice, currentSlice);\r\n      }\r\n    }\r\n    return origSubscribe(listener);\r\n  };\r\n  const initialState = fn(set, get, api);\r\n  return initialState;\r\n};\r\nconst subscribeWithSelector = subscribeWithSelectorImpl;\r\n\r\nfunction combine(initialState, create) {\r\n  return (...args) => Object.assign({}, initialState, create(...args));\r\n}\r\n\r\nfunction createJSONStorage(getStorage, options) {\r\n  let storage;\r\n  try {\r\n    storage = getStorage();\r\n  } catch (e) {\r\n    return;\r\n  }\r\n  const persistStorage = {\r\n    getItem: (name) => {\r\n      var _a;\r\n      const parse = (str2) => {\r\n        if (str2 === null) {\r\n          return null;\r\n        }\r\n        return JSON.parse(str2, options == null ? void 0 : options.reviver);\r\n      };\r\n      const str = (_a = storage.getItem(name)) != null ? _a : null;\r\n      if (str instanceof Promise) {\r\n        return str.then(parse);\r\n      }\r\n      return parse(str);\r\n    },\r\n    setItem: (name, newValue) => storage.setItem(name, JSON.stringify(newValue, options == null ? void 0 : options.replacer)),\r\n    removeItem: (name) => storage.removeItem(name)\r\n  };\r\n  return persistStorage;\r\n}\r\nconst toThenable = (fn) => (input) => {\r\n  try {\r\n    const result = fn(input);\r\n    if (result instanceof Promise) {\r\n      return result;\r\n    }\r\n    return {\r\n      then(onFulfilled) {\r\n        return toThenable(onFulfilled)(result);\r\n      },\r\n      catch(_onRejected) {\r\n        return this;\r\n      }\r\n    };\r\n  } catch (e) {\r\n    return {\r\n      then(_onFulfilled) {\r\n        return this;\r\n      },\r\n      catch(onRejected) {\r\n        return toThenable(onRejected)(e);\r\n      }\r\n    };\r\n  }\r\n};\r\nconst persistImpl = (config, baseOptions) => (set, get, api) => {\r\n  let options = {\r\n    storage: createJSONStorage(() => localStorage),\r\n    partialize: (state) => state,\r\n    version: 0,\r\n    merge: (persistedState, currentState) => ({\r\n      ...currentState,\r\n      ...persistedState\r\n    }),\r\n    ...baseOptions\r\n  };\r\n  let hasHydrated = false;\r\n  const hydrationListeners = /* @__PURE__ */ new Set();\r\n  const finishHydrationListeners = /* @__PURE__ */ new Set();\r\n  let storage = options.storage;\r\n  if (!storage) {\r\n    return config(\r\n      (...args) => {\r\n        console.warn(\r\n          `[zustand persist middleware] Unable to update item '${options.name}', the given storage is currently unavailable.`\r\n        );\r\n        set(...args);\r\n      },\r\n      get,\r\n      api\r\n    );\r\n  }\r\n  const setItem = () => {\r\n    const state = options.partialize({ ...get() });\r\n    return storage.setItem(options.name, {\r\n      state,\r\n      version: options.version\r\n    });\r\n  };\r\n  const savedSetState = api.setState;\r\n  api.setState = (state, replace) => {\r\n    savedSetState(state, replace);\r\n    void setItem();\r\n  };\r\n  const configResult = config(\r\n    (...args) => {\r\n      set(...args);\r\n      void setItem();\r\n    },\r\n    get,\r\n    api\r\n  );\r\n  api.getInitialState = () => configResult;\r\n  let stateFromStorage;\r\n  const hydrate = () => {\r\n    var _a, _b;\r\n    if (!storage) return;\r\n    hasHydrated = false;\r\n    hydrationListeners.forEach((cb) => {\r\n      var _a2;\r\n      return cb((_a2 = get()) != null ? _a2 : configResult);\r\n    });\r\n    const postRehydrationCallback = ((_b = options.onRehydrateStorage) == null ? void 0 : _b.call(options, (_a = get()) != null ? _a : configResult)) || void 0;\r\n    return toThenable(storage.getItem.bind(storage))(options.name).then((deserializedStorageValue) => {\r\n      if (deserializedStorageValue) {\r\n        if (typeof deserializedStorageValue.version === \"number\" && deserializedStorageValue.version !== options.version) {\r\n          if (options.migrate) {\r\n            const migration = options.migrate(\r\n              deserializedStorageValue.state,\r\n              deserializedStorageValue.version\r\n            );\r\n            if (migration instanceof Promise) {\r\n              return migration.then((result) => [true, result]);\r\n            }\r\n            return [true, migration];\r\n          }\r\n          console.error(\r\n            `State loaded from storage couldn't be migrated since no migrate function was provided`\r\n          );\r\n        } else {\r\n          return [false, deserializedStorageValue.state];\r\n        }\r\n      }\r\n      return [false, void 0];\r\n    }).then((migrationResult) => {\r\n      var _a2;\r\n      const [migrated, migratedState] = migrationResult;\r\n      stateFromStorage = options.merge(\r\n        migratedState,\r\n        (_a2 = get()) != null ? _a2 : configResult\r\n      );\r\n      set(stateFromStorage, true);\r\n      if (migrated) {\r\n        return setItem();\r\n      }\r\n    }).then(() => {\r\n      postRehydrationCallback == null ? void 0 : postRehydrationCallback(stateFromStorage, void 0);\r\n      stateFromStorage = get();\r\n      hasHydrated = true;\r\n      finishHydrationListeners.forEach((cb) => cb(stateFromStorage));\r\n    }).catch((e) => {\r\n      postRehydrationCallback == null ? void 0 : postRehydrationCallback(void 0, e);\r\n    });\r\n  };\r\n  api.persist = {\r\n    setOptions: (newOptions) => {\r\n      options = {\r\n        ...options,\r\n        ...newOptions\r\n      };\r\n      if (newOptions.storage) {\r\n        storage = newOptions.storage;\r\n      }\r\n    },\r\n    clearStorage: () => {\r\n      storage == null ? void 0 : storage.removeItem(options.name);\r\n    },\r\n    getOptions: () => options,\r\n    rehydrate: () => hydrate(),\r\n    hasHydrated: () => hasHydrated,\r\n    onHydrate: (cb) => {\r\n      hydrationListeners.add(cb);\r\n      return () => {\r\n        hydrationListeners.delete(cb);\r\n      };\r\n    },\r\n    onFinishHydration: (cb) => {\r\n      finishHydrationListeners.add(cb);\r\n      return () => {\r\n        finishHydrationListeners.delete(cb);\r\n      };\r\n    }\r\n  };\r\n  if (!options.skipHydration) {\r\n    hydrate();\r\n  }\r\n  return stateFromStorage || configResult;\r\n};\r\nconst persist = persistImpl;\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/zustand/esm/middleware.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/zustand/esm/react.mjs":
/*!********************************************!*\
  !*** ./node_modules/zustand/esm/react.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   useStore: () => (/* binding */ useStore)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var zustand_vanilla__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zustand/vanilla */ \"(ssr)/./node_modules/zustand/esm/vanilla.mjs\");\n\r\n\r\n\r\nconst identity = (arg) => arg;\r\nfunction useStore(api, selector = identity) {\r\n  const slice = react__WEBPACK_IMPORTED_MODULE_0__.useSyncExternalStore(\r\n    api.subscribe,\r\n    () => selector(api.getState()),\r\n    () => selector(api.getInitialState())\r\n  );\r\n  react__WEBPACK_IMPORTED_MODULE_0__.useDebugValue(slice);\r\n  return slice;\r\n}\r\nconst createImpl = (createState) => {\r\n  const api = (0,zustand_vanilla__WEBPACK_IMPORTED_MODULE_1__.createStore)(createState);\r\n  const useBoundStore = (selector) => useStore(api, selector);\r\n  Object.assign(useBoundStore, api);\r\n  return useBoundStore;\r\n};\r\nconst create = (createState) => createState ? createImpl(createState) : createImpl;\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvenVzdGFuZC9lc20vcmVhY3QubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBMEI7QUFDb0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHVEQUEwQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsZ0RBQW1CO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLGNBQWMsNERBQVc7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzRCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGtrYWNwXFxEZXNrdG9wXFxTcGVjcmVzQ1JNdjJcXFNwZWN0cmVzR3JvdXBDUk1cXGRhc2hib2FyZFxcbm9kZV9tb2R1bGVzXFx6dXN0YW5kXFxlc21cXHJlYWN0Lm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBjcmVhdGVTdG9yZSB9IGZyb20gJ3p1c3RhbmQvdmFuaWxsYSc7XHJcblxyXG5jb25zdCBpZGVudGl0eSA9IChhcmcpID0+IGFyZztcclxuZnVuY3Rpb24gdXNlU3RvcmUoYXBpLCBzZWxlY3RvciA9IGlkZW50aXR5KSB7XHJcbiAgY29uc3Qgc2xpY2UgPSBSZWFjdC51c2VTeW5jRXh0ZXJuYWxTdG9yZShcclxuICAgIGFwaS5zdWJzY3JpYmUsXHJcbiAgICAoKSA9PiBzZWxlY3RvcihhcGkuZ2V0U3RhdGUoKSksXHJcbiAgICAoKSA9PiBzZWxlY3RvcihhcGkuZ2V0SW5pdGlhbFN0YXRlKCkpXHJcbiAgKTtcclxuICBSZWFjdC51c2VEZWJ1Z1ZhbHVlKHNsaWNlKTtcclxuICByZXR1cm4gc2xpY2U7XHJcbn1cclxuY29uc3QgY3JlYXRlSW1wbCA9IChjcmVhdGVTdGF0ZSkgPT4ge1xyXG4gIGNvbnN0IGFwaSA9IGNyZWF0ZVN0b3JlKGNyZWF0ZVN0YXRlKTtcclxuICBjb25zdCB1c2VCb3VuZFN0b3JlID0gKHNlbGVjdG9yKSA9PiB1c2VTdG9yZShhcGksIHNlbGVjdG9yKTtcclxuICBPYmplY3QuYXNzaWduKHVzZUJvdW5kU3RvcmUsIGFwaSk7XHJcbiAgcmV0dXJuIHVzZUJvdW5kU3RvcmU7XHJcbn07XHJcbmNvbnN0IGNyZWF0ZSA9IChjcmVhdGVTdGF0ZSkgPT4gY3JlYXRlU3RhdGUgPyBjcmVhdGVJbXBsKGNyZWF0ZVN0YXRlKSA6IGNyZWF0ZUltcGw7XHJcblxyXG5leHBvcnQgeyBjcmVhdGUsIHVzZVN0b3JlIH07XHJcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/zustand/esm/react.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/zustand/esm/vanilla.mjs":
/*!**********************************************!*\
  !*** ./node_modules/zustand/esm/vanilla.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createStore: () => (/* binding */ createStore)\n/* harmony export */ });\nconst createStoreImpl = (createState) => {\r\n  let state;\r\n  const listeners = /* @__PURE__ */ new Set();\r\n  const setState = (partial, replace) => {\r\n    const nextState = typeof partial === \"function\" ? partial(state) : partial;\r\n    if (!Object.is(nextState, state)) {\r\n      const previousState = state;\r\n      state = (replace != null ? replace : typeof nextState !== \"object\" || nextState === null) ? nextState : Object.assign({}, state, nextState);\r\n      listeners.forEach((listener) => listener(state, previousState));\r\n    }\r\n  };\r\n  const getState = () => state;\r\n  const getInitialState = () => initialState;\r\n  const subscribe = (listener) => {\r\n    listeners.add(listener);\r\n    return () => listeners.delete(listener);\r\n  };\r\n  const api = { setState, getState, getInitialState, subscribe };\r\n  const initialState = state = createState(setState, getState, api);\r\n  return api;\r\n};\r\nconst createStore = (createState) => createState ? createStoreImpl(createState) : createStoreImpl;\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvenVzdGFuZC9lc20vdmFuaWxsYS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEhBQThIO0FBQzlIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3VCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGtrYWNwXFxEZXNrdG9wXFxTcGVjcmVzQ1JNdjJcXFNwZWN0cmVzR3JvdXBDUk1cXGRhc2hib2FyZFxcbm9kZV9tb2R1bGVzXFx6dXN0YW5kXFxlc21cXHZhbmlsbGEubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNyZWF0ZVN0b3JlSW1wbCA9IChjcmVhdGVTdGF0ZSkgPT4ge1xyXG4gIGxldCBzdGF0ZTtcclxuICBjb25zdCBsaXN0ZW5lcnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpO1xyXG4gIGNvbnN0IHNldFN0YXRlID0gKHBhcnRpYWwsIHJlcGxhY2UpID0+IHtcclxuICAgIGNvbnN0IG5leHRTdGF0ZSA9IHR5cGVvZiBwYXJ0aWFsID09PSBcImZ1bmN0aW9uXCIgPyBwYXJ0aWFsKHN0YXRlKSA6IHBhcnRpYWw7XHJcbiAgICBpZiAoIU9iamVjdC5pcyhuZXh0U3RhdGUsIHN0YXRlKSkge1xyXG4gICAgICBjb25zdCBwcmV2aW91c1N0YXRlID0gc3RhdGU7XHJcbiAgICAgIHN0YXRlID0gKHJlcGxhY2UgIT0gbnVsbCA/IHJlcGxhY2UgOiB0eXBlb2YgbmV4dFN0YXRlICE9PSBcIm9iamVjdFwiIHx8IG5leHRTdGF0ZSA9PT0gbnVsbCkgPyBuZXh0U3RhdGUgOiBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwgbmV4dFN0YXRlKTtcclxuICAgICAgbGlzdGVuZXJzLmZvckVhY2goKGxpc3RlbmVyKSA9PiBsaXN0ZW5lcihzdGF0ZSwgcHJldmlvdXNTdGF0ZSkpO1xyXG4gICAgfVxyXG4gIH07XHJcbiAgY29uc3QgZ2V0U3RhdGUgPSAoKSA9PiBzdGF0ZTtcclxuICBjb25zdCBnZXRJbml0aWFsU3RhdGUgPSAoKSA9PiBpbml0aWFsU3RhdGU7XHJcbiAgY29uc3Qgc3Vic2NyaWJlID0gKGxpc3RlbmVyKSA9PiB7XHJcbiAgICBsaXN0ZW5lcnMuYWRkKGxpc3RlbmVyKTtcclxuICAgIHJldHVybiAoKSA9PiBsaXN0ZW5lcnMuZGVsZXRlKGxpc3RlbmVyKTtcclxuICB9O1xyXG4gIGNvbnN0IGFwaSA9IHsgc2V0U3RhdGUsIGdldFN0YXRlLCBnZXRJbml0aWFsU3RhdGUsIHN1YnNjcmliZSB9O1xyXG4gIGNvbnN0IGluaXRpYWxTdGF0ZSA9IHN0YXRlID0gY3JlYXRlU3RhdGUoc2V0U3RhdGUsIGdldFN0YXRlLCBhcGkpO1xyXG4gIHJldHVybiBhcGk7XHJcbn07XHJcbmNvbnN0IGNyZWF0ZVN0b3JlID0gKGNyZWF0ZVN0YXRlKSA9PiBjcmVhdGVTdGF0ZSA/IGNyZWF0ZVN0b3JlSW1wbChjcmVhdGVTdGF0ZSkgOiBjcmVhdGVTdG9yZUltcGw7XHJcblxyXG5leHBvcnQgeyBjcmVhdGVTdG9yZSB9O1xyXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/zustand/esm/vanilla.mjs\n");

/***/ })

};
;