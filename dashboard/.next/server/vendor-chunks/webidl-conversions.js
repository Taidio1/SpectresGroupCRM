"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/webidl-conversions";
exports.ids = ["vendor-chunks/webidl-conversions"];
exports.modules = {

/***/ "(rsc)/./node_modules/webidl-conversions/lib/index.js":
/*!******************************************************!*\
  !*** ./node_modules/webidl-conversions/lib/index.js ***!
  \******************************************************/
/***/ ((module) => {

eval("\r\n\r\nvar conversions = {};\r\nmodule.exports = conversions;\r\n\r\nfunction sign(x) {\r\n    return x < 0 ? -1 : 1;\r\n}\r\n\r\nfunction evenRound(x) {\r\n    // Round x to the nearest integer, choosing the even integer if it lies halfway between two.\r\n    if ((x % 1) === 0.5 && (x & 1) === 0) { // [even number].5; round down (i.e. floor)\r\n        return Math.floor(x);\r\n    } else {\r\n        return Math.round(x);\r\n    }\r\n}\r\n\r\nfunction createNumberConversion(bitLength, typeOpts) {\r\n    if (!typeOpts.unsigned) {\r\n        --bitLength;\r\n    }\r\n    const lowerBound = typeOpts.unsigned ? 0 : -Math.pow(2, bitLength);\r\n    const upperBound = Math.pow(2, bitLength) - 1;\r\n\r\n    const moduloVal = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength) : Math.pow(2, bitLength);\r\n    const moduloBound = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength - 1) : Math.pow(2, bitLength - 1);\r\n\r\n    return function(V, opts) {\r\n        if (!opts) opts = {};\r\n\r\n        let x = +V;\r\n\r\n        if (opts.enforceRange) {\r\n            if (!Number.isFinite(x)) {\r\n                throw new TypeError(\"Argument is not a finite number\");\r\n            }\r\n\r\n            x = sign(x) * Math.floor(Math.abs(x));\r\n            if (x < lowerBound || x > upperBound) {\r\n                throw new TypeError(\"Argument is not in byte range\");\r\n            }\r\n\r\n            return x;\r\n        }\r\n\r\n        if (!isNaN(x) && opts.clamp) {\r\n            x = evenRound(x);\r\n\r\n            if (x < lowerBound) x = lowerBound;\r\n            if (x > upperBound) x = upperBound;\r\n            return x;\r\n        }\r\n\r\n        if (!Number.isFinite(x) || x === 0) {\r\n            return 0;\r\n        }\r\n\r\n        x = sign(x) * Math.floor(Math.abs(x));\r\n        x = x % moduloVal;\r\n\r\n        if (!typeOpts.unsigned && x >= moduloBound) {\r\n            return x - moduloVal;\r\n        } else if (typeOpts.unsigned) {\r\n            if (x < 0) {\r\n              x += moduloVal;\r\n            } else if (x === -0) { // don't return negative zero\r\n              return 0;\r\n            }\r\n        }\r\n\r\n        return x;\r\n    }\r\n}\r\n\r\nconversions[\"void\"] = function () {\r\n    return undefined;\r\n};\r\n\r\nconversions[\"boolean\"] = function (val) {\r\n    return !!val;\r\n};\r\n\r\nconversions[\"byte\"] = createNumberConversion(8, { unsigned: false });\r\nconversions[\"octet\"] = createNumberConversion(8, { unsigned: true });\r\n\r\nconversions[\"short\"] = createNumberConversion(16, { unsigned: false });\r\nconversions[\"unsigned short\"] = createNumberConversion(16, { unsigned: true });\r\n\r\nconversions[\"long\"] = createNumberConversion(32, { unsigned: false });\r\nconversions[\"unsigned long\"] = createNumberConversion(32, { unsigned: true });\r\n\r\nconversions[\"long long\"] = createNumberConversion(32, { unsigned: false, moduloBitLength: 64 });\r\nconversions[\"unsigned long long\"] = createNumberConversion(32, { unsigned: true, moduloBitLength: 64 });\r\n\r\nconversions[\"double\"] = function (V) {\r\n    const x = +V;\r\n\r\n    if (!Number.isFinite(x)) {\r\n        throw new TypeError(\"Argument is not a finite floating-point value\");\r\n    }\r\n\r\n    return x;\r\n};\r\n\r\nconversions[\"unrestricted double\"] = function (V) {\r\n    const x = +V;\r\n\r\n    if (isNaN(x)) {\r\n        throw new TypeError(\"Argument is NaN\");\r\n    }\r\n\r\n    return x;\r\n};\r\n\r\n// not quite valid, but good enough for JS\r\nconversions[\"float\"] = conversions[\"double\"];\r\nconversions[\"unrestricted float\"] = conversions[\"unrestricted double\"];\r\n\r\nconversions[\"DOMString\"] = function (V, opts) {\r\n    if (!opts) opts = {};\r\n\r\n    if (opts.treatNullAsEmptyString && V === null) {\r\n        return \"\";\r\n    }\r\n\r\n    return String(V);\r\n};\r\n\r\nconversions[\"ByteString\"] = function (V, opts) {\r\n    const x = String(V);\r\n    let c = undefined;\r\n    for (let i = 0; (c = x.codePointAt(i)) !== undefined; ++i) {\r\n        if (c > 255) {\r\n            throw new TypeError(\"Argument is not a valid bytestring\");\r\n        }\r\n    }\r\n\r\n    return x;\r\n};\r\n\r\nconversions[\"USVString\"] = function (V) {\r\n    const S = String(V);\r\n    const n = S.length;\r\n    const U = [];\r\n    for (let i = 0; i < n; ++i) {\r\n        const c = S.charCodeAt(i);\r\n        if (c < 0xD800 || c > 0xDFFF) {\r\n            U.push(String.fromCodePoint(c));\r\n        } else if (0xDC00 <= c && c <= 0xDFFF) {\r\n            U.push(String.fromCodePoint(0xFFFD));\r\n        } else {\r\n            if (i === n - 1) {\r\n                U.push(String.fromCodePoint(0xFFFD));\r\n            } else {\r\n                const d = S.charCodeAt(i + 1);\r\n                if (0xDC00 <= d && d <= 0xDFFF) {\r\n                    const a = c & 0x3FF;\r\n                    const b = d & 0x3FF;\r\n                    U.push(String.fromCodePoint((2 << 15) + (2 << 9) * a + b));\r\n                    ++i;\r\n                } else {\r\n                    U.push(String.fromCodePoint(0xFFFD));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return U.join('');\r\n};\r\n\r\nconversions[\"Date\"] = function (V, opts) {\r\n    if (!(V instanceof Date)) {\r\n        throw new TypeError(\"Argument is not a Date object\");\r\n    }\r\n    if (isNaN(V)) {\r\n        return undefined;\r\n    }\r\n\r\n    return V;\r\n};\r\n\r\nconversions[\"RegExp\"] = function (V, opts) {\r\n    if (!(V instanceof RegExp)) {\r\n        V = new RegExp(V);\r\n    }\r\n\r\n    return V;\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/webidl-conversions/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/webidl-conversions/lib/index.js":
/*!******************************************************!*\
  !*** ./node_modules/webidl-conversions/lib/index.js ***!
  \******************************************************/
/***/ ((module) => {

eval("\r\n\r\nvar conversions = {};\r\nmodule.exports = conversions;\r\n\r\nfunction sign(x) {\r\n    return x < 0 ? -1 : 1;\r\n}\r\n\r\nfunction evenRound(x) {\r\n    // Round x to the nearest integer, choosing the even integer if it lies halfway between two.\r\n    if ((x % 1) === 0.5 && (x & 1) === 0) { // [even number].5; round down (i.e. floor)\r\n        return Math.floor(x);\r\n    } else {\r\n        return Math.round(x);\r\n    }\r\n}\r\n\r\nfunction createNumberConversion(bitLength, typeOpts) {\r\n    if (!typeOpts.unsigned) {\r\n        --bitLength;\r\n    }\r\n    const lowerBound = typeOpts.unsigned ? 0 : -Math.pow(2, bitLength);\r\n    const upperBound = Math.pow(2, bitLength) - 1;\r\n\r\n    const moduloVal = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength) : Math.pow(2, bitLength);\r\n    const moduloBound = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength - 1) : Math.pow(2, bitLength - 1);\r\n\r\n    return function(V, opts) {\r\n        if (!opts) opts = {};\r\n\r\n        let x = +V;\r\n\r\n        if (opts.enforceRange) {\r\n            if (!Number.isFinite(x)) {\r\n                throw new TypeError(\"Argument is not a finite number\");\r\n            }\r\n\r\n            x = sign(x) * Math.floor(Math.abs(x));\r\n            if (x < lowerBound || x > upperBound) {\r\n                throw new TypeError(\"Argument is not in byte range\");\r\n            }\r\n\r\n            return x;\r\n        }\r\n\r\n        if (!isNaN(x) && opts.clamp) {\r\n            x = evenRound(x);\r\n\r\n            if (x < lowerBound) x = lowerBound;\r\n            if (x > upperBound) x = upperBound;\r\n            return x;\r\n        }\r\n\r\n        if (!Number.isFinite(x) || x === 0) {\r\n            return 0;\r\n        }\r\n\r\n        x = sign(x) * Math.floor(Math.abs(x));\r\n        x = x % moduloVal;\r\n\r\n        if (!typeOpts.unsigned && x >= moduloBound) {\r\n            return x - moduloVal;\r\n        } else if (typeOpts.unsigned) {\r\n            if (x < 0) {\r\n              x += moduloVal;\r\n            } else if (x === -0) { // don't return negative zero\r\n              return 0;\r\n            }\r\n        }\r\n\r\n        return x;\r\n    }\r\n}\r\n\r\nconversions[\"void\"] = function () {\r\n    return undefined;\r\n};\r\n\r\nconversions[\"boolean\"] = function (val) {\r\n    return !!val;\r\n};\r\n\r\nconversions[\"byte\"] = createNumberConversion(8, { unsigned: false });\r\nconversions[\"octet\"] = createNumberConversion(8, { unsigned: true });\r\n\r\nconversions[\"short\"] = createNumberConversion(16, { unsigned: false });\r\nconversions[\"unsigned short\"] = createNumberConversion(16, { unsigned: true });\r\n\r\nconversions[\"long\"] = createNumberConversion(32, { unsigned: false });\r\nconversions[\"unsigned long\"] = createNumberConversion(32, { unsigned: true });\r\n\r\nconversions[\"long long\"] = createNumberConversion(32, { unsigned: false, moduloBitLength: 64 });\r\nconversions[\"unsigned long long\"] = createNumberConversion(32, { unsigned: true, moduloBitLength: 64 });\r\n\r\nconversions[\"double\"] = function (V) {\r\n    const x = +V;\r\n\r\n    if (!Number.isFinite(x)) {\r\n        throw new TypeError(\"Argument is not a finite floating-point value\");\r\n    }\r\n\r\n    return x;\r\n};\r\n\r\nconversions[\"unrestricted double\"] = function (V) {\r\n    const x = +V;\r\n\r\n    if (isNaN(x)) {\r\n        throw new TypeError(\"Argument is NaN\");\r\n    }\r\n\r\n    return x;\r\n};\r\n\r\n// not quite valid, but good enough for JS\r\nconversions[\"float\"] = conversions[\"double\"];\r\nconversions[\"unrestricted float\"] = conversions[\"unrestricted double\"];\r\n\r\nconversions[\"DOMString\"] = function (V, opts) {\r\n    if (!opts) opts = {};\r\n\r\n    if (opts.treatNullAsEmptyString && V === null) {\r\n        return \"\";\r\n    }\r\n\r\n    return String(V);\r\n};\r\n\r\nconversions[\"ByteString\"] = function (V, opts) {\r\n    const x = String(V);\r\n    let c = undefined;\r\n    for (let i = 0; (c = x.codePointAt(i)) !== undefined; ++i) {\r\n        if (c > 255) {\r\n            throw new TypeError(\"Argument is not a valid bytestring\");\r\n        }\r\n    }\r\n\r\n    return x;\r\n};\r\n\r\nconversions[\"USVString\"] = function (V) {\r\n    const S = String(V);\r\n    const n = S.length;\r\n    const U = [];\r\n    for (let i = 0; i < n; ++i) {\r\n        const c = S.charCodeAt(i);\r\n        if (c < 0xD800 || c > 0xDFFF) {\r\n            U.push(String.fromCodePoint(c));\r\n        } else if (0xDC00 <= c && c <= 0xDFFF) {\r\n            U.push(String.fromCodePoint(0xFFFD));\r\n        } else {\r\n            if (i === n - 1) {\r\n                U.push(String.fromCodePoint(0xFFFD));\r\n            } else {\r\n                const d = S.charCodeAt(i + 1);\r\n                if (0xDC00 <= d && d <= 0xDFFF) {\r\n                    const a = c & 0x3FF;\r\n                    const b = d & 0x3FF;\r\n                    U.push(String.fromCodePoint((2 << 15) + (2 << 9) * a + b));\r\n                    ++i;\r\n                } else {\r\n                    U.push(String.fromCodePoint(0xFFFD));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return U.join('');\r\n};\r\n\r\nconversions[\"Date\"] = function (V, opts) {\r\n    if (!(V instanceof Date)) {\r\n        throw new TypeError(\"Argument is not a Date object\");\r\n    }\r\n    if (isNaN(V)) {\r\n        return undefined;\r\n    }\r\n\r\n    return V;\r\n};\r\n\r\nconversions[\"RegExp\"] = function (V, opts) {\r\n    if (!(V instanceof RegExp)) {\r\n        V = new RegExp(V);\r\n    }\r\n\r\n    return V;\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/webidl-conversions/lib/index.js\n");

/***/ })

};
;