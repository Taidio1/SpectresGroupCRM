"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/calendar/page",{

/***/ "(app-pages-browser)/./lib/supabase.ts":
/*!*************************!*\
  !*** ./lib/supabase.ts ***!
  \*************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   activityLogsApi: () => (/* binding */ activityLogsApi),\n/* harmony export */   authApi: () => (/* binding */ authApi),\n/* harmony export */   callsApi: () => (/* binding */ callsApi),\n/* harmony export */   clientsApi: () => (/* binding */ clientsApi),\n/* harmony export */   csvImportApi: () => (/* binding */ csvImportApi),\n/* harmony export */   dashboardApi: () => (/* binding */ dashboardApi),\n/* harmony export */   getAvatarUrl: () => (/* binding */ getAvatarUrl),\n/* harmony export */   getCanvasClientsWithPriority: () => (/* binding */ getCanvasClientsWithPriority),\n/* harmony export */   getCanvasStatusColor: () => (/* binding */ getCanvasStatusColor),\n/* harmony export */   locationsApi: () => (/* binding */ locationsApi),\n/* harmony export */   notificationsApi: () => (/* binding */ notificationsApi),\n/* harmony export */   performanceApi: () => (/* binding */ performanceApi),\n/* harmony export */   permissionsApi: () => (/* binding */ permissionsApi),\n/* harmony export */   reportsApi: () => (/* binding */ reportsApi),\n/* harmony export */   storageApi: () => (/* binding */ storageApi),\n/* harmony export */   supabase: () => (/* binding */ supabase),\n/* harmony export */   teamApi: () => (/* binding */ teamApi)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(app-pages-browser)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\nconst supabaseUrl = \"https://pkhuggdkcglicghgxiyp.supabase.co\" || 0;\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBraHVnZ2RrY2dsaWNnaGd4aXlwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDk5MTEwNzEsImV4cCI6MjA2NTQ4NzA3MX0.LbWtb-modRDlvnkGF5IswRHe1lJpd4zCMgkQ3_E0QQk\" || 0;\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey);\n// Funkcja pomocnicza do generowania poprawnych URL-i avatarów z Supabase Storage\nconst getAvatarUrl = (avatarUrl)=>{\n    if (!avatarUrl) return null;\n    // Jeśli to już pełny URL (zaczyna się od http), zwróć bez zmian\n    if (avatarUrl.startsWith('http')) {\n        return avatarUrl;\n    }\n    // Jeśli to ścieżka w bucket'u (zawiera folder), wygeneruj publiczny URL\n    if (avatarUrl.includes('/')) {\n        try {\n            const { data } = supabase.storage.from('avatars').getPublicUrl(avatarUrl);\n            return data.publicUrl;\n        } catch (error) {\n            console.error('Błąd generowania URL avatara:', error);\n            return null;\n        }\n    }\n    // Fallback - prawdopodobnie niepoprawny format\n    console.warn('Nierozpoznany format avatar_url:', avatarUrl);\n    return null;\n};\n// Storage API dla plików CSV\nconst storageApi = {\n    // Upload pliku CSV do bucket\n    async uploadCSV (file, user) {\n        try {\n            // Oczyszczenie nazwy pliku z problematycznych znaków\n            const cleanFileName = file.name.replace(/[^a-zA-Z0-9.-]/g, '_') // Zastąp wszystkie znaki specjalne podkreśleniami\n            .replace(/_{2,}/g, '_') // Zamień wielokrotne podkreślenia na pojedyncze\n            .replace(/^_+|_+$/g, '') // Usuń podkreślenia z początku i końca\n            .toLowerCase() // Małe litery dla consistency\n            ;\n            const fileName = \"\".concat(user.id, \"_\").concat(Date.now(), \"_\").concat(cleanFileName);\n            const filePath = \"csv-imports/\".concat(fileName);\n            console.log(\"\\uD83D\\uDCC1 Uploading CSV: \".concat(filePath));\n            console.log(\"\\uD83D\\uDCC1 Original filename: \".concat(file.name));\n            console.log(\"\\uD83D\\uDCC1 Cleaned filename: \".concat(cleanFileName));\n            const { data, error } = await supabase.storage.from('csv-files').upload(filePath, file, {\n                cacheControl: '3600',\n                upsert: false\n            });\n            if (error) {\n                console.error('❌ Storage upload error:', error);\n                throw new Error(\"Błąd uploadu: \".concat(error.message));\n            }\n            console.log('✅ File uploaded successfully:', data.path);\n            return data.path;\n        } catch (error) {\n            console.error('❌ Upload failed:', error);\n            throw error;\n        }\n    },\n    // Pobierz publiczny URL pliku\n    getPublicUrl (path) {\n        const { data } = supabase.storage.from('csv-files').getPublicUrl(path);\n        return data.publicUrl;\n    },\n    // Usuń plik z bucket\n    async deleteFile (path) {\n        const { error } = await supabase.storage.from('csv-files').remove([\n            path\n        ]);\n        if (error) {\n            console.error('❌ File deletion error:', error);\n            throw new Error(\"Błąd usuwania pliku: \".concat(error.message));\n        }\n    }\n};\n// CSV Import API\nconst csvImportApi = {\n    // Parsuj CSV i zwróć dane\n    parseCSV (csvText) {\n        const lines = csvText.split('\\n').filter((line)=>line.trim() !== '');\n        if (lines.length < 2) {\n            throw new Error('Plik CSV jest pusty lub zawiera tylko nagłówki');\n        }\n        // Parsowanie z obsługą cudzysłowów\n        const parseCSVLine = (line)=>{\n            const result = [];\n            let current = '';\n            let inQuotes = false;\n            for(let i = 0; i < line.length; i++){\n                const char = line[i];\n                if (char === '\"') {\n                    inQuotes = !inQuotes;\n                } else if (char === ',' && !inQuotes) {\n                    result.push(current.trim());\n                    current = '';\n                } else {\n                    current += char;\n                }\n            }\n            result.push(current.trim());\n            return result.map((cell)=>cell.replace(/^\"|\"$/g, '')) // Usuń cudzysłowy\n            ;\n        };\n        const headers = parseCSVLine(lines[0]);\n        const rows = lines.slice(1).map(parseCSVLine);\n        return {\n            headers,\n            rows\n        };\n    },\n    // Mapuj nagłówki CSV na pola bazy danych\n    mapHeaders (headers) {\n        const mapping = {};\n        const fieldMappings = [\n            {\n                fields: [\n                    'first_name',\n                    'imię',\n                    'name',\n                    'firstName'\n                ],\n                dbField: 'first_name'\n            },\n            {\n                fields: [\n                    'last_name',\n                    'nazwisko',\n                    'surname',\n                    'lastName'\n                ],\n                dbField: 'last_name'\n            },\n            {\n                fields: [\n                    'company_name',\n                    'firma',\n                    'company',\n                    'companyName',\n                    'nazwa'\n                ],\n                dbField: 'company_name'\n            },\n            {\n                fields: [\n                    'nip',\n                    'tax_id',\n                    'taxId'\n                ],\n                dbField: 'nip'\n            },\n            {\n                fields: [\n                    'phone',\n                    'telefon',\n                    'telephone'\n                ],\n                dbField: 'phone'\n            },\n            {\n                fields: [\n                    'email',\n                    'e-mail',\n                    'mail'\n                ],\n                dbField: 'email'\n            },\n            {\n                fields: [\n                    'website',\n                    'www',\n                    'strona',\n                    'url'\n                ],\n                dbField: 'website'\n            },\n            {\n                fields: [\n                    'notes',\n                    'notatka',\n                    'note',\n                    'comment'\n                ],\n                dbField: 'notes'\n            },\n            {\n                fields: [\n                    'status'\n                ],\n                dbField: 'status'\n            }\n        ];\n        for (const fieldMapping of fieldMappings){\n            for(let i = 0; i < headers.length; i++){\n                const header = headers[i].toLowerCase().trim();\n                if (fieldMapping.fields.some((field)=>header.includes(field))) {\n                    mapping[fieldMapping.dbField] = i;\n                    break;\n                }\n            }\n        }\n        return mapping;\n    },\n    // Waliduj wymagane pola\n    validateRequiredFields (mapping) {\n        const requiredFields = [\n            'company_name'\n        ];\n        const missingFields = requiredFields.filter((field)=>!(field in mapping));\n        if (missingFields.length > 0) {\n            throw new Error(\"Brak wymaganych kolumn: \".concat(missingFields.join(', '), \". Wymagane: Firma/Nazwa\"));\n        }\n    },\n    // Sprawdź dostępne kolumny i pokaż informacje\n    analyzeColumns (mapping, headers) {\n        const allPossibleFields = [\n            {\n                field: 'first_name',\n                displayName: 'Imię',\n                required: false\n            },\n            {\n                field: 'last_name',\n                displayName: 'Nazwisko',\n                required: false\n            },\n            {\n                field: 'company_name',\n                displayName: 'Firma/Nazwa',\n                required: true\n            },\n            {\n                field: 'phone',\n                displayName: 'Telefon',\n                required: false\n            },\n            {\n                field: 'email',\n                displayName: 'Email',\n                required: false\n            },\n            {\n                field: 'nip',\n                displayName: 'NIP',\n                required: false\n            },\n            {\n                field: 'website',\n                displayName: 'Strona WWW',\n                required: false\n            },\n            {\n                field: 'notes',\n                displayName: 'Notatki',\n                required: false\n            },\n            {\n                field: 'status',\n                displayName: 'Status',\n                required: false\n            }\n        ];\n        const found = [];\n        const missing = [];\n        const optional = [];\n        allPossibleFields.forEach((param)=>{\n            let { field, displayName, required } = param;\n            if (field in mapping) {\n                found.push(displayName);\n            } else if (required) {\n                missing.push(displayName);\n            } else {\n                optional.push(displayName);\n            }\n        });\n        return {\n            found,\n            missing,\n            optional\n        };\n    },\n    // Przekształć wiersz CSV na obiekt klienta\n    rowToClient (row, mapping, user, locationId) {\n        const getField = function(field) {\n            let defaultValue = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 'brak informacji';\n            const index = mapping[field];\n            if (index === undefined) {\n                return defaultValue;\n            }\n            const value = (row[index] || '').trim();\n            return value === '' ? defaultValue : value;\n        };\n        // Walidacja statusu\n        const rawStatus = getField('status', 'canvas').toLowerCase();\n        const validStatuses = [\n            'canvas',\n            'brak_kontaktu',\n            'nie_zainteresowany',\n            'zdenerwowany',\n            'antysale',\n            'sale',\n            '$$'\n        ];\n        const status = validStatuses.includes(rawStatus) ? rawStatus : 'canvas';\n        return {\n            first_name: getField('first_name'),\n            last_name: getField('last_name'),\n            company_name: getField('company_name', ''),\n            nip: getField('nip'),\n            phone: getField('phone'),\n            email: getField('email'),\n            website: getField('website'),\n            notes: getField('notes'),\n            status,\n            edited_by: user.id,\n            edited_at: new Date().toISOString(),\n            owner_id: user.id,\n            location_id: locationId || user.location_id,\n            last_edited_by_name: user.full_name,\n            last_edited_by_avatar_url: user.avatar_url\n        };\n    },\n    // Import pełnego CSV do bazy danych\n    async importCSV (file, user, locationId, onProgress) {\n        try {\n            onProgress === null || onProgress === void 0 ? void 0 : onProgress({\n                current: 0,\n                total: 100,\n                status: 'Uploading pliku...'\n            });\n            // 1. Upload pliku do Storage\n            const filePath = await storageApi.uploadCSV(file, user);\n            onProgress === null || onProgress === void 0 ? void 0 : onProgress({\n                current: 20,\n                total: 100,\n                status: 'Parsowanie CSV...'\n            });\n            // 2. Czytanie i parsowanie CSV\n            const csvText = await file.text();\n            const { headers, rows } = csvImportApi.parseCSV(csvText);\n            onProgress === null || onProgress === void 0 ? void 0 : onProgress({\n                current: 40,\n                total: 100,\n                status: 'Mapowanie kolumn...'\n            });\n            // 3. Mapowanie nagłówków\n            const mapping = csvImportApi.mapHeaders(headers);\n            csvImportApi.validateRequiredFields(mapping);\n            // 4. Analiza dostępnych kolumn\n            const columnAnalysis = csvImportApi.analyzeColumns(mapping, headers);\n            console.log('📊 CSV Headers:', headers);\n            console.log('📊 Field mapping:', mapping);\n            console.log('📊 Rows to import:', rows.length);\n            console.log('✅ Znalezione kolumny:', columnAnalysis.found);\n            console.log('❌ Brakujące wymagane:', columnAnalysis.missing);\n            console.log('⚪ Opcjonalne (będą \"brak informacji\"):', columnAnalysis.optional);\n            onProgress === null || onProgress === void 0 ? void 0 : onProgress({\n                current: 50,\n                total: 100,\n                status: \"Importowanie \".concat(rows.length, \" klient\\xf3w...\")\n            });\n            // 4. Import wierszy do bazy\n            const results = {\n                success: 0,\n                errors: []\n            };\n            for(let i = 0; i < rows.length; i++){\n                try {\n                    const row = rows[i];\n                    // Sprawdź czy wiersz nie jest pusty\n                    if (row.every((cell)=>cell.trim() === '')) {\n                        continue;\n                    }\n                    const clientData = csvImportApi.rowToClient(row, mapping, user, locationId);\n                    // Walidacja podstawowych danych\n                    if (!clientData.company_name || clientData.company_name.trim() === '') {\n                        results.errors.push({\n                            row: i + 2,\n                            error: 'Brak wymaganych danych: firma/nazwa',\n                            data: row\n                        });\n                        continue;\n                    }\n                    // Dodaj klienta do bazy\n                    await clientsApi.createClient(clientData, user);\n                    results.success++;\n                    // Aktualizuj progress\n                    const progress = 50 + Math.floor(i / rows.length * 40);\n                    onProgress === null || onProgress === void 0 ? void 0 : onProgress({\n                        current: progress,\n                        total: 100,\n                        status: \"Zaimportowano \".concat(results.success, \"/\").concat(rows.length, \" klient\\xf3w\")\n                    });\n                } catch (error) {\n                    console.error(\"❌ Błąd importu wiersza \".concat(i + 2, \":\"), error);\n                    results.errors.push({\n                        row: i + 2,\n                        error: error instanceof Error ? error.message : 'Nieznany błąd',\n                        data: rows[i]\n                    });\n                }\n            }\n            onProgress === null || onProgress === void 0 ? void 0 : onProgress({\n                current: 95,\n                total: 100,\n                status: 'Finalizowanie...'\n            });\n            // 5. Opcjonalnie usuń plik z Storage (lub zachowaj dla historii)\n            // await storageApi.deleteFile(filePath)\n            onProgress === null || onProgress === void 0 ? void 0 : onProgress({\n                current: 100,\n                total: 100,\n                status: 'Zakończono!'\n            });\n            console.log(\"✅ Import zakończony: \".concat(results.success, \" sukces, \").concat(results.errors.length, \" błęd\\xf3w\"));\n            return results;\n        } catch (error) {\n            console.error('❌ CSV Import failed:', error);\n            throw error;\n        }\n    }\n};\n// Funkcje sprawdzania uprawnień z hierarchią i lokalizacją\nconst permissionsApi = {\n    // Sprawdź czy użytkownik może widzieć klienta (zgodnie z RLS)\n    canView: (client, user)=>{\n        // Szef i admin widzą wszystko\n        if ([\n            'szef',\n            'admin'\n        ].includes(user.role)) {\n            return true;\n        }\n        // Sprawdź czy klient jest w tej samej lokalizacji co użytkownik\n        const sameLocation = client.location_id === user.location_id;\n        if (!sameLocation) {\n            return false;\n        }\n        switch(user.role){\n            case 'pracownik':\n                // Pracownik widzi tylko swoich klientów w swojej lokalizacji\n                return client.owner_id === user.id || client.owner_id === null || client.edited_by === user.id;\n            case 'junior_manager':\n            case 'manager':\n            case 'project_manager':\n                // Menedżerowie widzą wszystkich klientów w swojej lokalizacji\n                return true;\n            default:\n                return false;\n        }\n    },\n    // Sprawdź czy użytkownik może edytować klienta\n    canEdit: (client, user)=>{\n        // Takie same reguły jak canView\n        return permissionsApi.canView(client, user);\n    },\n    // Sprawdź czy użytkownik może usunąć klienta\n    canDelete: (client, user)=>{\n        // Szef i admin mogą usuwać wszystko\n        if ([\n            'szef',\n            'admin'\n        ].includes(user.role)) {\n            return true;\n        }\n        // Menedżerowie mogą usuwać w swojej lokalizacji\n        if ([\n            'manager',\n            'project_manager',\n            'junior_manager'\n        ].includes(user.role)) {\n            return client.location_id === user.location_id;\n        }\n        // Pracownicy nie mogą usuwać\n        return false;\n    },\n    // Sprawdź czy użytkownik może przypisywać klientów\n    canAssignClients: (user)=>{\n        return [\n            'manager',\n            'project_manager',\n            'junior_manager',\n            'szef',\n            'admin'\n        ].includes(user.role);\n    },\n    // Sprawdź czy użytkownik może zmieniać role innych użytkowników\n    canChangeRoles: (user)=>{\n        return [\n            'szef',\n            'admin'\n        ].includes(user.role);\n    },\n    // Sprawdź czy użytkownik może dostęp do zaawansowanych raportów\n    canAccessAdvancedReports: (user)=>{\n        return [\n            'manager',\n            'project_manager',\n            'junior_manager',\n            'szef',\n            'admin'\n        ].includes(user.role);\n    },\n    // Sprawdź czy użytkownik może widzieć wszystkie lokalizacje\n    canViewAllLocations: (user)=>{\n        return [\n            'szef',\n            'admin'\n        ].includes(user.role);\n    },\n    // Sprawdź czy użytkownik może filtrować po lokalizacjach\n    canFilterByLocation: (user)=>{\n        return [\n            'project_manager',\n            'junior_manager',\n            'szef',\n            'admin'\n        ].includes(user.role);\n    },\n    // Sprawdź poziom hierarchii - czy user1 może zarządzać user2\n    canManageUser: (user1, user2)=>{\n        // Admin może zarządzać wszystkimi\n        if (user1.role === 'admin') return true;\n        // Szef może zarządzać wszystkimi oprócz adminów\n        if (user1.role === 'szef' && user2.role !== 'admin') return true;\n        // Inni mogą zarządzać tylko podwładnymi w tej samej lokalizacji\n        const sameLocation = user1.location_id === user2.location_id;\n        const higherInHierarchy = (user1.role_hierarchy_level || 99) < (user2.role_hierarchy_level || 99);\n        return sameLocation && higherInHierarchy;\n    }\n};\n// Funkcje API dla klientów z systemem uprawnień\nconst clientsApi = {\n    // Funkcja testowa - podstawowe zapytanie do klientów\n    async testBasicQuery () {\n        try {\n            console.log('🔍 Testowe zapytanie do tabeli clients...');\n            const { data, error } = await supabase.from('clients').select('*').limit(5);\n            console.log('Wynik testu - data:', data);\n            console.log('Wynik testu - error:', error);\n            return {\n                data,\n                error\n            };\n        } catch (error) {\n            console.error('Błąd testowego zapytania:', error);\n            return {\n                data: null,\n                error\n            };\n        }\n    },\n    // Pobierz klientów z filtrami uprawnień\n    // 🚀 NOWE: Funkcja z paginacją zwracająca obiekt z metadanymi\n    async getClientsPaginated (user, filters) {\n        try {\n            console.log('🔄 Rozpoczynam pobieranie klientów dla użytkownika:', user.id, user.role);\n            // Użyj JOIN aby pobrać klientów z danymi właścicieli i lokalizacji w jednym zapytaniu\n            // 🚀 OPTYMALIZACJA: Wybierz tylko niezbędne pola + lokalizacja + reminder\n            let query = supabase.from('clients').select(\"\\n          id,\\n          first_name,\\n          last_name,\\n          company_name,\\n          nip,\\n          phone,\\n          email,\\n          website,\\n          status,\\n          notes,\\n          reminder,\\n          owner_id,\\n          location_id,\\n          edited_by,\\n          edited_at,\\n          created_at,\\n          updated_at,\\n          status_changed_at,\\n          last_phone_click,\\n          last_edited_by_name,\\n          last_edited_by_avatar_url,\\n          owner:users!owner_id (\\n            id,\\n            full_name,\\n            email,\\n            avatar_url\\n          ),\\n          location:locations!location_id (\\n            id,\\n            name,\\n            code,\\n            currency,\\n            timezone\\n          )\\n        \", {\n                count: 'exact'\n            });\n            // 🚀 SORTOWANIE: Obsługa dynamicznego sortowania\n            const sortField = (filters === null || filters === void 0 ? void 0 : filters.sortBy) || 'updated_at';\n            const isAscending = (filters === null || filters === void 0 ? void 0 : filters.sortDirection) === 'asc';\n            query = query.order(sortField, {\n                ascending: isAscending\n            });\n            // Dodatkowe filtry\n            if (filters === null || filters === void 0 ? void 0 : filters.date) {\n                query = query.gte('updated_at', filters.date);\n            }\n            if (filters === null || filters === void 0 ? void 0 : filters.status) {\n                query = query.eq('status', filters.status);\n            }\n            if (filters === null || filters === void 0 ? void 0 : filters.employee) {\n                query = query.eq('edited_by', filters.employee);\n            }\n            // 🚀 NOWE: Filtr wyszukiwania\n            if (filters === null || filters === void 0 ? void 0 : filters.search) {\n                const searchTerm = filters.search.toLowerCase();\n                query = query.or(\"first_name.ilike.%\".concat(searchTerm, \"%,last_name.ilike.%\").concat(searchTerm, \"%,company_name.ilike.%\").concat(searchTerm, \"%,phone.ilike.%\").concat(searchTerm, \"%,email.ilike.%\").concat(searchTerm, \"%\"));\n            }\n            // 🚀 NOWE: Filtr lokalizacji\n            if (filters === null || filters === void 0 ? void 0 : filters.location) {\n                query = query.eq('location_id', filters.location);\n            }\n            // 🚀 NOWE: Paginacja\n            if ((filters === null || filters === void 0 ? void 0 : filters.page) && (filters === null || filters === void 0 ? void 0 : filters.pageSize)) {\n                const from = (filters.page - 1) * filters.pageSize;\n                const to = from + filters.pageSize - 1;\n                query = query.range(from, to);\n                console.log(\"\\uD83D\\uDCC4 Paginacja: strona \".concat(filters.page, \", rozmiar \").concat(filters.pageSize, \", zakres: \").concat(from, \"-\").concat(to));\n            }\n            console.log('🔄 Wykonuję zapytanie z JOIN i liczeniem...');\n            const { data: clients, error, count } = await query;\n            if (error) {\n                console.error('❌ Błąd zapytania clients:', error);\n                throw error;\n            }\n            if (!clients || clients.length === 0) {\n                console.log('ℹ️ Brak klientów w bazie danych');\n                return {\n                    clients: [],\n                    total: 0,\n                    page: (filters === null || filters === void 0 ? void 0 : filters.page) || 1,\n                    pageSize: (filters === null || filters === void 0 ? void 0 : filters.pageSize) || 0\n                };\n            }\n            // Przekształć dane - Supabase JOIN zwraca owner i location jako tablice, ale potrzebujemy pojedynczych obiektów\n            const transformedClients = clients.map((client)=>({\n                    ...client,\n                    owner: client.owner && Array.isArray(client.owner) && client.owner.length > 0 ? client.owner[0] // Weź pierwszy element z tablicy\n                     : client.owner && !Array.isArray(client.owner) ? client.owner // Już jest pojedynczym obiektem\n                     : null,\n                    location: client.location && Array.isArray(client.location) && client.location.length > 0 ? client.location[0] // Weź pierwszy element z tablicy\n                     : client.location && !Array.isArray(client.location) ? client.location // Już jest pojedynczym obiektem\n                     : null // Brak lokalizacji\n                }));\n            // DEBUG: Sprawdź dane właścicieli\n            const clientsWithOwners = transformedClients.filter((client)=>client.owner);\n            const clientsWithoutOwners = transformedClients.filter((client)=>!client.owner);\n            console.log('✅ Klienci z właścicielami:', clientsWithOwners.length);\n            console.log('❌ Klienci bez właścicieli:', clientsWithoutOwners.length);\n            if (clientsWithOwners.length > 0) {\n                var _clientsWithOwners__owner, _clientsWithOwners__owner1;\n                console.log('👤 Przykład klienta z właścicielem:', {\n                    client: \"\".concat(clientsWithOwners[0].first_name, \" \").concat(clientsWithOwners[0].last_name),\n                    owner_id: clientsWithOwners[0].owner_id,\n                    owner_name: (_clientsWithOwners__owner = clientsWithOwners[0].owner) === null || _clientsWithOwners__owner === void 0 ? void 0 : _clientsWithOwners__owner.full_name,\n                    owner_email: (_clientsWithOwners__owner1 = clientsWithOwners[0].owner) === null || _clientsWithOwners__owner1 === void 0 ? void 0 : _clientsWithOwners__owner1.email\n                });\n            }\n            // 🚀 NOWE: Zwróć dane z informacją o paginacji\n            return {\n                clients: transformedClients,\n                total: count || transformedClients.length,\n                page: (filters === null || filters === void 0 ? void 0 : filters.page) || 1,\n                pageSize: (filters === null || filters === void 0 ? void 0 : filters.pageSize) || transformedClients.length\n            };\n        } catch (error) {\n            console.error('❌ Błąd w getClientsPaginated:', error);\n            throw error;\n        }\n    },\n    // 🔄 KOMPATYBILNOŚĆ: Stara funkcja zwracająca tylko tablicę klientów\n    async getClients (user, filters) {\n        try {\n            const result = await this.getClientsPaginated(user, filters);\n            return result.clients;\n        } catch (error) {\n            console.error('❌ Błąd w getClients:', error);\n            throw error;\n        }\n    },\n    // Dodaj nowego klienta z automatycznym przypisaniem właściciela\n    async createClient (client, user) {\n        // ZABEZPIECZENIE: Upewnij się że status nie jest pusty\n        const safeStatus = client.status || 'canvas';\n        const clientToCreate = {\n            ...client,\n            status: safeStatus,\n            owner_id: user.id,\n            location_id: client.location_id || user.location_id,\n            edited_by: user.id,\n            last_edited_by_name: user.full_name,\n            last_edited_by_avatar_url: user.avatar_url,\n            // Jeśli status to \"canvas\", ustaw status_changed_at\n            ...safeStatus === 'canvas' && {\n                status_changed_at: new Date().toISOString()\n            },\n            // Konwertuj undefined reminder na null dla bazy danych\n            reminder: client.reminder || null\n        };\n        console.log('📊 Tworzenie klienta z danymi:', clientToCreate);\n        const { data, error } = await supabase.from('clients').insert([\n            clientToCreate\n        ]).select().single();\n        if (error) {\n            console.error('❌ Błąd createClient:', error);\n            throw error;\n        }\n        return data;\n    },\n    // Zaktualizuj klienta z sprawdzeniem uprawnień\n    async updateClient (id, updates, user) {\n        try {\n            console.log('🔄 updateClient START:', {\n                id,\n                updates,\n                user: user.email\n            });\n            // Pobierz aktualny stan klienta aby sprawdzić czy status się zmienia\n            const { data: currentClient, error: fetchError } = await supabase.from('clients').select('status, owner_id').eq('id', id).single();\n            if (fetchError) {\n                console.error('❌ Błąd pobierania aktualnego klienta:', fetchError);\n                throw new Error(\"Nie można pobrać aktualnego stanu klienta: \".concat(fetchError.message));\n            }\n            console.log('✅ Aktualny stan klienta:', currentClient);\n            // NOWA LOGIKA: Każda osoba która edytuje klienta zostaje jego właścicielem\n            let updatedData = {\n                ...updates\n            };\n            // ZABEZPIECZENIE: Jeśli status jest w aktualizacji, upewnij się że nie jest pusty\n            if ('status' in updatedData && !updatedData.status) {\n                console.log('⚠️ UWAGA: Pusty status w aktualizacji - ustawiam domyślny \"canvas\"');\n                updatedData.status = 'canvas';\n            }\n            // Sprawdź czy status się zmienia\n            const statusChanged = updatedData.status && updatedData.status !== currentClient.status;\n            if (statusChanged) {\n                updatedData.status_changed_at = new Date().toISOString();\n                console.log('\\uD83D\\uDCCA Status zmieniony z \"'.concat(currentClient.status, '\" na \"').concat(updates.status, '\" - ustawiam status_changed_at'));\n                // Powiadomienie o zmianie na canvas\n                if (updates.status === 'canvas') {\n                    console.log('🔔 POWIADOMIENIE: Klient przeszedł na status CANVAS - start trackingu czasu!');\n                }\n            }\n            // Zawsze przypisz edytującego jako właściciela\n            updatedData.owner_id = user.id;\n            console.log(\"\\uD83C\\uDFAF Przypisuję klienta \".concat(id, \" do użytkownika \").concat(user.id, \" (\").concat(user.email, \") jako właściciela\"));\n            // Zapisz informacje o edytorze (szczególnie ważne dla pracowników)\n            updatedData.last_edited_by_name = user.full_name;\n            updatedData.last_edited_by_avatar_url = user.avatar_url;\n            console.log(\"\\uD83D\\uDC64 Zapisuję dane edytora: \".concat(user.full_name, \" (rola: \").concat(user.role, \")\"));\n            // Jeśli to pracownik i zmienia status - dodatkowy log\n            if (user.role === 'pracownik' && statusChanged) {\n                console.log(\"\\uD83D\\uDC77 Pracownik \".concat(user.email, ' zmienia status z \"').concat(currentClient.status, '\" na \"').concat(updates.status, '\"'));\n            }\n            console.log('🔄 Dane do aktualizacji:', updatedData);\n            // Przygotuj finalne dane do UPDATE\n            const finalData = {\n                ...updatedData,\n                edited_by: user.id,\n                updated_at: new Date().toISOString(),\n                // Konwertuj undefined reminder na null dla bazy danych\n                ...updatedData.reminder !== undefined && {\n                    reminder: updatedData.reminder || null\n                }\n            };\n            console.log('🔄 Finalne dane do UPDATE:', finalData);\n            // Bezpośrednia aktualizacja\n            const { data, error } = await supabase.from('clients').update(finalData).eq('id', id).select().single();\n            if (error) {\n                console.error('❌ Błąd UPDATE clients:', error);\n                console.error('❌ Kod błędu:', error.code);\n                console.error('❌ Szczegóły:', error.details);\n                console.error('❌ Hint:', error.hint);\n                throw new Error(\"Błąd aktualizacji: \".concat(error.message, \" (kod: \").concat(error.code, \")\"));\n            }\n            console.log('✅ updateClient SUCCESS:', data);\n            return data;\n        } catch (error) {\n            console.error('❌ updateClient FAILED:', error);\n            throw error;\n        }\n    },\n    // Aktualizuj czas ostatniego kliknięcia telefonu\n    async updateLastPhoneClick (clientId, user) {\n        console.log('📞 Aktualizuję czas ostatniego kliknięcia telefonu:', clientId);\n        const { data, error } = await supabase.from('clients').update({\n            last_phone_click: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n        }).eq('id', clientId).select().single();\n        if (error) {\n            console.error('❌ Błąd updateLastPhoneClick:', error);\n            throw error;\n        }\n        // Zaloguj w activity_logs\n        try {\n            await activityLogsApi.createLog({\n                client_id: clientId,\n                changed_by: user.id,\n                change_type: 'update',\n                field_changed: 'last_phone_click',\n                old_value: undefined,\n                new_value: data.last_phone_click\n            });\n        } catch (logError) {\n            console.error('❌ Błąd logowania activity_logs (updateLastPhoneClick):', logError);\n        }\n        return data;\n    },\n    // Usuń klienta z sprawdzeniem uprawnień\n    async deleteClient (id, user) {\n        // Bezpośrednie usunięcie bez sprawdzania uprawnień\n        const { error } = await supabase.from('clients').delete().eq('id', id);\n        if (error) throw error;\n    },\n    // Przypisz klienta do innego użytkownika (tylko manager+)\n    async assignClient (clientId, newOwnerId, user) {\n        if (!permissionsApi.canAssignClients(user)) {\n            throw new Error('Brak uprawnień do przypisywania klientów');\n        }\n        const { data, error } = await supabase.from('clients').update({\n            owner_id: newOwnerId,\n            edited_by: user.id,\n            updated_at: new Date().toISOString()\n        }).eq('id', clientId).select().single();\n        if (error) throw error;\n        return data;\n    },\n    // Funkcja do czyszczenia nieistniejących owner_id\n    async cleanupInvalidOwnerIds () {\n        try {\n            console.log('🧹 Rozpoczynam czyszczenie nieistniejących owner_id...');\n            // Pobierz wszystkich klientów z owner_id\n            const { data: allClients, error: clientsError } = await supabase.from('clients').select('id, owner_id, first_name, last_name').not('owner_id', 'is', null);\n            if (clientsError) throw clientsError;\n            console.log('📊 Znaleziono klientów z owner_id:', (allClients === null || allClients === void 0 ? void 0 : allClients.length) || 0);\n            if (!allClients || allClients.length === 0) {\n                return {\n                    cleaned: 0,\n                    errors: []\n                };\n            }\n            // Pobierz wszystkie unikalne owner_id\n            const ownerIds = [\n                ...new Set(allClients.map((c)=>c.owner_id))\n            ];\n            console.log('🔍 Sprawdzam owner_id:', ownerIds);\n            // Sprawdź które użytkownicy istnieją\n            const { data: existingUsers, error: usersError } = await supabase.from('users').select('id').in('id', ownerIds);\n            if (usersError) throw usersError;\n            const existingUserIds = (existingUsers || []).map((u)=>u.id);\n            console.log('✅ Istniejący użytkownicy:', existingUserIds);\n            // Znajdź klientów z nieistniejącymi owner_id\n            const clientsToClean = allClients.filter((client)=>client.owner_id && !existingUserIds.includes(client.owner_id));\n            console.log('🧹 Klienci do wyczyszczenia:', clientsToClean.length);\n            if (clientsToClean.length === 0) {\n                console.log('✅ Brak klientów do wyczyszczenia');\n                return {\n                    cleaned: 0,\n                    errors: []\n                };\n            }\n            // Wyczyść owner_id dla problematycznych klientów\n            const cleanupResults = [];\n            const errors = [];\n            for (const client of clientsToClean){\n                try {\n                    console.log(\"\\uD83E\\uDDF9 Czyszczę owner_id dla \".concat(client.first_name, \" \").concat(client.last_name, \" (\").concat(client.owner_id, \")\"));\n                    const { error } = await supabase.from('clients').update({\n                        owner_id: null\n                    }).eq('id', client.id);\n                    if (error) {\n                        console.error(\"❌ Błąd czyszczenia \".concat(client.id, \":\"), error);\n                        errors.push({\n                            client: client.id,\n                            error: error.message\n                        });\n                    } else {\n                        cleanupResults.push(client.id);\n                    }\n                } catch (err) {\n                    console.error(\"❌ Wyjątek podczas czyszczenia \".concat(client.id, \":\"), err);\n                    errors.push({\n                        client: client.id,\n                        error: String(err)\n                    });\n                }\n            }\n            console.log(\"✅ Wyczyszczono \".concat(cleanupResults.length, \" klient\\xf3w\"));\n            if (errors.length > 0) {\n                console.error(\"❌ Błędy przy \".concat(errors.length, \" klientach:\"), errors);\n            }\n            return {\n                cleaned: cleanupResults.length,\n                errors,\n                cleanedClients: clientsToClean.filter((c)=>cleanupResults.includes(c.id))\n            };\n        } catch (error) {\n            console.error('❌ Błąd w cleanupInvalidOwnerIds:', error);\n            throw error;\n        }\n    },\n    // Subskrypcja na zmiany w czasie rzeczywistym\n    subscribeToChanges (callback) {\n        return supabase.channel('clients_changes').on('postgres_changes', {\n            event: '*',\n            schema: 'public',\n            table: 'clients'\n        }, callback).subscribe();\n    },\n    // Subskrypcja na zmiany owner_id dla real-time aktualizacji\n    subscribeToOwnerChanges (callback) {\n        try {\n            // Sprawdź czy callback jest funkcją\n            if (typeof callback !== 'function') {\n                console.error('❌ Callback nie jest funkcją w subscribeToOwnerChanges');\n                throw new Error('Callback musi być funkcją');\n            }\n            console.log('📡 Tworzę kanał Supabase dla owner changes...');\n            // Najpierw sprawdź czy real-time jest włączony i dostępny\n            const channelName = \"clients_owner_changes_\".concat(Date.now());\n            console.log('📡 Nazwa kanału:', channelName);\n            const channel = supabase.channel(channelName).on('postgres_changes', {\n                event: 'UPDATE',\n                schema: 'public',\n                table: 'clients',\n                filter: 'owner_id=neq.null' // Tylko gdy owner_id się zmienia\n            }, (payload)=>{\n                try {\n                    console.log('📡 Real-time payload otrzymany:', {\n                        eventType: payload.eventType,\n                        table: payload.table,\n                        changes: payload.new ? {\n                            id: payload.new.id,\n                            owner_id: payload.new.owner_id,\n                            first_name: payload.new.first_name,\n                            last_name: payload.new.last_name\n                        } : 'brak danych'\n                    });\n                    if (typeof callback === 'function') {\n                        callback(payload);\n                    } else {\n                        console.error('❌ Callback nie jest funkcją podczas wywołania');\n                    }\n                } catch (callbackError) {\n                    console.error('❌ Błąd w callback:', callbackError);\n                }\n            }).subscribe((status, err)=>{\n                console.log('📡 Subskrypcja owner_changes status:', status);\n                if (status === 'SUBSCRIBED') {\n                    console.log('✅ Subskrypcja owner_changes aktywna');\n                } else if (status === 'CLOSED') {\n                    console.warn('⚠️ Subskrypcja owner_changes zamknięta - prawdopodobnie problem z autoryzacją real-time');\n                    console.warn('💡 Real-time może być wyłączony w ustawieniach Supabase lub brakuje uprawnień');\n                } else if (status === 'CHANNEL_ERROR') {\n                    console.error('❌ Błąd kanału real-time:', err);\n                    console.error('💡 Sprawdź ustawienia real-time w Supabase Dashboard');\n                } else if (status === 'TIMED_OUT') {\n                    console.warn('⏰ Timeout subskrypcji - problemy z połączeniem WebSocket');\n                } else {\n                    console.log('📡 Status subskrypcji:', status);\n                }\n            });\n            // Sprawdź stan kanału po krótkim czasie\n            setTimeout(()=>{\n                if (channel.state === 'closed') {\n                    console.warn('⚠️ Kanał real-time został zamknięty - prawdopodobnie RLS blokuje real-time lub feature jest wyłączony');\n                }\n            }, 2000);\n            console.log('✅ Kanał owner changes utworzony');\n            return channel;\n        } catch (error) {\n            console.error('❌ Błąd w subscribeToOwnerChanges:', error);\n            console.warn('💡 Real-time nie będzie działać - aplikacja będzie używać okresowego odświeżania');\n            // Zwróć mock object aby nie powodować błędów\n            return {\n                unsubscribe: ()=>{\n                    console.log('🧹 Mock unsubscribe dla błędnego kanału');\n                }\n            };\n        }\n    },\n    // Pobierz klientów z przypomnieniami na konkretny dzień\n    async getClientsWithReminders (user, targetDate) {\n        try {\n            const today = targetDate || new Date().toISOString().split('T')[0] // format YYYY-MM-DD\n            ;\n            console.log(\"\\uD83D\\uDCC5 Pobieranie klient\\xf3w z przypomnieniami na: \".concat(today));\n            // Pobierz wszystkich klientów użytkownika (bez paginacji)\n            const allClients = await this.getClients(user);\n            // Filtruj tylko tych z przypomnieniami na dziś\n            const clientsWithTodayReminders = allClients.filter((client)=>{\n                // Sprawdź czy klient ma aktywne przypomnienie\n                const reminder = client.reminder || {\n                    enabled: false,\n                    date: '',\n                    time: '',\n                    note: ''\n                };\n                return reminder.enabled && reminder.date === today;\n            });\n            // Sortuj według godziny przypomnienia\n            const sortedClients = clientsWithTodayReminders.sort((a, b)=>{\n                var _a_reminder, _b_reminder;\n                const timeA = ((_a_reminder = a.reminder) === null || _a_reminder === void 0 ? void 0 : _a_reminder.time) || '00:00';\n                const timeB = ((_b_reminder = b.reminder) === null || _b_reminder === void 0 ? void 0 : _b_reminder.time) || '00:00';\n                return timeA.localeCompare(timeB);\n            });\n            console.log(\"✅ Znaleziono \".concat(sortedClients.length, \" klient\\xf3w z przypomnieniami na \").concat(today));\n            return sortedClients;\n        } catch (error) {\n            console.error('❌ Błąd pobierania klientów z przypomnieniami:', error);\n            throw error;\n        }\n    },\n    // Pobierz przypomnienia pogrupowane według slotów czasowych dla dashboardu\n    async getDailyScheduleWithClients (user, targetDate) {\n        try {\n            const clientsWithReminders = await this.getClientsWithReminders(user, targetDate);\n            // Definicja slotów czasowych (zgodnie z obecną strukturą dashboardu)\n            const timeSlots = [\n                {\n                    time: '8:00 - 10:00',\n                    type: 'canvas',\n                    color: '#06b6d4',\n                    startTime: '08:00',\n                    endTime: '10:00',\n                    statuses: [\n                        'canvas'\n                    ]\n                },\n                {\n                    time: '10:10 - 12:00',\n                    type: 'sales',\n                    color: '#10b981',\n                    startTime: '10:10',\n                    endTime: '12:00',\n                    statuses: [\n                        'sale'\n                    ]\n                },\n                {\n                    time: '12:30 - 15:00',\n                    type: 'antysales',\n                    color: '#f59e0b',\n                    startTime: '12:30',\n                    endTime: '15:00',\n                    statuses: [\n                        'antysale'\n                    ]\n                },\n                {\n                    time: '15:10 - 16:30',\n                    type: 'canvas + sales',\n                    color: '#8b5cf6',\n                    startTime: '15:10',\n                    endTime: '16:30',\n                    statuses: [\n                        'canvas',\n                        'sale'\n                    ]\n                }\n            ];\n            // Przypisz klientów do odpowiednich slotów na podstawie TYLKO czasu przypomnienia\n            const slotsWithClients = timeSlots.map((slot)=>{\n                const slotClients = clientsWithReminders.filter((client)=>{\n                    var _client_reminder;\n                    const reminderTime = ((_client_reminder = client.reminder) === null || _client_reminder === void 0 ? void 0 : _client_reminder.time) || '00:00';\n                    const [hours, minutes] = reminderTime.split(':').map(Number);\n                    const reminderMinutes = hours * 60 + minutes;\n                    const [startHours, startMins] = slot.startTime.split(':').map(Number);\n                    const [endHours, endMins] = slot.endTime.split(':').map(Number);\n                    const startMinutes = startHours * 60 + startMins;\n                    const endMinutes = endHours * 60 + endMins;\n                    // Sprawdź czy godzina przypomnienia mieści się w slocie czasowym\n                    const timeInSlot = reminderMinutes >= startMinutes && reminderMinutes <= endMinutes;\n                    console.log(\"\\uD83D\\uDD50 Klient \".concat(client.first_name, \" \").concat(client.last_name, \": czas \").concat(reminderTime, \" (\").concat(reminderMinutes, \"min) vs slot \").concat(slot.time, \" (\").concat(startMinutes, \"-\").concat(endMinutes, \"min) = \").concat(timeInSlot ? 'PASUJE' : 'NIE PASUJE'));\n                    return timeInSlot;\n                });\n                console.log(\"\\uD83D\\uDCCA Slot \".concat(slot.time, \": \").concat(slotClients.length, \" klient\\xf3w\"));\n                return {\n                    ...slot,\n                    clients: slotClients\n                };\n            });\n            console.log(\"\\uD83D\\uDCCA Plan dnia z \".concat(slotsWithClients.reduce((sum, slot)=>sum + slot.clients.length, 0), \" klientami\"));\n            return slotsWithClients;\n        } catch (error) {\n            console.error('❌ Błąd tworzenia planu dnia:', error);\n            throw error;\n        }\n    }\n};\n// Funkcje API dla logów aktywności\nconst activityLogsApi = {\n    // Pobierz logi aktywności\n    async getLogs (clientId) {\n        let query = supabase.from('activity_logs').select(\"\\n        *,\\n        clients(first_name, last_name)\\n      \").order('timestamp', {\n            ascending: false\n        }).limit(50);\n        if (clientId) {\n            query = query.eq('client_id', clientId);\n        }\n        const { data, error } = await query;\n        if (error) throw error;\n        return data;\n    },\n    // Pobierz historię zmian dla konkretnego klienta\n    async getClientHistory (clientId) {\n        try {\n            console.log('Pobieranie historii dla klienta:', clientId);\n            // Sprawdź czy użytkownik jest zalogowany\n            const { data: { user } } = await supabase.auth.getUser();\n            console.log('Aktualny użytkownik:', user === null || user === void 0 ? void 0 : user.id);\n            if (!user) {\n                console.error('Użytkownik nie jest zalogowany');\n                return [];\n            }\n            const { data, error } = await supabase.from('activity_logs').select(\"\\n          id,\\n          client_id,\\n          changed_by,\\n          change_type,\\n          field_changed,\\n          old_value,\\n          new_value,\\n          timestamp\\n        \").eq('client_id', clientId).order('timestamp', {\n                ascending: false\n            }).limit(20);\n            if (error) {\n                var _error_message;\n                console.error('Błąd query activity_logs:', error);\n                console.error('Szczegóły błędu:', JSON.stringify(error, null, 2));\n                // Sprawdź czy to problem z RLS\n                if (error.code === 'PGRST116' || ((_error_message = error.message) === null || _error_message === void 0 ? void 0 : _error_message.includes('RLS'))) {\n                    console.error('Problem z Row Level Security - użytkownik może nie mieć dostępu');\n                }\n                // Zwróć pustą tablicę zamiast rzucania błędem\n                return [];\n            }\n            console.log('Pobrano logi:', (data === null || data === void 0 ? void 0 : data.length) || 0);\n            // Jeśli nie ma logów, zwróć pustą tablicę\n            if (!data || data.length === 0) {\n                return [];\n            }\n            // Pobierz informacje o użytkownikach osobno z avatarami\n            const userIds = [\n                ...new Set(data.map((log)=>log.changed_by).filter(Boolean))\n            ];\n            console.log('Pobieranie użytkowników:', userIds);\n            const { data: users, error: usersError } = await supabase.from('users').select('id, full_name, role, avatar_url').in('id', userIds);\n            if (usersError) {\n                console.error('Błąd pobierania użytkowników:', usersError);\n            // Kontynuuj bez danych użytkowników\n            }\n            console.log('Pobrano użytkowników:', (users === null || users === void 0 ? void 0 : users.length) || 0);\n            // Mapuj użytkowników do słownika dla szybkiego dostępu\n            const usersMap = (users || []).reduce((acc, user)=>{\n                acc[user.id] = user;\n                return acc;\n            }, {});\n            // Przekształć dane z informacjami o edytorze\n            const result = data.map((log)=>{\n                const user = usersMap[log.changed_by];\n                return {\n                    id: log.id,\n                    client_id: log.client_id,\n                    changed_by: log.changed_by,\n                    change_type: log.change_type,\n                    field_changed: log.field_changed,\n                    old_value: log.old_value,\n                    new_value: log.new_value,\n                    timestamp: log.timestamp,\n                    editor_name: (user === null || user === void 0 ? void 0 : user.full_name) || log.changed_by || 'Nieznany użytkownik',\n                    editor_role: (user === null || user === void 0 ? void 0 : user.role) || 'unknown',\n                    editor_avatar: (user === null || user === void 0 ? void 0 : user.avatar_url) || null\n                };\n            });\n            console.log('Zwracanie historii:', result.length, 'wpisów');\n            return result;\n        } catch (error) {\n            console.error('Błąd w getClientHistory:', error);\n            throw error;\n        }\n    },\n    // Dodaj log aktywności\n    async createLog (log) {\n        const { data, error } = await supabase.from('activity_logs').insert([\n            {\n                ...log,\n                timestamp: new Date().toISOString()\n            }\n        ]).select().single();\n        if (error) throw error;\n        return data;\n    },\n    // Funkcja testowa do sprawdzania dostępu do activity_logs\n    async testActivityLogsAccess () {\n        try {\n            console.log('Testowanie dostępu do activity_logs...');\n            // Sprawdź autoryzację\n            const { data: { user } } = await supabase.auth.getUser();\n            console.log('Test - użytkownik:', user === null || user === void 0 ? void 0 : user.id, user === null || user === void 0 ? void 0 : user.email);\n            if (!user) {\n                return {\n                    success: false,\n                    error: 'Brak autoryzacji - użytkownik nie jest zalogowany'\n                };\n            }\n            // Sprawdź czy użytkownik istnieje w tabeli users\n            const { data: userProfile, error: userError } = await supabase.from('users').select('id, email, role').eq('id', user.id).single();\n            console.log('Test - profil użytkownika:', userProfile);\n            console.log('Test - błąd profilu:', userError);\n            if (userError || !userProfile) {\n                return {\n                    success: false,\n                    error: 'Użytkownik nie istnieje w tabeli users'\n                };\n            }\n            // Testuj dostęp do activity_logs\n            const { data, error, count } = await supabase.from('activity_logs').select('*', {\n                count: 'exact'\n            }).limit(1);\n            console.log('Test activity_logs - data:', data);\n            console.log('Test activity_logs - error:', error);\n            console.log('Test activity_logs - count:', count);\n            return {\n                success: !error,\n                data,\n                error,\n                count,\n                user: userProfile\n            };\n        } catch (error) {\n            console.error('Błąd testu activity_logs:', error);\n            return {\n                success: false,\n                error\n            };\n        }\n    }\n};\n// Funkcje API dla raportów\nconst reportsApi = {\n    // Pobierz statystyki tylko pracowników z prowizją\n    async getEmployeeStats (user) {\n        try {\n            console.log('📊 Pobieranie statystyk pracowników...');\n            // KROK 1: Pobierz wszystkich użytkowników z rolą 'pracownik'\n            const { data: allEmployees, error: usersError } = await supabase.from('users').select(\"\\n          id,\\n          full_name,\\n          email,\\n          avatar_url,\\n          role\\n        \").eq('role', 'pracownik').order('full_name', {\n                ascending: true\n            });\n            if (usersError) {\n                console.error('❌ Błąd pobierania użytkowników-pracowników:', usersError);\n                throw usersError;\n            }\n            if (!allEmployees || allEmployees.length === 0) {\n                console.log('⚠️ Brak użytkowników z rolą pracownik');\n                return [];\n            }\n            console.log('✅ Pobrano wszystkich pracowników:', allEmployees.length, allEmployees.map((e)=>e.full_name));\n            // KROK 2: Pobierz statystyki z tabeli employee_stats dla tych pracowników\n            const employeeIds = allEmployees.map((emp)=>emp.id);\n            let existingStats = [];\n            try {\n                const { data, error: statsError } = await supabase.from('employee_stats').select('*').in('user_id', employeeIds);\n                if (statsError) {\n                    console.warn('⚠️ Błąd pobierania employee_stats:', statsError);\n                } else {\n                    existingStats = data || [];\n                }\n            } catch (error) {\n                console.warn('⚠️ Nie udało się pobrać employee_stats:', error);\n            }\n            console.log('✅ Pobrano statystyki dla pracowników:', (existingStats === null || existingStats === void 0 ? void 0 : existingStats.length) || 0);\n            // KROK 3: Pobierz dzisiejsze statystyki z tabeli clients (z obsługą błędów)\n            const today = new Date().toISOString().split('T')[0];\n            let todayClients = [];\n            try {\n                const { data, error: clientsError } = await supabase.from('clients').select('status, edited_by, created_at, updated_at').gte('updated_at', \"\".concat(today, \"T00:00:00\")).lt('updated_at', \"\".concat(today, \"T23:59:59\"));\n                if (clientsError) {\n                    console.warn('⚠️ Błąd pobierania klientów z dzisiaj:', clientsError);\n                } else {\n                    todayClients = data || [];\n                }\n            } catch (error) {\n                console.warn('⚠️ Nie udało się pobrać dzisiejszych klientów:', error);\n            }\n            console.log('✅ Pobrano dzisiejszych klientów:', todayClients.length);\n            // KROK 4: Pobierz wczorajsze statystyki dla kar (z obsługą błędów)\n            const yesterday = new Date();\n            yesterday.setDate(yesterday.getDate() - 1);\n            const yesterdayStr = yesterday.toISOString().split('T')[0];\n            let yesterdayClients = [];\n            try {\n                const { data, error: yesterdayError } = await supabase.from('clients').select('status, edited_by').gte('updated_at', \"\".concat(yesterdayStr, \"T00:00:00\")).lt('updated_at', \"\".concat(yesterdayStr, \"T23:59:59\"));\n                if (yesterdayError) {\n                    console.warn('⚠️ Błąd pobierania wczorajszych klientów:', yesterdayError);\n                } else {\n                    yesterdayClients = data || [];\n                }\n            } catch (error) {\n                console.warn('⚠️ Nie udało się pobrać wczorajszych klientów:', error);\n            }\n            // KROK 5: Pobierz WSZYSTKICH klientów przypisanych do pracowników (z obsługą błędów)\n            let allOwnedClients = [];\n            try {\n                const { data, error: ownedError } = await supabase.from('clients').select('status, owner_id').not('owner_id', 'is', null).in('owner_id', employeeIds);\n                if (ownedError) {\n                    console.warn('⚠️ Błąd pobierania klientów przypisanych:', ownedError);\n                } else {\n                    allOwnedClients = data || [];\n                }\n            } catch (error) {\n                console.warn('⚠️ Nie udało się pobrać przypisanych klientów:', error);\n            }\n            console.log('✅ Pobrano wszystkich przypisanych klientów:', allOwnedClients.length);\n            // KROK 6: Agreguj dzisiejsze statystyki per pracownik\n            const todayStats = todayClients.reduce((acc, client)=>{\n                const userId = client.edited_by;\n                if (!userId) return acc;\n                if (!acc[userId]) {\n                    acc[userId] = {\n                        total: 0,\n                        canvas: 0,\n                        antysale: 0,\n                        sale: 0,\n                        other: 0\n                    };\n                }\n                acc[userId].total++;\n                if (client.status === 'canvas') acc[userId].canvas++;\n                else if (client.status === 'antysale') acc[userId].antysale++;\n                else if (client.status === 'sale') acc[userId].sale++;\n                else acc[userId].other++;\n                return acc;\n            }, {});\n            // KROK 7: Agreguj wczorajsze statystyki per pracownik\n            const yesterdayStats = yesterdayClients.reduce((acc, client)=>{\n                const userId = client.edited_by;\n                if (userId) {\n                    acc[userId] = (acc[userId] || 0) + 1;\n                }\n                return acc;\n            }, {});\n            // KROK 8: Agreguj statusy WSZYSTKICH przypisanych klientów per pracownik\n            const ownedClientsStats = allOwnedClients.reduce((acc, client)=>{\n                const ownerId = client.owner_id;\n                if (!ownerId) return acc;\n                if (!acc[ownerId]) {\n                    acc[ownerId] = {\n                        total: 0,\n                        canvas: 0,\n                        antysale: 0,\n                        sale: 0,\n                        brak_kontaktu: 0,\n                        nie_zainteresowany: 0,\n                        zdenerwowany: 0,\n                        '$$': 0\n                    };\n                }\n                acc[ownerId].total++;\n                switch(client.status){\n                    case 'canvas':\n                        acc[ownerId].canvas++;\n                        break;\n                    case 'antysale':\n                        acc[ownerId].antysale++;\n                        break;\n                    case 'sale':\n                        acc[ownerId].sale++;\n                        break;\n                    case 'brak_kontaktu':\n                        acc[ownerId].brak_kontaktu++;\n                        break;\n                    case 'nie_zainteresowany':\n                        acc[ownerId].nie_zainteresowany++;\n                        break;\n                    case 'zdenerwowany':\n                        acc[ownerId].zdenerwowany++;\n                        break;\n                    case '$$':\n                        acc[ownerId]['$$']++;\n                        break;\n                }\n                return acc;\n            }, {});\n            console.log('📊 Statystyki przypisanych klientów:', ownedClientsStats);\n            // KROK 9: Stwórz mapę statystyk employee_stats\n            const statsMap = new Map();\n            existingStats.forEach((stat)=>{\n                statsMap.set(stat.user_id, stat);\n            });\n            // KROK 10: Kombinuj dane - dla WSZYSTKICH pracowników (zawsze zwraca listę)\n            const enhancedStats = allEmployees.map((employee)=>{\n                const userId = employee.id;\n                // Pobierz statystyki z employee_stats lub utwórz domyślne\n                const basicStat = statsMap.get(userId) || {\n                    id: 'temp_' + userId,\n                    user_id: userId,\n                    daily_target: 20,\n                    commission_rate: 3.0,\n                    monthly_canvas: 0,\n                    monthly_antysale: 0,\n                    monthly_sale: 0,\n                    total_commissions: 0,\n                    total_penalties: 0,\n                    custom_clients_count: 0,\n                    custom_total_payments: 0,\n                    created_at: new Date().toISOString(),\n                    updated_at: new Date().toISOString()\n                };\n                const todayForUser = todayStats[userId] || {\n                    total: 0,\n                    canvas: 0,\n                    antysale: 0,\n                    sale: 0\n                };\n                const yesterdayForUser = yesterdayStats[userId] || 0;\n                const ownedForUser = ownedClientsStats[userId] || {\n                    total: 0,\n                    canvas: 0,\n                    antysale: 0,\n                    sale: 0,\n                    brak_kontaktu: 0,\n                    nie_zainteresowany: 0,\n                    zdenerwowany: 0,\n                    '$$': 0\n                };\n                // Oblicz karę za wczoraj\n                const yesterdayShortage = Math.max(0, basicStat.daily_target - yesterdayForUser);\n                const penalty = yesterdayShortage * 15;\n                // Oblicz prowizję na podstawie przypisanych klientów Sale\n                const commission = ownedForUser.sale * basicStat.commission_rate / 100 * 100;\n                console.log(\"\\uD83D\\uDC64 Pracownik \".concat(employee.full_name, \": Canvas=\").concat(ownedForUser.canvas, \", AntyS=\").concat(ownedForUser.antysale, \", Sale=\").concat(ownedForUser.sale));\n                return {\n                    ...basicStat,\n                    // WAŻNE: Dołącz dane użytkownika\n                    user: {\n                        id: employee.id,\n                        full_name: employee.full_name,\n                        email: employee.email,\n                        avatar_url: employee.avatar_url,\n                        role: employee.role\n                    },\n                    daily_achieved: todayForUser.total,\n                    yesterday_shortage: yesterdayShortage,\n                    status_changes_today: {\n                        canvas: todayForUser.canvas,\n                        antysale: todayForUser.antysale,\n                        sale: todayForUser.sale,\n                        other: todayForUser.other\n                    },\n                    // Używaj statystyk opartych na owner_id (przypisanych klientów)\n                    monthly_canvas: ownedForUser.canvas,\n                    monthly_antysale: ownedForUser.antysale,\n                    monthly_sale: ownedForUser.sale,\n                    total_commissions: commission,\n                    total_penalties: penalty\n                };\n            });\n            console.log('✅ Przygotowano rozszerzone statystyki dla wszystkich pracowników:', enhancedStats.length);\n            console.log('👥 Lista pracowników:', enhancedStats.map((s)=>{\n                var _s_user;\n                return (_s_user = s.user) === null || _s_user === void 0 ? void 0 : _s_user.full_name;\n            }).join(', '));\n            return enhancedStats;\n        } catch (error) {\n            console.error('❌ Błąd pobierania statystyk pracowników:', error);\n            // W przypadku błędu, zwróć pustą listę zamiast rzucać błąd\n            return [];\n        }\n    },\n    // Podsumowanie dnia\n    async getDailySummary (date) {\n        const { data, error } = await supabase.from('clients').select('status, edited_by').gte('updated_at', \"\".concat(date, \"T00:00:00\")).lt('updated_at', \"\".concat(date, \"T23:59:59\"));\n        if (error) throw error;\n        // Agregacja danych\n        const statusBreakdown = data.reduce((acc, client)=>{\n            acc[client.status] = (acc[client.status] || 0) + 1;\n            return acc;\n        }, {});\n        const employeeStats = data.reduce((acc, client)=>{\n            acc[client.edited_by] = (acc[client.edited_by] || 0) + 1;\n            return acc;\n        }, {});\n        return {\n            totalClients: data.length,\n            statusBreakdown,\n            employeeStats\n        };\n    },\n    // Podsumowanie tygodniowe\n    async getWeeklySummary (startDate, endDate) {\n        const { data, error } = await supabase.from('clients').select('status, edited_by, updated_at').gte('updated_at', startDate).lt('updated_at', endDate);\n        if (error) throw error;\n        return data;\n    },\n    // Aktualizuj statystyki pracownika (dla manager/project_manager/junior_manager/szef/admin)\n    async updateEmployeeStats (userId, updates, currentUser) {\n        // Sprawdź uprawnienia\n        if (![\n            'manager',\n            'project_manager',\n            'junior_manager',\n            'szef',\n            'admin'\n        ].includes(currentUser.role)) {\n            throw new Error('Brak uprawnień do modyfikacji statystyk');\n        }\n        const { data, error } = await supabase.from('employee_stats').update(updates).eq('user_id', userId).select().single();\n        if (error) throw error;\n        return data;\n    },\n    // Edytuj ilość klientów i sumę wpłat pracownika (dla manager/project_manager/junior_manager/szef/admin)\n    async updateEmployeeClientStats (userId, clientsCount, totalPayments, currentUser) {\n        // Sprawdź uprawnienia\n        if (![\n            'manager',\n            'project_manager',\n            'junior_manager',\n            'szef',\n            'admin'\n        ].includes(currentUser.role)) {\n            throw new Error('Brak uprawnień do modyfikacji statystyk');\n        }\n        try {\n            console.log(\"\\uD83D\\uDCDD Aktualizuję statystyki pracownika \".concat(userId, \": klienci=\").concat(clientsCount, \", wpłaty=\").concat(totalPayments));\n            // METODA 1: Spróbuj prostą aktualizację w employee_stats\n            try {\n                console.log('📝 Próba prostej aktualizacji w employee_stats');\n                const legacyUpdates = {\n                    custom_clients_count: clientsCount,\n                    custom_total_payments: totalPayments,\n                    updated_at: new Date().toISOString()\n                };\n                const { data, error } = await supabase.from('employee_stats').update(legacyUpdates).eq('user_id', userId).select(\"\\n            *,\\n            user:users!user_id (\\n              id,\\n              full_name,\\n              email,\\n              avatar_url,\\n              role\\n            )\\n          \").single();\n                if (!error && data) {\n                    console.log('✅ Zaktualizowano statystyki w employee_stats (metoda 1)');\n                    console.log(\"\\uD83D\\uDCCA Klienci: \".concat(clientsCount, \", Wpłaty: €\").concat(totalPayments));\n                    return data;\n                } else {\n                    console.warn('⚠️ Metoda 1 nie zadziałała:', error);\n                    throw error;\n                }\n            } catch (method1Error) {\n                console.warn('⚠️ Metoda 1 (prosta aktualizacja) nie zadziałała:', method1Error);\n                // METODA 2: Spróbuj INSERT z ON CONFLICT\n                try {\n                    console.log('📝 Próba INSERT z ON CONFLICT w employee_stats');\n                    const insertData = {\n                        user_id: userId,\n                        daily_target: 20,\n                        commission_rate: 3.0,\n                        monthly_canvas: 0,\n                        monthly_antysale: 0,\n                        monthly_sale: 0,\n                        total_commissions: 0,\n                        total_penalties: 0,\n                        custom_clients_count: clientsCount,\n                        custom_total_payments: totalPayments,\n                        created_at: new Date().toISOString(),\n                        updated_at: new Date().toISOString()\n                    };\n                    const { data, error } = await supabase.from('employee_stats').upsert(insertData, {\n                        onConflict: 'user_id',\n                        ignoreDuplicates: false\n                    }).select(\"\\n              *,\\n              user:users!user_id (\\n                id,\\n                full_name,\\n                email,\\n                avatar_url,\\n                role\\n              )\\n            \").single();\n                    if (!error && data) {\n                        console.log('✅ Zaktualizowano statystyki w employee_stats (metoda 2)');\n                        console.log(\"\\uD83D\\uDCCA Klienci: \".concat(clientsCount, \", Wpłaty: €\").concat(totalPayments));\n                        return data;\n                    } else {\n                        console.warn('⚠️ Metoda 2 nie zadziałała:', error);\n                        throw error;\n                    }\n                } catch (method2Error) {\n                    console.warn('⚠️ Metoda 2 (upsert) nie zadziałała:', method2Error);\n                    // METODA 3: Zaktualizuj tylko w pamięci (fallback)\n                    console.log('📝 Fallback - zwracam symulowane dane');\n                    return {\n                        id: 'temp_' + userId,\n                        user_id: userId,\n                        daily_target: 20,\n                        commission_rate: 3.0,\n                        monthly_canvas: 0,\n                        monthly_antysale: 0,\n                        monthly_sale: 0,\n                        total_commissions: 0,\n                        total_penalties: 0,\n                        custom_clients_count: clientsCount,\n                        custom_total_payments: totalPayments,\n                        created_at: new Date().toISOString(),\n                        updated_at: new Date().toISOString(),\n                        user: {\n                            id: userId,\n                            full_name: 'Pracownik',\n                            email: 'brak@email.com',\n                            avatar_url: null,\n                            role: 'pracownik'\n                        }\n                    };\n                }\n            }\n        } catch (error) {\n            console.error('❌ Błąd w updateEmployeeClientStats:', error);\n            throw error;\n        }\n    },\n    // Stwórz statystyki dla nowego pracownika\n    async createEmployeeStats (userId, currentUser) {\n        // Sprawdź uprawnienia\n        if (![\n            'manager',\n            'project_manager',\n            'junior_manager',\n            'szef',\n            'admin'\n        ].includes(currentUser.role)) {\n            throw new Error('Brak uprawnień do tworzenia statystyk');\n        }\n        const { data, error } = await supabase.from('employee_stats').insert([\n            {\n                user_id: userId,\n                daily_target: 20,\n                commission_rate: 3.0\n            }\n        ]).select().single();\n        if (error) throw error;\n        return data;\n    },\n    // 📊 Nowa funkcja: Pobierz statystyki wykorzystania bazy (klienci z/bez właściciela)\n    async getDatabaseUtilization () {\n        try {\n            console.log('📊 Pobieranie statystyk wykorzystania bazy...');\n            // Zlicz wszystkich klientów\n            const { count: totalCount, error: totalError } = await supabase.from('clients').select('*', {\n                count: 'exact',\n                head: true\n            });\n            if (totalError) {\n                console.error('❌ Błąd pobierania łącznej liczby klientów:', totalError);\n                throw totalError;\n            }\n            // Zlicz klientów z właścicielem (owner_id != null)\n            const { count: withOwnerCount, error: withOwnerError } = await supabase.from('clients').select('*', {\n                count: 'exact',\n                head: true\n            }).not('owner_id', 'is', null);\n            if (withOwnerError) {\n                console.error('❌ Błąd pobierania klientów z właścicielem:', withOwnerError);\n                throw withOwnerError;\n            }\n            // Oblicz klientów bez właściciela\n            const withoutOwnerCount = (totalCount || 0) - (withOwnerCount || 0);\n            // Oblicz procent wykorzystania\n            const utilizationPercentage = totalCount ? Math.round((withOwnerCount || 0) / totalCount * 100) : 0;\n            const result = {\n                withOwner: withOwnerCount || 0,\n                withoutOwner: withoutOwnerCount,\n                total: totalCount || 0,\n                utilizationPercentage\n            };\n            console.log('📊 Statystyki wykorzystania bazy:', result);\n            return result;\n        } catch (error) {\n            console.error('❌ Błąd pobierania statystyk wykorzystania bazy:', error);\n            throw error;\n        }\n    },\n    // 🔄 ADMIN: Resetuj właścicieli wszystkich klientów\n    async resetAllClientOwners (currentUser) {\n        // Sprawdź uprawnienia - tylko admin\n        if (currentUser.role !== 'admin') {\n            throw new Error('Brak uprawnień! Tylko administrator może resetować właścicieli klientów.');\n        }\n        try {\n            console.log('🔄 Rozpoczynam resetowanie właścicieli klientów...');\n            // Pobierz liczbę klientów z właścicielem przed resetowaniem\n            const { count: beforeCount, error: beforeError } = await supabase.from('clients').select('*', {\n                count: 'exact',\n                head: true\n            }).not('owner_id', 'is', null);\n            if (beforeError) {\n                console.error('❌ Błąd sprawdzania stanu przed resetowaniem:', beforeError);\n                throw beforeError;\n            }\n            // Resetuj owner_id dla wszystkich klientów\n            const { data, error } = await supabase.from('clients').update({\n                owner_id: null\n            }).not('owner_id', 'is', null) // Tylko te które mają właściciela\n            .select('id, first_name, last_name');\n            if (error) {\n                console.error('❌ Błąd resetowania właścicieli:', error);\n                throw error;\n            }\n            const resetCount = (data === null || data === void 0 ? void 0 : data.length) || 0;\n            // Loguj akcję do activity_logs\n            try {\n                await activityLogsApi.createLog({\n                    client_id: 'bulk_action',\n                    changed_by: currentUser.id,\n                    change_type: 'update',\n                    field_changed: 'owner_id',\n                    old_value: 'various',\n                    new_value: 'null (reset by admin)'\n                });\n            } catch (logError) {\n                console.error('⚠️ Nie udało się zalogować akcji:', logError);\n            // Nie przerywamy procesu z powodu błędu logowania\n            }\n            console.log(\"✅ Zresetowano właścicieli dla \".concat(resetCount, \" klient\\xf3w\"));\n            return {\n                success: resetCount,\n                message: \"Pomyślnie zresetowano właścicieli dla \".concat(resetCount, \" klient\\xf3w. Wszyscy klienci są teraz bez przypisanego właściciela.\")\n            };\n        } catch (error) {\n            console.error('❌ Błąd resetowania właścicieli klientów:', error);\n            throw error;\n        }\n    },\n    // Pobierz statystyki aktywności pracowników z tabeli employee_statistics\n    async getEmployeeActivityStats (user) {\n        try {\n            console.log('📊 Pobieranie statystyk aktywności pracowników...');\n            // Sprawdź uprawnienia\n            if (!user || ![\n                'manager',\n                'project_manager',\n                'junior_manager',\n                'szef',\n                'admin'\n            ].includes(user.role)) {\n                console.warn('⚠️ Brak uprawnień do podglądu statystyk aktywności');\n                return [];\n            }\n            // KROK 1: Pobierz wszystkich użytkowników z rolą 'pracownik'\n            let allEmployees = [];\n            try {\n                const { data: employees, error: usersError } = await supabase.from('users').select(\"\\n            id,\\n            full_name,\\n            email,\\n            avatar_url,\\n            role\\n          \").eq('role', 'pracownik').order('full_name', {\n                    ascending: true\n                });\n                if (usersError) {\n                    console.error('❌ Błąd pobierania użytkowników-pracowników:', usersError);\n                    return [];\n                }\n                allEmployees = employees || [];\n                console.log(\"\\uD83D\\uDC65 Znaleziono pracownik\\xf3w: \".concat(allEmployees.length));\n                if (allEmployees.length === 0) {\n                    console.log('⚠️ Brak użytkowników z rolą pracownik');\n                    return [];\n                }\n            } catch (error) {\n                console.error('❌ Błąd pobierania pracowników:', error);\n                return [];\n            }\n            // KROK 2: Pobierz statystyki aktywności - z obsługą błędów RLS\n            let activityStats = [];\n            try {\n                const employeeIds = allEmployees.map((emp)=>emp.id);\n                console.log(\"\\uD83D\\uDD0D Pobieranie statystyk dla ID: \".concat(employeeIds.slice(0, 3).join(', '), \"... (\").concat(employeeIds.length, \" total)\"));\n                const { data: stats, error: statsError } = await supabase.from('employee_statistics').select('*').eq('period_type', 'monthly').in('user_id', employeeIds).order('period_end', {\n                    ascending: false\n                });\n                if (statsError) {\n                    var _statsError_message, _statsError_message1;\n                    console.error('❌ Błąd pobierania statystyk aktywności:', statsError);\n                    // Jeśli to błąd RLS (403), nie przerywaj - użyj domyślnych danych\n                    if (statsError.code === 'PGRST116' || ((_statsError_message = statsError.message) === null || _statsError_message === void 0 ? void 0 : _statsError_message.includes('RLS')) || ((_statsError_message1 = statsError.message) === null || _statsError_message1 === void 0 ? void 0 : _statsError_message1.includes('permission'))) {\n                        console.warn('🔒 Problem z RLS - używam domyślnych danych aktywności');\n                        activityStats = [];\n                    } else {\n                        console.error('💥 Krytyczny błąd pobierania statystyk - przerywam');\n                        return [];\n                    }\n                } else {\n                    activityStats = stats || [];\n                    console.log(\"\\uD83D\\uDCCA Znaleziono rekord\\xf3w aktywności: \".concat(activityStats.length));\n                }\n            } catch (error) {\n                console.error('❌ Błąd zapytania o statystyki aktywności:', error);\n                activityStats = [];\n            }\n            // KROK 3: Stwórz mapę najnowszych statystyk dla każdego pracownika\n            const latestStatsMap = new Map();\n            if (activityStats && activityStats.length > 0) {\n                activityStats.forEach((stat)=>{\n                    const userId = stat.user_id;\n                    if (!latestStatsMap.has(userId)) {\n                        latestStatsMap.set(userId, stat);\n                    }\n                });\n                console.log(\"\\uD83D\\uDDFA️ Zmapowano statystyki dla \".concat(latestStatsMap.size, \" pracownik\\xf3w\"));\n            } else {\n                console.log('⚠️ Brak danych aktywności - użyję domyślnych wartości');\n            }\n            // KROK 4: Kombinuj dane pracowników ze statystykami aktywności\n            const result = allEmployees.map((employee)=>{\n                const userId = employee.id;\n                const activityStat = latestStatsMap.get(userId);\n                if (activityStat) {\n                    // Mamy statystyki - użyj prawdziwych danych\n                    return {\n                        ...activityStat,\n                        user: {\n                            id: employee.id,\n                            full_name: employee.full_name,\n                            email: employee.email,\n                            avatar_url: employee.avatar_url,\n                            role: employee.role\n                        }\n                    };\n                } else {\n                    // Brak statystyk - stwórz domyślne dane\n                    const currentDate = new Date();\n                    const currentMonth = currentDate.getMonth() + 1;\n                    const currentYear = currentDate.getFullYear();\n                    const monthStart = \"\".concat(currentYear, \"-\").concat(currentMonth.toString().padStart(2, '0'), \"-01\");\n                    const monthEnd = new Date(currentYear, currentMonth, 0).toISOString().split('T')[0];\n                    return {\n                        id: 'temp_' + userId,\n                        user_id: userId,\n                        period_type: 'monthly',\n                        period_start: monthStart,\n                        period_end: monthEnd,\n                        total_work_minutes: 0,\n                        average_daily_minutes: 0,\n                        expected_work_minutes: 176 * 60,\n                        efficiency_percentage: 0,\n                        total_activities: 0,\n                        average_daily_activities: 0,\n                        days_worked: 0,\n                        days_absent: 0,\n                        user: {\n                            id: employee.id,\n                            full_name: employee.full_name,\n                            email: employee.email,\n                            avatar_url: employee.avatar_url,\n                            role: employee.role\n                        }\n                    };\n                }\n            });\n            console.log(\"✅ Przygotowano statystyki aktywności dla wszystkich pracownik\\xf3w: \".concat(result.length));\n            console.log(\"\\uD83D\\uDC65 Lista pracownik\\xf3w: \".concat(result.map((s)=>{\n                var _s_user;\n                return (_s_user = s.user) === null || _s_user === void 0 ? void 0 : _s_user.full_name;\n            }).join(', ')));\n            // Pokaż statystyki podsumowujące\n            const withData = result.filter((r)=>r.total_work_minutes > 0).length;\n            const withoutData = result.length - withData;\n            console.log(\"\\uD83D\\uDCCA Pracownicy z danymi: \".concat(withData, \", bez danych: \").concat(withoutData));\n            return result;\n        } catch (error) {\n            console.error('❌ Błąd pobierania statystyk aktywności:', error);\n            // Graceful fallback - zwróć pustą tablicę zamiast crashować\n            console.log('🔄 Graceful fallback - zwracam pustą tablicę');\n            return [];\n        }\n    },\n    // Pobierz trendy sprzedażowe z ostatnich 7 dni\n    async getSalesTrends (user) {\n        try {\n            console.log('📈 Pobieranie trendów sprzedażowych z ostatnich 7 dni...');\n            // Pobierz dane z ostatnich 7 dni\n            const endDate = new Date();\n            const startDate = new Date();\n            startDate.setDate(endDate.getDate() - 6) // 7 dni wstecz (włącznie z dzisiaj)\n            ;\n            const { data, error } = await supabase.from('clients').select('status, updated_at, status_changed_at, owner_id, edited_by').gte('updated_at', startDate.toISOString().split('T')[0]).lte('updated_at', endDate.toISOString().split('T')[0] + 'T23:59:59').in('status', [\n                'canvas',\n                'sale',\n                'antysale'\n            ]).order('updated_at', {\n                ascending: true\n            });\n            if (error) {\n                console.error('❌ Błąd pobierania trendów sprzedażowych:', error);\n                throw error;\n            }\n            console.log(\"✅ Pobrano \".concat((data === null || data === void 0 ? void 0 : data.length) || 0, \" rekord\\xf3w z ostatnich 7 dni\"));\n            // Filtruj klientów według uprawnień użytkownika\n            let filteredData = data || [];\n            if (user.role === 'pracownik') {\n                filteredData = filteredData.filter((client)=>client.owner_id === user.id || client.owner_id === null || client.edited_by === user.id);\n            }\n            // Stwórz mapę dla dni tygodnia\n            const dayNames = [\n                'Ndz',\n                'Pon',\n                'Wt',\n                'Śr',\n                'Czw',\n                'Pt',\n                'Sob'\n            ];\n            const trends = {};\n            // Inicjalizuj ostatnie 7 dni\n            for(let i = 6; i >= 0; i--){\n                const date = new Date();\n                date.setDate(date.getDate() - i);\n                const dayName = dayNames[date.getDay()];\n                trends[dayName] = {\n                    canvas: 0,\n                    sale: 0,\n                    antysale: 0\n                };\n            }\n            // Grupuj dane według dni\n            filteredData.forEach((client)=>{\n                const date = new Date(client.updated_at);\n                const dayName = dayNames[date.getDay()];\n                if (trends[dayName]) {\n                    if (client.status === 'canvas') trends[dayName].canvas++;\n                    else if (client.status === 'sale') trends[dayName].sale++;\n                    else if (client.status === 'antysale') trends[dayName].antysale++;\n                }\n            });\n            // Przekształć na format dla wykresu (ostatnie 7 dni w kolejności)\n            const result = [];\n            for(let i = 6; i >= 0; i--){\n                const date = new Date();\n                date.setDate(date.getDate() - i);\n                const dayName = dayNames[date.getDay()];\n                result.push({\n                    day: dayName,\n                    canvas: trends[dayName].canvas,\n                    sale: trends[dayName].sale,\n                    antysale: trends[dayName].antysale\n                });\n            }\n            console.log('✅ Trendy sprzedażowe przygotowane:', result);\n            return result;\n        } catch (error) {\n            console.error('❌ Błąd pobierania trendów sprzedażowych:', error);\n            // W przypadku błędu zwróć puste dane dla ostatnich 7 dni\n            const dayNames = [\n                'Ndz',\n                'Pon',\n                'Wt',\n                'Śr',\n                'Czw',\n                'Pt',\n                'Sob'\n            ];\n            const result = [];\n            for(let i = 6; i >= 0; i--){\n                const date = new Date();\n                date.setDate(date.getDate() - i);\n                const dayName = dayNames[date.getDay()];\n                result.push({\n                    day: dayName,\n                    canvas: 0,\n                    sale: 0,\n                    antysale: 0\n                });\n            }\n            return result;\n        }\n    },\n    // Pobierz statystyki kliknięć telefonu tylko dla pracowników\n    async getPhoneClicksStats (user) {\n        try {\n            console.log('📞 Pobieranie statystyk kliknięć telefonu...');\n            // Pobierz wszystkich pracowników\n            const { data: employees, error: employeesError } = await supabase.from('users').select('id').eq('role', 'pracownik');\n            if (employeesError) {\n                console.error('❌ Błąd pobierania pracowników:', employeesError);\n                throw employeesError;\n            }\n            const employeeIds = (employees || []).map((emp)=>emp.id);\n            console.log(\"\\uD83D\\uDC65 Znaleziono \".concat(employeeIds.length, \" pracownik\\xf3w\"));\n            if (employeeIds.length === 0) {\n                return {\n                    totalPhoneCalls: 0,\n                    totalPhoneCallsToday: 0\n                };\n            }\n            // Pobierz wszystkie kliknięcia telefonu z activity_logs tylko dla pracowników\n            const { data: allPhoneClicks, error: allClicksError } = await supabase.from('activity_logs').select('id, changed_by, timestamp').eq('field_changed', 'last_phone_click').in('changed_by', employeeIds);\n            if (allClicksError) {\n                console.error('❌ Błąd pobierania kliknięć telefonu:', allClicksError);\n                throw allClicksError;\n            }\n            const totalPhoneCalls = (allPhoneClicks === null || allPhoneClicks === void 0 ? void 0 : allPhoneClicks.length) || 0;\n            // Pobierz dzisiejsze kliknięcia telefonu\n            const today = new Date().toISOString().split('T')[0] // YYYY-MM-DD\n            ;\n            const { data: todayPhoneClicks, error: todayClicksError } = await supabase.from('activity_logs').select('id, changed_by, timestamp').eq('field_changed', 'last_phone_click').in('changed_by', employeeIds).gte('timestamp', \"\".concat(today, \"T00:00:00\")).lt('timestamp', \"\".concat(today, \"T23:59:59\"));\n            if (todayClicksError) {\n                console.error('❌ Błąd pobierania dzisiejszych kliknięć telefonu:', todayClicksError);\n                throw todayClicksError;\n            }\n            const totalPhoneCallsToday = (todayPhoneClicks === null || todayPhoneClicks === void 0 ? void 0 : todayPhoneClicks.length) || 0;\n            console.log(\"✅ Statystyki kliknięć telefonu: łącznie \".concat(totalPhoneCalls, \", dziś \").concat(totalPhoneCallsToday));\n            return {\n                totalPhoneCalls,\n                totalPhoneCallsToday\n            };\n        } catch (error) {\n            console.error('❌ Błąd pobierania statystyk kliknięć telefonu:', error);\n            // W przypadku błędu zwróć zerowe statystyki\n            return {\n                totalPhoneCalls: 0,\n                totalPhoneCallsToday: 0\n            };\n        }\n    },\n    // Pobierz dane trendów wydajności zespołu z ostatnich 7 dni\n    async getTeamPerformanceTrends (user) {\n        try {\n            console.log('📊 Pobieranie trendów wydajności zespołu z ostatnich 7 dni...');\n            // Pobierz wszystkich pracowników\n            const { data: employees, error: employeesError } = await supabase.from('users').select('id').eq('role', 'pracownik');\n            if (employeesError) {\n                console.error('❌ Błąd pobierania pracowników:', employeesError);\n                throw employeesError;\n            }\n            const employeeIds = (employees || []).map((emp)=>emp.id);\n            console.log(\"\\uD83D\\uDC65 Znaleziono \".concat(employeeIds.length, \" pracownik\\xf3w\"));\n            if (employeeIds.length === 0) {\n                // Zwróć puste dane dla ostatnich 7 dni\n                const dayNames = [\n                    'Ndz',\n                    'Pon',\n                    'Wt',\n                    'Śr',\n                    'Czw',\n                    'Pt',\n                    'Sob'\n                ];\n                const result = [];\n                for(let i = 6; i >= 0; i--){\n                    const date = new Date();\n                    date.setDate(date.getDate() - i);\n                    const dayName = dayNames[date.getDay()];\n                    result.push({\n                        day: dayName,\n                        telefony: 0,\n                        konwersja: 0,\n                        klienci: 0\n                    });\n                }\n                return result;\n            }\n            // Pobierz dane z ostatnich 7 dni\n            const endDate = new Date();\n            const startDate = new Date();\n            startDate.setDate(endDate.getDate() - 6) // 7 dni wstecz (włącznie z dzisiaj)\n            ;\n            // 1. Pobierz kliknięcia telefonu z activity_logs (tylko pracownicy)\n            const { data: phoneClicks, error: phoneError } = await supabase.from('activity_logs').select('changed_by, timestamp').eq('field_changed', 'last_phone_click').in('changed_by', employeeIds).gte('timestamp', startDate.toISOString().split('T')[0]).lte('timestamp', endDate.toISOString().split('T')[0] + 'T23:59:59');\n            if (phoneError) {\n                console.error('❌ Błąd pobierania kliknięć telefonu:', phoneError);\n                throw phoneError;\n            }\n            // 2. Pobierz zmiany klientów z ostatnich 7 dni (tylko przez pracowników)\n            const { data: clientChanges, error: changesError } = await supabase.from('clients').select('updated_at, status, edited_by').in('edited_by', employeeIds).gte('updated_at', startDate.toISOString().split('T')[0]).lte('updated_at', endDate.toISOString().split('T')[0] + 'T23:59:59').order('updated_at', {\n                ascending: true\n            });\n            if (changesError) {\n                console.error('❌ Błąd pobierania zmian klientów:', changesError);\n                throw changesError;\n            }\n            console.log(\"✅ Pobrano \".concat((phoneClicks === null || phoneClicks === void 0 ? void 0 : phoneClicks.length) || 0, \" kliknięć telefonu i \").concat((clientChanges === null || clientChanges === void 0 ? void 0 : clientChanges.length) || 0, \" zmian klient\\xf3w\"));\n            // Stwórz mapę dla dni tygodnia\n            const dayNames = [\n                'Ndz',\n                'Pon',\n                'Wt',\n                'Śr',\n                'Czw',\n                'Pt',\n                'Sob'\n            ];\n            const trendsData = {};\n            // Inicjalizuj ostatnie 7 dni\n            for(let i = 6; i >= 0; i--){\n                const date = new Date();\n                date.setDate(date.getDate() - i);\n                const dayName = dayNames[date.getDay()];\n                trendsData[dayName] = {\n                    telefony: 0,\n                    klienci: 0,\n                    sales: 0\n                };\n            }\n            // Grupuj kliknięcia telefonu według dni\n            if (phoneClicks && Array.isArray(phoneClicks)) {\n                phoneClicks.forEach((click)=>{\n                    const date = new Date(click.timestamp);\n                    const dayName = dayNames[date.getDay()];\n                    if (trendsData[dayName]) {\n                        trendsData[dayName].telefony++;\n                    }\n                });\n            }\n            // Grupuj zmiany klientów według dni\n            if (clientChanges && Array.isArray(clientChanges)) {\n                clientChanges.forEach((change)=>{\n                    const date = new Date(change.updated_at);\n                    const dayName = dayNames[date.getDay()];\n                    if (trendsData[dayName]) {\n                        trendsData[dayName].klienci++;\n                        if (change.status === 'sale') {\n                            trendsData[dayName].sales++;\n                        }\n                    }\n                });\n            }\n            // Przekształć na format dla wykresu (ostatnie 7 dni w kolejności)\n            const result = [];\n            for(let i = 6; i >= 0; i--){\n                const date = new Date();\n                date.setDate(date.getDate() - i);\n                const dayName = dayNames[date.getDay()];\n                const dayData = trendsData[dayName];\n                // Oblicz konwersję (procent sales względem wszystkich klientów)\n                const konwersja = dayData.klienci > 0 ? Math.round(dayData.sales / dayData.klienci * 100) : 0;\n                result.push({\n                    day: dayName,\n                    telefony: dayData.telefony,\n                    konwersja: konwersja,\n                    klienci: dayData.klienci\n                });\n            }\n            console.log('✅ Trendy wydajności zespołu przygotowane:', result);\n            return result;\n        } catch (error) {\n            console.error('❌ Błąd pobierania trendów wydajności zespołu:', error);\n            // W przypadku błędu zwróć puste dane dla ostatnich 7 dni\n            const dayNames = [\n                'Ndz',\n                'Pon',\n                'Wt',\n                'Śr',\n                'Czw',\n                'Pt',\n                'Sob'\n            ];\n            const result = [];\n            for(let i = 6; i >= 0; i--){\n                const date = new Date();\n                date.setDate(date.getDate() - i);\n                const dayName = dayNames[date.getDay()];\n                result.push({\n                    day: dayName,\n                    telefony: 0,\n                    konwersja: 0,\n                    klienci: 0\n                });\n            }\n            return result;\n        }\n    },\n    // API dla statystyk osobistych pracownika\n    async getMyPersonalStats (user) {\n        try {\n            console.log('📊 Pobieranie osobistych statystyk pracownika:', user.id, user.role);\n            // Sprawdź czy użytkownik to pracownik\n            if (user.role !== 'pracownik') {\n                console.error('❌ Nieautoryzowana rola:', user.role);\n                throw new Error('Dostęp tylko dla pracowników');\n            }\n            console.log('✅ Użytkownik autoryzowany jako pracownik');\n            const currentDate = new Date();\n            const currentMonth = currentDate.toISOString().slice(0, 7) // YYYY-MM\n            ;\n            // Ustaw pierwszy i ostatni dzień miesiąca prawidłowo\n            const startOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n            const endOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0, 23, 59, 59);\n            // 1. Pobierz liczbę telefonów w tym miesiącu (kliknięcia telefonu)\n            const { data: phoneClicks, error: phoneError } = await supabase.from('activity_logs').select('id, timestamp').eq('changed_by', user.id).eq('field_changed', 'last_phone_click').gte('timestamp', startOfMonth.toISOString()).lte('timestamp', endOfMonth.toISOString());\n            if (phoneError) {\n                console.error('❌ Błąd pobierania kliknięć telefonu:', phoneError);\n                throw phoneError;\n            }\n            const phoneCallsThisMonth = (phoneClicks === null || phoneClicks === void 0 ? void 0 : phoneClicks.length) || 0;\n            console.log(\"\\uD83D\\uDCDE Znaleziono \".concat(phoneCallsThisMonth, \" kliknięć telefonu w tym miesiącu\"));\n            // 2. Pobierz klientów przypisanych do pracownika\n            console.log('👥 Pobieranie klientów przypisanych do pracownika...');\n            const { data: myClients, error: clientsError } = await supabase.from('clients').select('id, status, first_name, last_name, company_name').eq('owner_id', user.id);\n            if (clientsError) {\n                console.error('❌ Błąd pobierania klientów:', clientsError);\n                throw clientsError;\n            }\n            const clients = myClients || [];\n            const totalClients = clients.length;\n            console.log(\"\\uD83D\\uDC64 Pracownik ma \".concat(totalClients, \" przypisanych klient\\xf3w\"));\n            // 3. Agreguj statusy klientów\n            console.log('📊 Agregowanie statusów klientów...');\n            const statusMap = new Map();\n            clients.forEach((client)=>{\n                const status = client.status;\n                statusMap.set(status, (statusMap.get(status) || 0) + 1);\n            });\n            console.log('📈 Statusy klientów:', Object.fromEntries(statusMap));\n            // Mapuj statusy na kolory\n            const statusColors = {\n                canvas: '#06b6d4',\n                sale: '#10b981',\n                antysale: '#f59e0b',\n                brak_kontaktu: '#6b7280',\n                nie_zainteresowany: '#ef4444',\n                zdenerwowany: '#dc2626',\n                '$$': '#fbbf24'\n            };\n            const clientStats = Array.from(statusMap.entries()).map((param)=>{\n                let [status, count] = param;\n                return {\n                    status,\n                    count,\n                    color: statusColors[status] || '#64748b'\n                };\n            });\n            // 4. Oblicz prowizję (tylko za klientów ze statusem 'sale')\n            const saleClients = statusMap.get('sale') || 0;\n            const commissionPerSale = 200 // 200 zł za każdego klienta sale\n            ;\n            const commissionTotal = saleClients * commissionPerSale;\n            // 5. Pobierz godziny pracy z tego miesiąca na podstawie activity_logs\n            console.log('⏰ Pobieranie aktywności z tego miesiąca...');\n            console.log(\"\\uD83D\\uDCC5 Zakres dat: \".concat(startOfMonth.toISOString(), \" - \").concat(endOfMonth.toISOString()));\n            const { data: activities, error: activitiesError } = await supabase.from('activity_logs').select('timestamp').eq('changed_by', user.id).gte('timestamp', startOfMonth.toISOString()).lte('timestamp', endOfMonth.toISOString()).order('timestamp', {\n                ascending: true\n            });\n            if (activitiesError) {\n                console.error('❌ Błąd pobierania aktywności:', activitiesError);\n                throw activitiesError;\n            }\n            console.log(\"⏰ Znaleziono \".concat((activities === null || activities === void 0 ? void 0 : activities.length) || 0, \" aktywności w tym miesiącu\"));\n            // Grupuj aktywności według dni i oblicz godziny pracy\n            console.log('📅 Grupowanie aktywności według dni...');\n            const dailyActivities = new Map();\n            if (activities && activities.length > 0) {\n                activities.forEach((activity)=>{\n                    const date = new Date(activity.timestamp);\n                    const day = date.toISOString().split('T')[0] // YYYY-MM-DD\n                    ;\n                    const hour = date.getHours();\n                    if (!dailyActivities.has(day)) {\n                        dailyActivities.set(day, new Set());\n                    }\n                    dailyActivities.get(day).add(hour);\n                });\n            }\n            // Przekształć na format dla wykresu\n            const workingHoursThisMonth = Array.from(dailyActivities.entries()).map((param)=>{\n                let [day, hours] = param;\n                return {\n                    day: new Date(day).toLocaleDateString('pl-PL', {\n                        weekday: 'short',\n                        day: 'numeric'\n                    }),\n                    hours: hours.size,\n                    sortDate: new Date(day) // Dodaj pole do sortowania\n                };\n            }).sort((a, b)=>a.sortDate.getTime() - b.sortDate.getTime()).map((param)=>{\n                let { day, hours } = param;\n                return {\n                    day,\n                    hours\n                };\n            }) // Usuń pole sortDate z wynikowych danych\n            ;\n            const totalWorkingHours = Array.from(dailyActivities.values()).reduce((sum, hours)=>sum + hours.size, 0);\n            const totalWorkingDays = dailyActivities.size;\n            console.log('✅ Statystyki osobiste przygotowane:', {\n                phoneCallsThisMonth,\n                totalClients,\n                commissionTotal,\n                totalWorkingHours,\n                totalWorkingDays\n            });\n            return {\n                phoneCallsThisMonth,\n                clientStats,\n                totalClients,\n                commissionTotal,\n                workingHoursThisMonth,\n                totalWorkingHours,\n                totalWorkingDays\n            };\n        } catch (error) {\n            var _error_message, _error_message1;\n            console.error('❌ Błąd pobierania osobistych statystyk:', error);\n            // Szczegółowe informacje o błędzie\n            if (error && typeof error === 'object') {\n                console.error('📋 Szczegóły błędu:', {\n                    message: error.message,\n                    code: error.code,\n                    details: error.details,\n                    hint: error.hint,\n                    stack: error.stack\n                });\n            }\n            // Jeśli to błąd RLS lub uprawnień, zwróć pustą strukturę zamiast crashować\n            if (error && typeof error === 'object' && (error.code === 'PGRST116' || ((_error_message = error.message) === null || _error_message === void 0 ? void 0 : _error_message.includes('RLS')) || ((_error_message1 = error.message) === null || _error_message1 === void 0 ? void 0 : _error_message1.includes('permission')))) {\n                console.warn('🔒 Problem z uprawnieniami - zwracam domyślne dane');\n                return {\n                    phoneCallsThisMonth: 0,\n                    clientStats: [],\n                    totalClients: 0,\n                    commissionTotal: 0,\n                    workingHoursThisMonth: [],\n                    totalWorkingHours: 0,\n                    totalWorkingDays: 0\n                };\n            }\n            throw error;\n        }\n    },\n    // Funkcje do zarządzania godzinami pracy pracownika\n    async saveWorkingHours (user, date, hours) {\n        try {\n            console.log(\"⏰ Zapisywanie godzin pracy: \".concat(hours, \"h dla dnia \").concat(date));\n            // Sprawdź czy użytkownik to pracownik\n            if (user.role !== 'pracownik') {\n                throw new Error('Dostęp tylko dla pracowników');\n            }\n            // ENHANCED DEBUG: Sprawdź czy to dzień roboczy (pon-pt) - bezpieczne parsowanie daty\n            console.log('\\uD83D\\uDD0D DEBUG: Input date string: \"'.concat(date, '\"'));\n            const dateParts = date.split('-') // \"2025-06-02\" -> [\"2025\", \"06\", \"02\"]\n            ;\n            console.log(\"\\uD83D\\uDD0D DEBUG: Date parts:\", dateParts);\n            const year = parseInt(dateParts[0]);\n            const month = parseInt(dateParts[1]) - 1 // -1 bo JavaScript używa 0-11 dla miesięcy\n            ;\n            const day = parseInt(dateParts[2]);\n            console.log(\"\\uD83D\\uDD0D DEBUG: Parsed components: year=\".concat(year, \", month=\").concat(month, \" (JS format), day=\").concat(day));\n            const dateObj = new Date(year, month, day);\n            const dayOfWeek = dateObj.getDay();\n            console.log(\"\\uD83D\\uDD0D DEBUG: Created Date object: \".concat(dateObj.toISOString()));\n            console.log(\"\\uD83D\\uDD0D DEBUG: Date in local format: \".concat(dateObj.toLocaleDateString('pl-PL', {\n                weekday: 'long',\n                year: 'numeric',\n                month: 'long',\n                day: 'numeric'\n            })));\n            console.log(\"\\uD83D\\uDDD3️ Sprawdzanie dnia roboczego: \".concat(date, \" => dayOfWeek=\").concat(dayOfWeek, \" (\").concat([\n                'niedziela',\n                'poniedziałek',\n                'wtorek',\n                'środa',\n                'czwartek',\n                'piątek',\n                'sobota'\n            ][dayOfWeek], \")\"));\n            if (dayOfWeek === 0 || dayOfWeek === 6) {\n                console.error(\"❌ BŁĄD: Pr\\xf3ba zapisania godzin dla weekendu! Dzień tygodnia: \".concat(dayOfWeek, \" (\").concat([\n                    'niedziela',\n                    'poniedziałek',\n                    'wtorek',\n                    'środa',\n                    'czwartek',\n                    'piątek',\n                    'sobota'\n                ][dayOfWeek], \")\"));\n                throw new Error('Można wpisywać godziny tylko dla dni roboczych (pon-pt)');\n            }\n            console.log(\"✅ Dzień roboczy potwierdzony: \".concat([\n                'niedziela',\n                'poniedziałek',\n                'wtorek',\n                'środa',\n                'czwartek',\n                'piątek',\n                'sobota'\n            ][dayOfWeek]));\n            // Walidacja godzin (0-12)\n            if (hours < 0 || hours > 12) {\n                throw new Error('Liczba godzin musi być między 0 a 12');\n            }\n            // Upsert godzin pracy w bazie danych (tabela już istnieje)\n            const { error } = await supabase.from('working_hours').upsert({\n                user_id: user.id,\n                work_date: date,\n                hours_worked: hours,\n                updated_at: new Date().toISOString()\n            }, {\n                onConflict: 'user_id,work_date'\n            });\n            if (error) {\n                console.error('❌ Błąd zapisywania godzin pracy do bazy:', error);\n                // Fallback do localStorage tylko przy błędzie bazy danych\n                console.warn('⚠️ Błąd bazy danych - używam localStorage jako fallback');\n                const storageKey = \"working_hours_\".concat(user.id);\n                const existingData = JSON.parse(localStorage.getItem(storageKey) || '{}');\n                existingData[date] = hours;\n                localStorage.setItem(storageKey, JSON.stringify(existingData));\n                console.log(\"✅ Zapisano \".concat(hours, \"h dla dnia \").concat(date, \" (localStorage fallback)\"));\n                return;\n            }\n            console.log(\"✅ Zapisano \".concat(hours, \"h dla dnia \").concat(date, \" (baza danych working_hours)\"));\n        } catch (error) {\n            console.error('❌ Błąd w saveWorkingHours:', error);\n            // Ultimate fallback - localStorage\n            try {\n                console.warn('⚠️ Używam localStorage jako ostateczny fallback');\n                const storageKey = \"working_hours_\".concat(user.id);\n                const existingData = JSON.parse(localStorage.getItem(storageKey) || '{}');\n                existingData[date] = hours;\n                localStorage.setItem(storageKey, JSON.stringify(existingData));\n                console.log(\"✅ Zapisano \".concat(hours, \"h dla dnia \").concat(date, \" (localStorage ultimate fallback)\"));\n            } catch (storageError) {\n                console.error('❌ Nie udało się zapisać nawet do localStorage:', storageError);\n                throw error;\n            }\n        }\n    },\n    async getWorkingHoursForMonth (user, year, month) {\n        try {\n            console.log(\"⏰ Pobieranie godzin pracy dla \".concat(year, \"-\").concat(month));\n            // Sprawdź czy użytkownik to pracownik\n            if (user.role !== 'pracownik') {\n                throw new Error('Dostęp tylko dla pracowników');\n            }\n            // Oblicz pierwszy i ostatni dzień miesiąca (poprawka strefy czasowej)\n            const startDate = \"\".concat(year, \"-\").concat(month.toString().padStart(2, '0'), \"-01\");\n            const endDate = \"\".concat(year, \"-\").concat(month.toString().padStart(2, '0'), \"-\").concat(new Date(year, month, 0).getDate().toString().padStart(2, '0'));\n            console.log(\"\\uD83D\\uDCC5 Pobieranie godzin dla zakresu: \".concat(startDate, \" - \").concat(endDate));\n            // Pobierz godziny pracy z tabeli working_hours (tabela już istnieje)\n            const { data, error } = await supabase.from('working_hours').select('work_date, hours_worked').eq('user_id', user.id).gte('work_date', startDate).lte('work_date', endDate);\n            if (error) {\n                console.error('❌ Błąd pobierania godzin pracy z bazy:', error);\n                console.warn('⚠️ Błąd bazy danych - używam localStorage jako fallback');\n                // Fallback do localStorage tylko przy błędzie bazy danych\n                const storageKey = \"working_hours_\".concat(user.id);\n                const storedData = JSON.parse(localStorage.getItem(storageKey) || '{}');\n                // Filtruj dane dla odpowiedniego miesiąca\n                const hoursMap = {};\n                Object.entries(storedData).forEach((param)=>{\n                    let [date, hours] = param;\n                    // Użyj porównania stringów dla dat w formacie YYYY-MM-DD\n                    if (date >= startDate && date <= endDate) {\n                        hoursMap[date] = hours;\n                    }\n                });\n                console.log(\"✅ Pobrano godziny pracy z localStorage fallback dla \".concat(Object.keys(hoursMap).length, \" dni\"));\n                return hoursMap;\n            }\n            // Konwertuj na obiekt date -> hours\n            const hoursMap = {};\n            if (data) {\n                data.forEach((entry)=>{\n                    hoursMap[entry.work_date] = entry.hours_worked;\n                });\n            }\n            console.log(\"✅ Pobrano godziny pracy z tabeli working_hours dla \".concat((data === null || data === void 0 ? void 0 : data.length) || 0, \" dni\"));\n            return hoursMap;\n        } catch (error) {\n            console.error('❌ Błąd w getWorkingHoursForMonth:', error);\n            // Ultimate fallback - localStorage\n            try {\n                console.warn('⚠️ Używam localStorage jako ostateczny fallback');\n                const storageKey = \"working_hours_\".concat(user.id);\n                const storedData = JSON.parse(localStorage.getItem(storageKey) || '{}');\n                // Filtruj dane dla odpowiedniego miesiąca\n                const startDateStr = \"\".concat(year, \"-\").concat(month.toString().padStart(2, '0'), \"-01\");\n                const endDateStr = \"\".concat(year, \"-\").concat(month.toString().padStart(2, '0'), \"-\").concat(new Date(year, month, 0).getDate().toString().padStart(2, '0'));\n                const hoursMap = {};\n                Object.entries(storedData).forEach((param)=>{\n                    let [date, hours] = param;\n                    // Użyj porównania stringów dla dat w formacie YYYY-MM-DD\n                    if (date >= startDateStr && date <= endDateStr) {\n                        hoursMap[date] = hours;\n                    }\n                });\n                console.log(\"✅ Pobrano godziny pracy z localStorage ultimate fallback dla \".concat(Object.keys(hoursMap).length, \" dni\"));\n                return hoursMap;\n            } catch (storageError) {\n                console.error('❌ Nie udało się pobrać nawet z localStorage:', storageError);\n                return {};\n            }\n        }\n    },\n    // 🚀 NOWE FUNKCJE PERFORMANCE - Materializowane Widoki\n    // Zastępuje ciężkie JOIN'y - teraz natychmiastowe ładowanie\n    async getMonthlyEmployeePerformance (year, month) {\n        try {\n            console.log(\"\\uD83D\\uDCCA Pobieranie wydajności pracownik\\xf3w dla \".concat(year, \"-\").concat(month, \" (zoptymalizowane)...\"));\n            const { data, error } = await supabase.rpc('get_monthly_employee_performance', {\n                target_year: year,\n                target_month: month\n            });\n            if (error) {\n                console.error('❌ Błąd pobierania wydajności pracowników:', error);\n                throw error;\n            }\n            console.log(\"✅ Wydajność pracownik\\xf3w pobrana: \".concat((data === null || data === void 0 ? void 0 : data.length) || 0, \" rekord\\xf3w\"));\n            return data;\n        } catch (error) {\n            console.error('❌ getMonthlyEmployeePerformance failed:', error);\n            throw error;\n        }\n    },\n    // Szybkie statystyki zespołu na podstawie materializowanych widoków\n    async getTeamSummary (year, month) {\n        try {\n            const { data, error } = await supabase.from('mv_monthly_employee_stats').select('*').eq('year', year).eq('month', month).order('owned_sales', {\n                ascending: false\n            });\n            if (error) throw error;\n            return data;\n        } catch (error) {\n            console.error('❌ getTeamSummary failed:', error);\n            throw error;\n        }\n    },\n    // Performance analytics - top performers\n    async getTopPerformers () {\n        let limit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 10;\n        try {\n            const { data, error } = await supabase.rpc('get_top_performers', {\n                limit_count: limit\n            });\n            if (error) throw error;\n            return data;\n        } catch (error) {\n            console.error('❌ getTopPerformers failed:', error);\n            throw error;\n        }\n    }\n};\n// API dla lokalizacji/krajów\nconst locationsApi = {\n    // Pobierz wszystkie lokalizacje (podstawowe informacje - dla rejestracji)\n    async getAllLocations () {\n        try {\n            const { data, error } = await supabase.from('locations').select(\"\\n          id,\\n          name,\\n          code,\\n          currency,\\n          timezone,\\n          region,\\n          created_at,\\n          updated_at\\n        \").order('name');\n            if (error) {\n                console.error('❌ Błąd pobierania lokalizacji:', error);\n                throw error;\n            }\n            console.log('✅ Pobrano lokalizacje:', (data === null || data === void 0 ? void 0 : data.length) || 0);\n            return data;\n        } catch (error) {\n            console.error('❌ getAllLocations failed:', error);\n            throw error;\n        }\n    },\n    // Pobierz wszystkie lokalizacje z pełnymi informacjami (dla zalogowanych użytkowników)\n    async getAllLocationsWithManagers () {\n        const { data, error } = await supabase.from('locations').select(\"\\n        id,\\n        name,\\n        code,\\n        currency,\\n        timezone,\\n        region,\\n        project_manager_id,\\n        created_at,\\n        updated_at,\\n        project_manager:users!project_manager_id (\\n          id,\\n          full_name,\\n          email,\\n          avatar_url\\n        )\\n      \").order('name');\n        if (error) throw error;\n        // Przekształć dane - Supabase JOIN zwraca project_manager jako tablicę\n        const transformedData = data === null || data === void 0 ? void 0 : data.map((location)=>({\n                ...location,\n                project_manager: location.project_manager && Array.isArray(location.project_manager) && location.project_manager.length > 0 ? location.project_manager[0] // Weź pierwszy element z tablicy\n                 : location.project_manager && !Array.isArray(location.project_manager) ? location.project_manager // Już jest pojedynczym obiektem\n                 : null // Brak project managera\n            }));\n        return transformedData;\n    },\n    // Pobierz dostępne lokalizacje dla użytkownika\n    async getUserAccessibleLocations (userId) {\n        try {\n            // Najpierw spróbuj użyć funkcji SQL (jeśli istnieje)\n            const { data, error } = await supabase.rpc('get_user_accessible_locations', {\n                user_id: userId\n            });\n            if (error) {\n                console.warn('🔄 Funkcja SQL get_user_accessible_locations nie istnieje, używam fallback logiki');\n                throw error;\n            }\n            return data;\n        } catch (error) {\n            console.warn('⚠️ Błąd wywołania funkcji SQL, używam JavaScript fallback:', error);\n            // Fallback - implementacja logiki w JavaScript\n            try {\n                // Pobierz użytkownika\n                const { data: user, error: userError } = await supabase.from('users').select('role, location_id').eq('id', userId).single();\n                if (userError) {\n                    console.error('❌ Nie można pobrać danych użytkownika:', userError);\n                    return this.getAllLocations() // Fallback - zwróć wszystkie\n                    ;\n                }\n                // Sprawdź rolę użytkownika\n                if (user.role === 'admin' || user.role === 'szef') {\n                    // Admin i szef widzą wszystkie lokalizacje\n                    console.log('👑 Admin/Szef - zwracam wszystkie lokalizacje');\n                    return this.getAllLocations();\n                } else {\n                    // Pozostali widzą tylko swoją lokalizację\n                    if (!user.location_id) {\n                        console.warn('⚠️ Użytkownik nie ma przypisanej lokalizacji');\n                        return [];\n                    }\n                    console.log('👤 Zwykły użytkownik - zwracam lokalizację:', user.location_id);\n                    const { data: location, error: locationError } = await supabase.from('locations').select('*').eq('id', user.location_id).single();\n                    if (locationError) {\n                        console.error('❌ Nie można pobrać lokalizacji użytkownika:', locationError);\n                        return [];\n                    }\n                    return [\n                        location\n                    ];\n                }\n            } catch (fallbackError) {\n                console.error('❌ Fallback logic failed:', fallbackError);\n                // Ostateczny fallback - wszystkie lokalizacje\n                return this.getAllLocations();\n            }\n        }\n    },\n    // Pobierz lokalizację po ID\n    async getLocationById (id) {\n        const { data, error } = await supabase.from('locations').select(\"\\n        id,\\n        name,\\n        code,\\n        currency,\\n        timezone,\\n        region,\\n        project_manager_id,\\n        created_at,\\n        updated_at,\\n        project_manager:users!project_manager_id (\\n          id,\\n          full_name,\\n          email,\\n          avatar_url\\n        )\\n      \").eq('id', id).single();\n        if (error) throw error;\n        // Przekształć dane - Supabase JOIN zwraca project_manager jako tablicę\n        const transformedData = {\n            ...data,\n            project_manager: data.project_manager && Array.isArray(data.project_manager) && data.project_manager.length > 0 ? data.project_manager[0] // Weź pierwszy element z tablicy\n             : data.project_manager && !Array.isArray(data.project_manager) ? data.project_manager // Już jest pojedynczym obiektem\n             : null // Brak project managera\n        };\n        return transformedData;\n    },\n    // Aktualizuj project managera dla lokalizacji\n    async updateLocationProjectManager (locationId, projectManagerId, currentUser) {\n        if (!permissionsApi.canChangeRoles(currentUser)) {\n            throw new Error('Brak uprawnień do zmiany project managera');\n        }\n        const { data, error } = await supabase.from('locations').update({\n            project_manager_id: projectManagerId,\n            updated_at: new Date().toISOString()\n        }).eq('id', locationId).select().single();\n        if (error) throw error;\n        return data;\n    }\n};\n// Funkcje autoryzacji\nconst authApi = {\n    // Zaloguj użytkownika\n    async signIn (email, password) {\n        const { data, error } = await supabase.auth.signInWithPassword({\n            email,\n            password\n        });\n        if (error) throw error;\n        return data;\n    },\n    // Zarejestruj nowego użytkownika\n    async signUp (email, password, fullName, locationId) {\n        const { data, error } = await supabase.auth.signUp({\n            email,\n            password,\n            options: {\n                data: {\n                    full_name: fullName,\n                    location_id: locationId\n                }\n            }\n        });\n        if (error) throw error;\n        return data;\n    },\n    // Wyloguj użytkownika\n    async signOut () {\n        const { error } = await supabase.auth.signOut();\n        if (error) throw error;\n    },\n    // Pobierz aktualnego użytkownika\n    async getCurrentUser () {\n        const { data: { user } } = await supabase.auth.getUser();\n        return user;\n    },\n    // Pobierz profil użytkownika z rolą\n    async getUserProfile (userId) {\n        const { data, error } = await supabase.from('users').select('*').eq('id', userId).single();\n        if (error) throw error;\n        return data;\n    },\n    // Pobierz wszystkich użytkowników (dla opcji filtrowania)\n    async getAllUsers () {\n        try {\n            console.log('👥 getAllUsers START - sprawdzam RLS...');\n            // Sprawdź aktualnego użytkownika\n            const { data: { user } } = await supabase.auth.getUser();\n            console.log('👤 Aktualny użytkownik:', user === null || user === void 0 ? void 0 : user.email, user === null || user === void 0 ? void 0 : user.id);\n            const { data, error } = await supabase.from('users').select('id, full_name, email, role, avatar_url').order('full_name');\n            console.log('👥 getAllUsers - znaleziono użytkowników:', (data === null || data === void 0 ? void 0 : data.length) || 0);\n            console.log('👥 getAllUsers - błąd:', error);\n            if (error) {\n                var _error_message, _error_message1;\n                console.error('❌ RLS Error in getAllUsers:', error);\n                // Sprawdź czy to problem z RLS\n                if (error.code === 'PGRST116' || ((_error_message = error.message) === null || _error_message === void 0 ? void 0 : _error_message.includes('RLS')) || ((_error_message1 = error.message) === null || _error_message1 === void 0 ? void 0 : _error_message1.includes('permission'))) {\n                    console.error('🔒 Problem z Row Level Security - pracownik nie może widzieć innych użytkowników');\n                }\n                throw error;\n            }\n            if (data && data.length > 0) {\n                console.log('👥 Przykład użytkowników:', data.slice(0, 3).map((u)=>({\n                        id: u.id,\n                        name: u.full_name,\n                        role: u.role\n                    })));\n            } else {\n                console.log('👥 UWAGA: Brak danych użytkowników - może RLS blokuje dostęp');\n            }\n            return data;\n        } catch (error) {\n            console.error('❌ getAllUsers FAILED:', error);\n            throw error;\n        }\n    },\n    // Sprawdź sesję użytkownika\n    async getSession () {\n        const { data: { session } } = await supabase.auth.getSession();\n        return session;\n    },\n    // Nasłuchuj zmian w autoryzacji\n    onAuthStateChange (callback) {\n        return supabase.auth.onAuthStateChange(callback);\n    },\n    // Zaktualizuj język użytkownika\n    async updateUserLanguage (userId, language) {\n        const { data, error } = await supabase.from('users').update({\n            language\n        }).eq('id', userId).select().single();\n        if (error) throw error;\n        return data;\n    },\n    // Bezpieczne pobieranie użytkowników do wyświetlania (odporne na RLS)\n    async getAllUsersForDisplay () {\n        try {\n            console.log('👥 getAllUsersForDisplay START - bezpieczne pobieranie...');\n            // Sprawdź aktualnego użytkownika\n            const { data: { user } } = await supabase.auth.getUser();\n            console.log('👤 Aktualny użytkownik:', user === null || user === void 0 ? void 0 : user.email, user === null || user === void 0 ? void 0 : user.id);\n            if (!user) {\n                console.log('❌ Brak zalogowanego użytkownika');\n                return [];\n            }\n            const { data, error } = await supabase.from('users').select('id, full_name, email, role, avatar_url').order('full_name');\n            console.log('👥 getAllUsersForDisplay - znaleziono użytkowników:', (data === null || data === void 0 ? void 0 : data.length) || 0);\n            if (error) {\n                var _error_message, _error_message1;\n                console.error('❌ RLS Error in getAllUsersForDisplay:', error);\n                // Jeśli to problem z RLS, zwróć przynajmniej aktualnego użytkownika\n                if (error.code === 'PGRST116' || ((_error_message = error.message) === null || _error_message === void 0 ? void 0 : _error_message.includes('RLS')) || ((_error_message1 = error.message) === null || _error_message1 === void 0 ? void 0 : _error_message1.includes('permission'))) {\n                    console.error('🔒 RLS blokuje dostęp - zwracam tylko aktualnego użytkownika');\n                    // Pobierz profil aktualnego użytkownika\n                    try {\n                        const userProfile = await this.getUserProfile(user.id);\n                        console.log('👤 Fallback: używam profilu aktualnego użytkownika:', userProfile.full_name);\n                        return [\n                            userProfile\n                        ];\n                    } catch (profileError) {\n                        console.error('❌ Nie można pobrać profilu użytkownika:', profileError);\n                        return [];\n                    }\n                }\n                // Inny błąd - zwróć pustą tablicę\n                console.error('❌ Inny błąd - zwracam pustą tablicę');\n                return [];\n            }\n            if (data && data.length > 0) {\n                console.log('👥 Udane pobranie użytkowników:', data.length);\n                console.log('👥 Przykład użytkowników:', data.slice(0, 3).map((u)=>({\n                        id: u.id,\n                        name: u.full_name,\n                        role: u.role\n                    })));\n                return data;\n            } else {\n                console.log('👥 UWAGA: Brak danych użytkowników');\n                // Fallback - przynajmniej aktualny użytkownik\n                try {\n                    const userProfile = await this.getUserProfile(user.id);\n                    console.log('👤 Fallback: używam profilu aktualnego użytkownika:', userProfile.full_name);\n                    return [\n                        userProfile\n                    ];\n                } catch (profileError) {\n                    console.error('❌ Nie można pobrać profilu użytkownika:', profileError);\n                    return [];\n                }\n            }\n        } catch (error) {\n            console.error('❌ getAllUsersForDisplay CRITICAL ERROR:', error);\n            // Krytyczny fallback - spróbuj przynajmniej pobrać aktualnego użytkownika\n            try {\n                const { data: { user } } = await supabase.auth.getUser();\n                if (user) {\n                    const userProfile = await this.getUserProfile(user.id);\n                    console.log('👤 Krytyczny fallback: zwracam aktualnego użytkownika:', userProfile.full_name);\n                    return [\n                        userProfile\n                    ];\n                }\n            } catch (criticalError) {\n                console.error('❌ Krytyczny błąd fallback:', criticalError);\n            }\n            return [];\n        }\n    }\n};\n// Funkcja do określania koloru statusu \"canvas\" na podstawie czasu\nconst getCanvasStatusColor = (statusChangedAt)=>{\n    if (!statusChangedAt) {\n        return {\n            color: 'bg-blue-500/20 text-blue-400 border-blue-500/30',\n            description: 'Nowy',\n            priority: 'low'\n        };\n    }\n    const now = new Date();\n    const statusDate = new Date(statusChangedAt);\n    const daysDiff = Math.floor((now.getTime() - statusDate.getTime()) / (1000 * 60 * 60 * 24));\n    if (daysDiff <= 2) {\n        // 0-2 dni - zielony (świeży)\n        return {\n            color: 'bg-green-500/20 text-green-400 border-green-500/30',\n            description: \"Świeży (\".concat(daysDiff, \"d)\"),\n            priority: 'low'\n        };\n    } else if (daysDiff <= 4) {\n        // 2-4 dni - żółty (uwaga)\n        return {\n            color: 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30',\n            description: \"Wymaga uwagi (\".concat(daysDiff, \"d)\"),\n            priority: 'medium'\n        };\n    } else {\n        // 5+ dni - czerwony (pilny)\n        return {\n            color: 'bg-red-500/20 text-red-400 border-red-500/30',\n            description: \"Pilny (\".concat(daysDiff, \"d)\"),\n            priority: 'high'\n        };\n    }\n};\n// Funkcja do pobierania klientów z oznaczeniami priorytetów\nconst getCanvasClientsWithPriority = async (user)=>{\n    try {\n        const clients = await clientsApi.getClients(user);\n        const canvasClients = clients.filter((client)=>client.status === 'canvas');\n        const priorityStats = {\n            high: 0,\n            medium: 0,\n            low: 0,\n            total: canvasClients.length\n        };\n        canvasClients.forEach((client)=>{\n            const { priority } = getCanvasStatusColor(client.status_changed_at);\n            priorityStats[priority]++;\n        });\n        return {\n            clients: canvasClients,\n            stats: priorityStats\n        };\n    } catch (error) {\n        console.error('Błąd pobierania klientów canvas:', error);\n        return {\n            clients: [],\n            stats: {\n                high: 0,\n                medium: 0,\n                low: 0,\n                total: 0\n            }\n        };\n    }\n};\n// 🚀 NOWE API PERFORMANCE - Materializowane Widoki i Optymalizacje\n// Dodane zgodnie z INSTRUKCJE_PERFORMANCE_OPTIMIZATIONS.md\nconst dashboardApi = {\n    // Zastępuje wolne zapytania dashboard - teraz ~10ms zamiast ~200ms\n    async getDashboardMetrics () {\n        try {\n            console.log('⚡ Pobieranie szybkich metryk dashboard z materializowanego widoku...');\n            const { data, error } = await supabase.rpc('get_dashboard_metrics');\n            if (error) {\n                console.error('❌ Błąd pobierania metryk dashboard:', error);\n                throw error;\n            }\n            console.log('✅ Dashboard metrics pobrane w trybie express:', (data === null || data === void 0 ? void 0 : data.length) || 0, 'metryk');\n            return data;\n        } catch (error) {\n            console.error('❌ getDashboardMetrics failed:', error);\n            throw error;\n        }\n    },\n    // Sprawdzenie czy materializowane widoki są świeże\n    async checkViewFreshness () {\n        try {\n            // Sprawdź czy tabela mv_dashboard_summary istnieje\n            const { data, error } = await supabase.from('mv_dashboard_summary').select('last_updated').limit(1).single();\n            if (error) {\n                console.warn('⚠️ Materialized view mv_dashboard_summary nie istnieje lub brak uprawnień:', error);\n                // Fallback - użyj aktualnego czasu\n                return {\n                    lastUpdate: new Date().toISOString(),\n                    minutesSinceUpdate: 0,\n                    isStale: false // Założ że dane są świeże jeśli nie ma widoku\n                };\n            }\n            const lastUpdate = new Date(data.last_updated);\n            const now = new Date();\n            const minutesSinceUpdate = Math.floor((now.getTime() - lastUpdate.getTime()) / (1000 * 60));\n            return {\n                lastUpdate: data.last_updated,\n                minutesSinceUpdate,\n                isStale: minutesSinceUpdate > 30 // Uznaj za nieaktualne po 30 minutach\n            };\n        } catch (error) {\n            console.error('❌ Błąd sprawdzania świeżości widoków:', error);\n            // Graceful fallback\n            return {\n                lastUpdate: new Date().toISOString(),\n                minutesSinceUpdate: 0,\n                isStale: false\n            };\n        }\n    }\n};\n// 🚀 NOWE FUNKCJE PERFORMANCE dodane do istniejącego reportsApi\nconst teamApi = {\n    // Szybki przegląd aktywności zespołu\n    async getTeamActivityOverview () {\n        try {\n            console.log('👥 Pobieranie przeglądu aktywności zespołu (zoptymalizowane)...');\n            const { data, error } = await supabase.from('mv_activity_summary').select('*').in('role', [\n                'pracownik',\n                'manager',\n                'project_manager',\n                'junior_manager',\n                'szef'\n            ]).order('activities_24h', {\n                ascending: false\n            });\n            if (error) {\n                console.error('❌ Błąd pobierania aktywności zespołu:', error);\n                throw error;\n            }\n            console.log(\"✅ Aktywność zespołu pobrana: \".concat((data === null || data === void 0 ? void 0 : data.length) || 0, \" użytkownik\\xf3w\"));\n            return data;\n        } catch (error) {\n            console.error('❌ getTeamActivityOverview failed:', error);\n            throw error;\n        }\n    },\n    // Sprawdzenie aktywnych użytkowników w czasie rzeczywistym\n    async getActiveUsersNow () {\n        try {\n            const { data, error } = await supabase.from('mv_activity_summary').select('user_id, full_name, activity_status, last_activity').eq('activity_status', 'active').order('last_activity', {\n                ascending: false\n            });\n            if (error) throw error;\n            return data;\n        } catch (error) {\n            console.error('❌ getActiveUsersNow failed:', error);\n            throw error;\n        }\n    },\n    // Statystyki produktywności zespołu\n    async getProductivityStats () {\n        try {\n            const { data, error } = await supabase.from('mv_activity_summary').select('activities_24h, activities_7d, phone_clicks, status_changes').in('role', [\n                'pracownik',\n                'manager',\n                'project_manager',\n                'junior_manager',\n                'szef'\n            ]);\n            if (error) throw error;\n            // Oblicz średnie\n            const totalUsers = data.length;\n            const avgDaily = data.reduce((sum, user)=>sum + user.activities_24h, 0) / totalUsers;\n            const avgWeekly = data.reduce((sum, user)=>sum + user.activities_7d, 0) / totalUsers;\n            return {\n                totalUsers,\n                avgDailyActivities: Math.round(avgDaily),\n                avgWeeklyActivities: Math.round(avgWeekly),\n                totalDailyActivities: data.reduce((sum, user)=>sum + user.activities_24h, 0),\n                totalWeeklyActivities: data.reduce((sum, user)=>sum + user.activities_7d, 0)\n            };\n        } catch (error) {\n            console.error('❌ getProductivityStats failed:', error);\n            throw error;\n        }\n    }\n};\n// 🔧 PERFORMANCE MONITORING API\nconst performanceApi = {\n    // Sprawdzenie metryk wydajności systemu\n    async getSystemMetrics () {\n        try {\n            console.log('🔍 Pobieranie metryk wydajności systemu...');\n            const tableStats = [];\n            // Pomocnicza funkcja do bezpiecznego pobierania statystyk tabeli\n            const getTableStats = async (tableName)=>{\n                try {\n                    const { count, error } = await supabase.from(tableName).select('*', {\n                        count: 'exact',\n                        head: true\n                    });\n                    if (error) {\n                        console.warn(\"⚠️ Nie można pobrać statystyk tabeli \".concat(tableName, \":\"), error.message);\n                        return null;\n                    }\n                    return {\n                        table_name: tableName,\n                        record_count: count || 0,\n                        table_size: 'N/A',\n                        last_updated: new Date().toISOString()\n                    };\n                } catch (err) {\n                    console.warn(\"⚠️ Błąd tabeli \".concat(tableName, \":\"), err);\n                    return null;\n                }\n            };\n            // Sprawdź każdą tabelę oddzielnie\n            const tables = [\n                'clients',\n                'users',\n                'activity_logs',\n                'activity_logs_archive'\n            ];\n            for (const tableName of tables){\n                const stats = await getTableStats(tableName);\n                if (stats) {\n                    tableStats.push(stats);\n                }\n            }\n            // Jeśli nie udało się pobrać żadnych statystyk, zwróć podstawowe informacje\n            if (tableStats.length === 0) {\n                console.warn('⚠️ Nie udało się pobrać statystyk żadnej tabeli - zwracam dane przykładowe');\n                tableStats.push({\n                    table_name: 'system_info',\n                    record_count: 0,\n                    table_size: 'Brak dostępu',\n                    last_updated: new Date().toISOString()\n                });\n            }\n            console.log(\"✅ Pobrano statystyki \".concat(tableStats.length, \" tabel\"));\n            return tableStats;\n        } catch (error) {\n            console.error('❌ getSystemMetrics failed:', error);\n            // Graceful fallback - zwróć podstawowe dane zamiast rzucać błąd\n            return [\n                {\n                    table_name: 'error_fallback',\n                    record_count: 0,\n                    table_size: 'Błąd połączenia',\n                    last_updated: new Date().toISOString()\n                }\n            ];\n        }\n    },\n    // Manualne odświeżenie materializowanych widoków\n    async refreshMaterializedViews () {\n        try {\n            console.log('🔄 Manualnie odświeżam materializowane widoki...');\n            const { data, error } = await supabase.rpc('refresh_all_materialized_views');\n            if (error) throw error;\n            console.log('✅ Widoki odświeżone:', data);\n            return data;\n        } catch (error) {\n            console.error('❌ refreshMaterializedViews failed:', error);\n            throw error;\n        }\n    },\n    // Archiwizacja starych logów\n    async archiveOldLogs () {\n        try {\n            console.log('📦 Uruchamiam archiwizację starych logów...');\n            const { data, error } = await supabase.rpc('archive_old_activity_logs');\n            if (error) throw error;\n            console.log(\"✅ Zarchiwizowano \".concat(data, \" starych log\\xf3w\"));\n            return data;\n        } catch (error) {\n            console.error('❌ archiveOldLogs failed:', error);\n            throw error;\n        }\n    },\n    // Optymalizacja bazy danych\n    async optimizeDatabase () {\n        try {\n            console.log('🚀 Uruchamiam optymalizację bazy danych...');\n            const { data, error } = await supabase.rpc('optimize_database_performance');\n            if (error) throw error;\n            console.log('✅ Baza danych zoptymalizowana:', data);\n            return data;\n        } catch (error) {\n            console.error('❌ optimizeDatabase failed:', error);\n            throw error;\n        }\n    }\n};\nconst callsApi = {\n    /**\r\n   * 📞 POBIERZ HISTORIĘ POŁĄCZEŃ\r\n   * \r\n   * Pobiera historię połączeń telefonicznych z activity_logs\r\n   * Uwzględnia uprawnienia użytkownika:\r\n   * - Admin/Szef: wszystkie połączenia z wybranego kraju\r\n   * - Project Manager/Junior Manager: wszystkie z ich lokalizacji\r\n   * - Pracownik: tylko swoje połączenia\r\n   */ async getCalls (user) {\n        let filter = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        try {\n            console.log('📞 Pobieranie historii połączeń...', {\n                user: user.role,\n                filter\n            });\n            let query = supabase.from('activity_logs').select(\"\\n          id,\\n          client_id,\\n          changed_by,\\n          timestamp,\\n          clients!inner (\\n            id,\\n            first_name,\\n            last_name,\\n            company_name,\\n            phone,\\n            location_id,\\n            location:locations (\\n              id,\\n              name,\\n              code\\n            )\\n          )\\n        \").eq('field_changed', 'last_phone_click').order('timestamp', {\n                ascending: false\n            }).limit(filter.limit || 100);\n            // Filtrowanie według uprawnień użytkownika\n            if (user.role === 'pracownik') {\n                // Pracownik widzi tylko swoje połączenia\n                query = query.eq('changed_by', user.id);\n            } else if ([\n                'junior_manager',\n                'manager',\n                'project_manager'\n            ].includes(user.role)) {\n                // Menedżerowie widzą połączenia z ich lokalizacji\n                if (filter.locationId) {\n                    // Jeśli wybrano konkretną lokalizację, filtruj po niej\n                    query = query.eq('clients.location_id', filter.locationId);\n                } else if (user.location_id) {\n                    // Jeśli nie wybrano lokalizacji, pokaż z lokalizacji użytkownika\n                    query = query.eq('clients.location_id', user.location_id);\n                }\n            } else if ([\n                'szef',\n                'admin'\n            ].includes(user.role)) {\n                // Szef i admin widzą wszystko, opcjonalnie filtrowane po lokalizacji\n                if (filter.locationId) {\n                    query = query.eq('clients.location_id', filter.locationId);\n                }\n            }\n            // Dodatkowe filtry czasowe\n            if (filter.startDate) {\n                query = query.gte('timestamp', filter.startDate);\n            }\n            if (filter.endDate) {\n                query = query.lte('timestamp', filter.endDate);\n            }\n            const { data: callLogs, error } = await query;\n            if (error) {\n                console.error('❌ Błąd pobierania połączeń:', error);\n                throw error;\n            }\n            if (!callLogs || callLogs.length === 0) {\n                console.log('📞 Brak połączeń dla podanych kryteriów');\n                return [];\n            }\n            // Pobierz informacje o użytkownikach (dzwoniących)\n            const callerIds = [\n                ...new Set(callLogs.map((log)=>log.changed_by))\n            ];\n            const { data: callers, error: callersError } = await supabase.from('users').select('id, full_name, role, avatar_url').in('id', callerIds);\n            if (callersError) {\n                console.error('❌ Błąd pobierania użytkowników:', callersError);\n            // Kontynuuj bez szczegółów użytkowników\n            }\n            // Stwórz mapę użytkowników\n            const callersMap = (callers || []).reduce((acc, caller)=>{\n                acc[caller.id] = caller;\n                return acc;\n            }, {});\n            // Przekształć dane na format CallRecord\n            const callRecords = callLogs.map((log)=>{\n                const client = Array.isArray(log.clients) ? log.clients[0] : log.clients;\n                const caller = callersMap[log.changed_by];\n                const location = Array.isArray(client === null || client === void 0 ? void 0 : client.location) ? client.location[0] : client === null || client === void 0 ? void 0 : client.location;\n                return {\n                    id: log.id,\n                    client_id: log.client_id,\n                    client_name: client ? \"\".concat(client.first_name, \" \").concat(client.last_name).trim() : 'Nieznany klient',\n                    client_company: (client === null || client === void 0 ? void 0 : client.company_name) || 'Brak informacji',\n                    client_phone: (client === null || client === void 0 ? void 0 : client.phone) || 'Brak telefonu',\n                    called_by: log.changed_by,\n                    caller_name: (caller === null || caller === void 0 ? void 0 : caller.full_name) || 'Nieznany użytkownik',\n                    caller_role: (caller === null || caller === void 0 ? void 0 : caller.role) || 'unknown',\n                    caller_avatar: (caller === null || caller === void 0 ? void 0 : caller.avatar_url) || null,\n                    call_timestamp: log.timestamp,\n                    location_id: (client === null || client === void 0 ? void 0 : client.location_id) || null,\n                    location_name: (location === null || location === void 0 ? void 0 : location.name) || null,\n                    location_code: (location === null || location === void 0 ? void 0 : location.code) || null\n                };\n            });\n            console.log(\"✅ Pobrano \".concat(callRecords.length, \" rekord\\xf3w połączeń\"));\n            return callRecords;\n        } catch (error) {\n            console.error('❌ Błąd w callsApi.getCalls:', error);\n            throw error;\n        }\n    },\n    /**\r\n   * 📊 POBIERZ STATYSTYKI POŁĄCZEŃ\r\n   * \r\n   * Pobiera statystyki połączeń dla wybranego okresu\r\n   */ async getCallsStats (user) {\n        let filter = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        try {\n            console.log('📊 Pobieranie statystyk połączeń...');\n            const now = new Date();\n            const today = now.toISOString().split('T')[0];\n            const weekStart = new Date(now.setDate(now.getDate() - now.getDay())).toISOString().split('T')[0];\n            const monthStart = new Date(now.getFullYear(), now.getMonth(), 1).toISOString();\n            // Pobierz wszystkie połączenia zgodnie z uprawnieniami\n            const allCalls = await callsApi.getCalls(user, {\n                ...filter,\n                limit: 1000\n            });\n            // Zlicz statystyki\n            const totalCalls = allCalls.length;\n            const callsToday = allCalls.filter((call)=>call.call_timestamp.startsWith(today)).length;\n            const callsThisWeek = allCalls.filter((call)=>call.call_timestamp >= weekStart).length;\n            const callsThisMonth = allCalls.filter((call)=>call.call_timestamp >= monthStart).length;\n            // Top dzwoniący\n            const callerCounts = allCalls.reduce((acc, call)=>{\n                const key = call.called_by;\n                if (!acc[key]) {\n                    acc[key] = {\n                        name: call.caller_name,\n                        role: call.caller_role,\n                        avatar: call.caller_avatar,\n                        count: 0\n                    };\n                }\n                acc[key].count++;\n                return acc;\n            }, {});\n            const topCallers = Object.values(callerCounts).sort((a, b)=>b.count - a.count).slice(0, 5);\n            return {\n                totalCalls,\n                callsToday,\n                callsThisWeek,\n                callsThisMonth,\n                topCallers\n            };\n        } catch (error) {\n            console.error('❌ Błąd pobierania statystyk połączeń:', error);\n            return {\n                totalCalls: 0,\n                callsToday: 0,\n                callsThisWeek: 0,\n                callsThisMonth: 0,\n                topCallers: []\n            };\n        }\n    }\n};\n// 📡 NOTIFICATIONS API - System powiadomień\nconst notificationsApi = {\n    // Pobierz powiadomienia dla użytkownika\n    async getNotifications (user, options) {\n        try {\n            let query = supabase.from('notifications').select(\"\\n          id,\\n          user_id,\\n          client_id,\\n          type,\\n          title,\\n          message,\\n          read,\\n          urgent,\\n          metadata,\\n          created_at,\\n          expires_at,\\n          client:clients (\\n            id,\\n            first_name,\\n            last_name,\\n            company_name\\n          )\\n        \").eq('user_id', user.id).order('created_at', {\n                ascending: false\n            });\n            // Filtruj tylko nieprzeczytane\n            if (options === null || options === void 0 ? void 0 : options.unreadOnly) {\n                query = query.eq('read', false);\n            }\n            // Filtruj po typie\n            if (options === null || options === void 0 ? void 0 : options.type) {\n                query = query.eq('type', options.type);\n            }\n            // Limit\n            if (options === null || options === void 0 ? void 0 : options.limit) {\n                query = query.limit(options.limit);\n            }\n            const { data, error } = await query;\n            if (error) {\n                console.error('❌ Błąd pobierania powiadomień:', error);\n                throw error;\n            }\n            return (data || []).map((notification)=>({\n                    ...notification,\n                    // Przekształć dane klienta z JOIN\n                    client: notification.client && Array.isArray(notification.client) && notification.client.length > 0 ? notification.client[0] : notification.client && !Array.isArray(notification.client) ? notification.client : undefined\n                }));\n        } catch (error) {\n            console.error('❌ Błąd w getNotifications:', error);\n            throw error;\n        }\n    },\n    // Pobierz liczbę nieprzeczytanych powiadomień\n    async getUnreadCount (user) {\n        try {\n            const { count, error } = await supabase.from('notifications').select('*', {\n                count: 'exact',\n                head: true\n            }).eq('user_id', user.id).eq('read', false);\n            if (error) {\n                console.error('❌ Błąd pobierania liczby nieprzeczytanych:', error);\n                throw error;\n            }\n            return count || 0;\n        } catch (error) {\n            console.error('❌ Błąd w getUnreadCount:', error);\n            return 0;\n        }\n    },\n    // Oznacz powiadomienie jako przeczytane\n    async markAsRead (notificationId) {\n        try {\n            const { error } = await supabase.rpc('mark_notification_as_read', {\n                notification_id: notificationId\n            });\n            if (error) {\n                console.error('❌ Błąd oznaczania jako przeczytane:', error);\n                throw error;\n            }\n        } catch (error) {\n            console.error('❌ Błąd w markAsRead:', error);\n            throw error;\n        }\n    },\n    // Oznacz wszystkie powiadomienia jako przeczytane\n    async markAllAsRead (user) {\n        try {\n            const { data, error } = await supabase.rpc('mark_all_notifications_as_read');\n            if (error) {\n                console.error('❌ Błąd oznaczania wszystkich jako przeczytane:', error);\n                throw error;\n            }\n            return data || 0;\n        } catch (error) {\n            console.error('❌ Błąd w markAllAsRead:', error);\n            throw error;\n        }\n    },\n    // Utwórz nowe powiadomienie\n    async createNotification (notification) {\n        try {\n            const { data, error } = await supabase.from('notifications').insert([\n                notification\n            ]).select().single();\n            if (error) {\n                console.error('❌ Błąd tworzenia powiadomienia:', error);\n                throw error;\n            }\n            return data;\n        } catch (error) {\n            console.error('❌ Błąd w createNotification:', error);\n            throw error;\n        }\n    },\n    // Usuń powiadomienie\n    async deleteNotification (notificationId) {\n        try {\n            const { error } = await supabase.from('notifications').delete().eq('id', notificationId);\n            if (error) {\n                console.error('❌ Błąd usuwania powiadomienia:', error);\n                throw error;\n            }\n        } catch (error) {\n            console.error('❌ Błąd w deleteNotification:', error);\n            throw error;\n        }\n    },\n    // Wyczyść stare powiadomienia\n    async cleanupOldNotifications () {\n        try {\n            const { error } = await supabase.rpc('cleanup_old_notifications');\n            if (error) {\n                console.error('❌ Błąd czyszczenia starych powiadomień:', error);\n                throw error;\n            }\n        } catch (error) {\n            console.error('❌ Błąd w cleanupOldNotifications:', error);\n            throw error;\n        }\n    },\n    // Pobierz dzisiejsze przypomnienia dla dashboard\n    async getTodayReminders (user) {\n        try {\n            const today = new Date().toISOString().split('T')[0];\n            const { data, error } = await supabase.from('notifications').select(\"\\n          id,\\n          user_id,\\n          client_id,\\n          type,\\n          title,\\n          message,\\n          read,\\n          urgent,\\n          metadata,\\n          created_at,\\n          expires_at,\\n          client:clients (\\n            id,\\n            first_name,\\n            last_name,\\n            company_name\\n          )\\n        \").eq('user_id', user.id).eq('type', 'reminder').gte('created_at', \"\".concat(today, \"T00:00:00.000Z\")).lt('created_at', \"\".concat(today, \"T23:59:59.999Z\")).order('created_at', {\n                ascending: true\n            });\n            if (error) {\n                console.error('❌ Błąd pobierania dzisiejszych przypomnień:', error);\n                throw error;\n            }\n            return (data || []).map((notification)=>({\n                    ...notification,\n                    client: notification.client && Array.isArray(notification.client) && notification.client.length > 0 ? notification.client[0] : notification.client && !Array.isArray(notification.client) ? notification.client : undefined\n                }));\n        } catch (error) {\n            console.error('❌ Błąd w getTodayReminders:', error);\n            return [];\n        }\n    },\n    // Uruchom funkcje generowania powiadomień (do testowania)\n    async triggerReminderCheck () {\n        try {\n            const { error } = await supabase.rpc('create_reminder_notifications');\n            if (error) {\n                console.error('❌ Błąd uruchamiania sprawdzania przypomnień:', error);\n                throw error;\n            }\n        } catch (error) {\n            console.error('❌ Błąd w triggerReminderCheck:', error);\n            throw error;\n        }\n    },\n    async triggerAntisaleCheck () {\n        try {\n            const { error } = await supabase.rpc('create_antysale_warnings');\n            if (error) {\n                console.error('❌ Błąd uruchamiania sprawdzania antysale:', error);\n                throw error;\n            }\n        } catch (error) {\n            console.error('❌ Błąd w triggerAntisaleCheck:', error);\n            throw error;\n        }\n    },\n    // Subskrypcja na real-time powiadomienia\n    subscribeToNotifications (userId, callback) {\n        return supabase.channel(\"notifications_\".concat(userId)).on('postgres_changes', {\n            event: 'INSERT',\n            schema: 'public',\n            table: 'notifications',\n            filter: \"user_id=eq.\".concat(userId)\n        }, (payload)=>{\n            callback(payload.new);\n        }).subscribe();\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/supabase.ts\n"));

/***/ })

});