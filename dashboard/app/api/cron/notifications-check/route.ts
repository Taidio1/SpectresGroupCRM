import { NextRequest, NextResponse } from 'next/server'
import { supabase } from '@/lib/supabase'
import { logger } from '@/lib/logger'

// üïê CRON JOB: Sprawdzanie przypomnie≈Ñ i generowanie powiadomie≈Ñ
// Endpoint wywo≈Çywany co minutƒô przez zewnƒôtrzny serwis cron (np. Vercel Cron, GitHub Actions)
// URL: /api/cron/notifications-check

export async function GET(request: NextRequest) {
  try {
    // Sprawd≈∫ autoryzacjƒô (opcjonalnie - mo≈ºna u≈ºyƒá secret token)
    const authHeader = request.headers.get('authorization')
    const expectedToken = process.env.CRON_SECRET_TOKEN || 'default-secret'
    
    if (authHeader !== `Bearer ${expectedToken}`) {
      logger.warn('Nieautoryzowana pr√≥ba dostƒôpu do cron job notifications-check')
      return NextResponse.json(
        { error: 'Unauthorized' }, 
        { status: 401 }
      )
    }

    logger.info('üïê Uruchamianie cron job: sprawdzanie powiadomie≈Ñ')

    const results = {
      reminders_checked: 0,
      reminders_created: 0,
      antysale_checked: 0,
      antysale_created: 0,
      errors: [] as string[]
    }

    // 1. Sprawd≈∫ i utw√≥rz powiadomienia o przypomnieniach
    try {
      logger.info('üìå Sprawdzanie przypomnie≈Ñ klient√≥w...')
      
      const { data: reminderData, error: reminderError } = await supabase
        .rpc('create_reminder_notifications')

      if (reminderError) {
        throw new Error(`B≈ÇƒÖd sprawdzania przypomnie≈Ñ: ${reminderError.message}`)
      }

      results.reminders_checked++
      logger.success('‚úÖ Przypomnienia sprawdzone pomy≈õlnie')

    } catch (error) {
      const errorMsg = `B≈ÇƒÖd w create_reminder_notifications: ${error instanceof Error ? error.message : 'Unknown error'}`
      logger.error(errorMsg)
      results.errors.push(errorMsg)
    }

    // 2. Sprawd≈∫ i utw√≥rz ostrze≈ºenia o d≈Çugotrwa≈Çych statusach antysale
    try {
      logger.info('‚ö†Ô∏è Sprawdzanie d≈Çugotrwa≈Çych status√≥w antysale...')
      
      const { data: antysaleData, error: antysaleError } = await supabase
        .rpc('create_antysale_warnings')

      if (antysaleError) {
        throw new Error(`B≈ÇƒÖd sprawdzania antysale: ${antysaleError.message}`)
      }

      results.antysale_checked++
      logger.success('‚úÖ Ostrze≈ºenia antysale sprawdzone pomy≈õlnie')

    } catch (error) {
      const errorMsg = `B≈ÇƒÖd w create_antysale_warnings: ${error instanceof Error ? error.message : 'Unknown error'}`
      logger.error(errorMsg)
      results.errors.push(errorMsg)
    }

    // 3. Opcjonalnie - wyczy≈õƒá stare powiadomienia (raz dziennie)
    const now = new Date()
    const isCleanupTime = now.getHours() === 2 && now.getMinutes() < 5 // Miƒôdzy 2:00-2:05

    if (isCleanupTime) {
      try {
        logger.info('üßπ Uruchamianie czyszczenia starych powiadomie≈Ñ...')
        
        const { error: cleanupError } = await supabase
          .rpc('cleanup_old_notifications')

        if (cleanupError) {
          throw new Error(`B≈ÇƒÖd czyszczenia: ${cleanupError.message}`)
        }

        logger.success('‚úÖ Stare powiadomienia wyczyszczone')

      } catch (error) {
        const errorMsg = `B≈ÇƒÖd w cleanup_old_notifications: ${error instanceof Error ? error.message : 'Unknown error'}`
        logger.error(errorMsg)
        results.errors.push(errorMsg)
      }
    }

    // 4. Statystyki ko≈Ñcowe
    const hasErrors = results.errors.length > 0
    const responseStatus = hasErrors ? 207 : 200 // 207 Multi-Status dla czƒô≈õciowych b≈Çƒôd√≥w

    logger.info('üìä Cron job notifications-check zako≈Ñczony', {
      status: hasErrors ? 'partial_success' : 'success',
      results
    })

    return NextResponse.json({
      success: !hasErrors,
      message: hasErrors 
        ? 'Cron job zako≈Ñczony z b≈Çƒôdami' 
        : 'Cron job zako≈Ñczony pomy≈õlnie',
      timestamp: new Date().toISOString(),
      results
    }, { 
      status: responseStatus 
    })

  } catch (error) {
    logger.error('‚ùå Krytyczny b≈ÇƒÖd w cron job notifications-check', { error })
    
    return NextResponse.json({
      success: false,
      message: 'Krytyczny b≈ÇƒÖd w cron job',
      error: error instanceof Error ? error.message : 'Unknown error',
      timestamp: new Date().toISOString()
    }, { 
      status: 500 
    })
  }
}

// POST endpoint do manualnego uruchamiania (dla testowania)
export async function POST(request: NextRequest) {
  try {
    logger.info('üîß Manualne uruchomienie cron job notifications-check')
    
    // Przekieruj do GET z tym samym tokenem
    const authHeader = request.headers.get('authorization')
    
    const mockRequest = new NextRequest(request.url, {
      method: 'GET',
      headers: {
        'authorization': authHeader || `Bearer ${process.env.CRON_SECRET_TOKEN || 'default-secret'}`
      }
    })

    return await GET(mockRequest)

  } catch (error) {
    logger.error('‚ùå B≈ÇƒÖd w manualnym uruchomieniu cron job', { error })
    
    return NextResponse.json({
      success: false,
      message: 'B≈ÇƒÖd w manualnym uruchomieniu',
      error: error instanceof Error ? error.message : 'Unknown error',
      timestamp: new Date().toISOString()
    }, { 
      status: 500 
    })
  }
} 