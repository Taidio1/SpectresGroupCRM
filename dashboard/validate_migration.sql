-- =====================================================================================
-- WALIDACJA MIGRACJI ORGANIZATIONAL STRUCTURE
-- Uruchom ten skrypt PO wykonaniu migracji w Supabase Dashboard
-- =====================================================================================

-- üîç SPRAWDZENIE STRUKTURY BAZY DANYCH
SELECT 
    '=== WALIDACJA MIGRACJI ORGANIZATIONAL STRUCTURE ===' as header,
    now() as timestamp;

-- 1. SPRAWD≈π TABELE
SELECT 
    '1. TABELE' as test_category,
    'locations' as element,
    CASE WHEN EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'locations' AND table_schema = 'public') 
         THEN '‚úÖ OK' ELSE '‚ùå BRAK' END as status

UNION ALL

-- 2. SPRAWD≈π KOLUMNY W USERS
SELECT 
    '2. KOLUMNY USERS',
    column_name,
    CASE WHEN column_name IN ('location_id', 'manager_id', 'role_hierarchy_level', 'territory', 'start_date', 'is_active') 
         THEN '‚úÖ OK' ELSE '‚ö†Ô∏è ISTNIEJƒÑCA' END
FROM information_schema.columns 
WHERE table_name = 'users' AND table_schema = 'public'
AND column_name IN ('location_id', 'manager_id', 'role_hierarchy_level', 'territory', 'start_date', 'is_active')

UNION ALL

-- 3. SPRAWD≈π NOWE ROLE
SELECT 
    '3. NOWE ROLE',
    enumlabel,
    CASE WHEN enumlabel IN ('project_manager', 'junior_manager') 
         THEN '‚úÖ NOWA' ELSE '‚ö†Ô∏è ISTNIEJƒÑCA' END
FROM pg_enum pe
JOIN pg_type pt ON pe.enumtypid = pt.oid
WHERE pt.typname = 'user_role'
AND enumlabel IN ('project_manager', 'junior_manager')

UNION ALL

-- 4. SPRAWD≈π FUNKCJE HIERARCHICZNE
SELECT 
    '4. FUNKCJE',
    routine_name,
    CASE WHEN routine_name IN ('get_subordinates', 'is_manager_of', 'get_hierarchy_path', 'validate_hierarchy') 
         THEN '‚úÖ OK' ELSE '‚ùå NIEOCZEKIWANA' END
FROM information_schema.routines 
WHERE routine_schema = 'public' 
AND routine_name IN ('get_subordinates', 'is_manager_of', 'get_hierarchy_path', 'validate_hierarchy')

UNION ALL

-- 5. SPRAWD≈π INDEKSY HIERARCHICZNE
SELECT 
    '5. INDEKSY',
    indexname,
    '‚úÖ OK'
FROM pg_indexes 
WHERE schemaname = 'public' 
AND indexname IN ('idx_users_location_id', 'idx_users_manager_id', 'idx_users_role_hierarchy_level')

UNION ALL

-- 6. SPRAWD≈π MATERIALIZED VIEW
SELECT 
    '6. MATERIALIZED VIEWS',
    matviewname,
    CASE WHEN matviewname = 'mv_hierarchy_statistics' THEN '‚úÖ OK' ELSE '‚ùå NIEOCZEKIWANA' END
FROM pg_matviews 
WHERE schemaname = 'public' 
AND matviewname = 'mv_hierarchy_statistics'

ORDER BY test_category, element;

-- =====================================================================================
-- TESTY FUNKCJONALNO≈öCI
-- =====================================================================================

-- TEST 1: Sprawd≈∫ hierarchiƒô (czy nie ma cyklicznych odwo≈Ça≈Ñ)
SELECT 
    'üîÑ TEST HIERARCHII' as test,
    CASE WHEN COUNT(*) = 0 THEN '‚úÖ BRAK PROBLEM√ìW' 
         ELSE '‚ùå ' || COUNT(*) || ' PROBLEM√ìW' END as result
FROM validate_hierarchy();

-- TEST 2: Sprawd≈∫ dane lokalizacji
SELECT 
    'üåç TEST LOKALIZACJI' as test,
    'Kraje: ' || string_agg(name || ' (' || code || ')', ', ') as result
FROM locations WHERE is_active = true;

-- TEST 3: Sprawd≈∫ dane u≈ºytkownik√≥w
SELECT 
    'üë• TEST U≈ªYTKOWNIK√ìW' as test,
    'Total: ' || COUNT(*) || 
    ', z lokalizacjƒÖ: ' || COUNT(location_id) || 
    ', z hierarchiƒÖ: ' || COUNT(CASE WHEN role_hierarchy_level IS NOT NULL THEN 1 END) ||
    ', aktywni: ' || COUNT(CASE WHEN is_active = true THEN 1 END) as result
FROM users;

-- TEST 4: Sprawd≈∫ poziomy hierarchii
SELECT 
    'üìä POZIOMY HIERARCHII' as test,
    'Poziom ' || role_hierarchy_level || ': ' || COUNT(*) || ' os√≥b (' || 
    string_agg(DISTINCT role::text, ', ') || ')' as result
FROM users 
WHERE role_hierarchy_level IS NOT NULL
GROUP BY role_hierarchy_level
ORDER BY role_hierarchy_level;

-- TEST 5: Test funkcji get_subordinates (przyk≈Çad)
SELECT 
    'üîó TEST FUNKCJI HIERARCHII' as test,
    CASE 
        WHEN EXISTS (SELECT FROM information_schema.routines WHERE routine_name = 'get_subordinates')
        THEN '‚úÖ FUNKCJE DOSTƒòPNE'
        ELSE '‚ùå BRAK FUNKCJI'
    END as result;

-- =====================================================================================
-- PODSUMOWANIE WALIDACJI
-- =====================================================================================

SELECT 
    'üéØ PODSUMOWANIE MIGRACJI' as summary,
    'Migracja ' || 
    CASE 
        WHEN EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'locations')
         AND EXISTS (SELECT FROM information_schema.columns WHERE table_name = 'users' AND column_name = 'location_id')
         AND EXISTS (SELECT FROM information_schema.routines WHERE routine_name = 'get_subordinates')
         AND EXISTS (SELECT FROM pg_matviews WHERE matviewname = 'mv_hierarchy_statistics')
        THEN '‚úÖ ZAKO≈ÉCZONA POMY≈öLNIE'
        ELSE '‚ùå NIEKOMPLETNA - SPRAWD≈π B≈ÅƒòDY POWY≈ªEJ'
    END as status;

-- =====================================================================================
-- NASTƒòPNE KROKI
-- =====================================================================================

SELECT 
    'üìã NASTƒòPNE KROKI' as info,
    'Po pomy≈õlnej walidacji:
    1. Aktualizuj kod aplikacji (TypeScript interfaces)
    2. Zaimplementuj komponenty hierarchii
    3. Przetestuj nowe funkcjonalno≈õci
    4. Przeprowad≈∫ szkolenie u≈ºytkownik√≥w
    5. Monitoruj wydajno≈õƒá przez pierwszy tydzie≈Ñ' as steps; 